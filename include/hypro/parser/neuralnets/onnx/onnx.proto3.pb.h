// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx.proto3

#ifndef PROTOBUF_INCLUDED_onnx_2eproto3
#define PROTOBUF_INCLUDED_onnx_2eproto3

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_onnx_2eproto3 

namespace protobuf_onnx_2eproto3 {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[21];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_onnx_2eproto3
namespace onnx {
class AttributeProto;
class AttributeProtoDefaultTypeInternal;
extern AttributeProtoDefaultTypeInternal _AttributeProto_default_instance_;
class FunctionProto;
class FunctionProtoDefaultTypeInternal;
extern FunctionProtoDefaultTypeInternal _FunctionProto_default_instance_;
class GraphProto;
class GraphProtoDefaultTypeInternal;
extern GraphProtoDefaultTypeInternal _GraphProto_default_instance_;
class ModelProto;
class ModelProtoDefaultTypeInternal;
extern ModelProtoDefaultTypeInternal _ModelProto_default_instance_;
class NodeProto;
class NodeProtoDefaultTypeInternal;
extern NodeProtoDefaultTypeInternal _NodeProto_default_instance_;
class OperatorSetIdProto;
class OperatorSetIdProtoDefaultTypeInternal;
extern OperatorSetIdProtoDefaultTypeInternal _OperatorSetIdProto_default_instance_;
class SparseTensorProto;
class SparseTensorProtoDefaultTypeInternal;
extern SparseTensorProtoDefaultTypeInternal _SparseTensorProto_default_instance_;
class StringStringEntryProto;
class StringStringEntryProtoDefaultTypeInternal;
extern StringStringEntryProtoDefaultTypeInternal _StringStringEntryProto_default_instance_;
class TensorAnnotation;
class TensorAnnotationDefaultTypeInternal;
extern TensorAnnotationDefaultTypeInternal _TensorAnnotation_default_instance_;
class TensorProto;
class TensorProtoDefaultTypeInternal;
extern TensorProtoDefaultTypeInternal _TensorProto_default_instance_;
class TensorProto_Segment;
class TensorProto_SegmentDefaultTypeInternal;
extern TensorProto_SegmentDefaultTypeInternal _TensorProto_Segment_default_instance_;
class TensorShapeProto;
class TensorShapeProtoDefaultTypeInternal;
extern TensorShapeProtoDefaultTypeInternal _TensorShapeProto_default_instance_;
class TensorShapeProto_Dimension;
class TensorShapeProto_DimensionDefaultTypeInternal;
extern TensorShapeProto_DimensionDefaultTypeInternal _TensorShapeProto_Dimension_default_instance_;
class TrainingInfoProto;
class TrainingInfoProtoDefaultTypeInternal;
extern TrainingInfoProtoDefaultTypeInternal _TrainingInfoProto_default_instance_;
class TypeProto;
class TypeProtoDefaultTypeInternal;
extern TypeProtoDefaultTypeInternal _TypeProto_default_instance_;
class TypeProto_Map;
class TypeProto_MapDefaultTypeInternal;
extern TypeProto_MapDefaultTypeInternal _TypeProto_Map_default_instance_;
class TypeProto_Optional;
class TypeProto_OptionalDefaultTypeInternal;
extern TypeProto_OptionalDefaultTypeInternal _TypeProto_Optional_default_instance_;
class TypeProto_Sequence;
class TypeProto_SequenceDefaultTypeInternal;
extern TypeProto_SequenceDefaultTypeInternal _TypeProto_Sequence_default_instance_;
class TypeProto_SparseTensor;
class TypeProto_SparseTensorDefaultTypeInternal;
extern TypeProto_SparseTensorDefaultTypeInternal _TypeProto_SparseTensor_default_instance_;
class TypeProto_Tensor;
class TypeProto_TensorDefaultTypeInternal;
extern TypeProto_TensorDefaultTypeInternal _TypeProto_Tensor_default_instance_;
class ValueInfoProto;
class ValueInfoProtoDefaultTypeInternal;
extern ValueInfoProtoDefaultTypeInternal _ValueInfoProto_default_instance_;
}  // namespace onnx
namespace google {
namespace protobuf {
template<> ::onnx::AttributeProto* Arena::CreateMaybeMessage<::onnx::AttributeProto>(Arena*);
template<> ::onnx::FunctionProto* Arena::CreateMaybeMessage<::onnx::FunctionProto>(Arena*);
template<> ::onnx::GraphProto* Arena::CreateMaybeMessage<::onnx::GraphProto>(Arena*);
template<> ::onnx::ModelProto* Arena::CreateMaybeMessage<::onnx::ModelProto>(Arena*);
template<> ::onnx::NodeProto* Arena::CreateMaybeMessage<::onnx::NodeProto>(Arena*);
template<> ::onnx::OperatorSetIdProto* Arena::CreateMaybeMessage<::onnx::OperatorSetIdProto>(Arena*);
template<> ::onnx::SparseTensorProto* Arena::CreateMaybeMessage<::onnx::SparseTensorProto>(Arena*);
template<> ::onnx::StringStringEntryProto* Arena::CreateMaybeMessage<::onnx::StringStringEntryProto>(Arena*);
template<> ::onnx::TensorAnnotation* Arena::CreateMaybeMessage<::onnx::TensorAnnotation>(Arena*);
template<> ::onnx::TensorProto* Arena::CreateMaybeMessage<::onnx::TensorProto>(Arena*);
template<> ::onnx::TensorProto_Segment* Arena::CreateMaybeMessage<::onnx::TensorProto_Segment>(Arena*);
template<> ::onnx::TensorShapeProto* Arena::CreateMaybeMessage<::onnx::TensorShapeProto>(Arena*);
template<> ::onnx::TensorShapeProto_Dimension* Arena::CreateMaybeMessage<::onnx::TensorShapeProto_Dimension>(Arena*);
template<> ::onnx::TrainingInfoProto* Arena::CreateMaybeMessage<::onnx::TrainingInfoProto>(Arena*);
template<> ::onnx::TypeProto* Arena::CreateMaybeMessage<::onnx::TypeProto>(Arena*);
template<> ::onnx::TypeProto_Map* Arena::CreateMaybeMessage<::onnx::TypeProto_Map>(Arena*);
template<> ::onnx::TypeProto_Optional* Arena::CreateMaybeMessage<::onnx::TypeProto_Optional>(Arena*);
template<> ::onnx::TypeProto_Sequence* Arena::CreateMaybeMessage<::onnx::TypeProto_Sequence>(Arena*);
template<> ::onnx::TypeProto_SparseTensor* Arena::CreateMaybeMessage<::onnx::TypeProto_SparseTensor>(Arena*);
template<> ::onnx::TypeProto_Tensor* Arena::CreateMaybeMessage<::onnx::TypeProto_Tensor>(Arena*);
template<> ::onnx::ValueInfoProto* Arena::CreateMaybeMessage<::onnx::ValueInfoProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace onnx {

enum AttributeProto_AttributeType {
  AttributeProto_AttributeType_UNDEFINED = 0,
  AttributeProto_AttributeType_FLOAT = 1,
  AttributeProto_AttributeType_INT = 2,
  AttributeProto_AttributeType_STRING = 3,
  AttributeProto_AttributeType_TENSOR = 4,
  AttributeProto_AttributeType_GRAPH = 5,
  AttributeProto_AttributeType_SPARSE_TENSOR = 11,
  AttributeProto_AttributeType_TYPE_PROTO = 13,
  AttributeProto_AttributeType_FLOATS = 6,
  AttributeProto_AttributeType_INTS = 7,
  AttributeProto_AttributeType_STRINGS = 8,
  AttributeProto_AttributeType_TENSORS = 9,
  AttributeProto_AttributeType_GRAPHS = 10,
  AttributeProto_AttributeType_SPARSE_TENSORS = 12,
  AttributeProto_AttributeType_TYPE_PROTOS = 14,
  AttributeProto_AttributeType_AttributeProto_AttributeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AttributeProto_AttributeType_AttributeProto_AttributeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AttributeProto_AttributeType_IsValid(int value);
const AttributeProto_AttributeType AttributeProto_AttributeType_AttributeType_MIN = AttributeProto_AttributeType_UNDEFINED;
const AttributeProto_AttributeType AttributeProto_AttributeType_AttributeType_MAX = AttributeProto_AttributeType_TYPE_PROTOS;
const int AttributeProto_AttributeType_AttributeType_ARRAYSIZE = AttributeProto_AttributeType_AttributeType_MAX + 1;

enum TensorProto_DataType {
  TensorProto_DataType_UNDEFINED = 0,
  TensorProto_DataType_FLOAT = 1,
  TensorProto_DataType_UINT8 = 2,
  TensorProto_DataType_INT8 = 3,
  TensorProto_DataType_UINT16 = 4,
  TensorProto_DataType_INT16 = 5,
  TensorProto_DataType_INT32 = 6,
  TensorProto_DataType_INT64 = 7,
  TensorProto_DataType_STRING = 8,
  TensorProto_DataType_BOOL = 9,
  TensorProto_DataType_FLOAT16 = 10,
  TensorProto_DataType_DOUBLE = 11,
  TensorProto_DataType_UINT32 = 12,
  TensorProto_DataType_UINT64 = 13,
  TensorProto_DataType_COMPLEX64 = 14,
  TensorProto_DataType_COMPLEX128 = 15,
  TensorProto_DataType_BFLOAT16 = 16,
  TensorProto_DataType_TensorProto_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TensorProto_DataType_TensorProto_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TensorProto_DataType_IsValid(int value);
const TensorProto_DataType TensorProto_DataType_DataType_MIN = TensorProto_DataType_UNDEFINED;
const TensorProto_DataType TensorProto_DataType_DataType_MAX = TensorProto_DataType_BFLOAT16;
const int TensorProto_DataType_DataType_ARRAYSIZE = TensorProto_DataType_DataType_MAX + 1;

enum TensorProto_DataLocation {
  TensorProto_DataLocation_DEFAULT = 0,
  TensorProto_DataLocation_EXTERNAL = 1,
  TensorProto_DataLocation_TensorProto_DataLocation_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TensorProto_DataLocation_TensorProto_DataLocation_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TensorProto_DataLocation_IsValid(int value);
const TensorProto_DataLocation TensorProto_DataLocation_DataLocation_MIN = TensorProto_DataLocation_DEFAULT;
const TensorProto_DataLocation TensorProto_DataLocation_DataLocation_MAX = TensorProto_DataLocation_EXTERNAL;
const int TensorProto_DataLocation_DataLocation_ARRAYSIZE = TensorProto_DataLocation_DataLocation_MAX + 1;

enum Version {
  _START_VERSION = 0,
  IR_VERSION_2017_10_10 = 1,
  IR_VERSION_2017_10_30 = 2,
  IR_VERSION_2017_11_3 = 3,
  IR_VERSION_2019_1_22 = 4,
  IR_VERSION_2019_3_18 = 5,
  IR_VERSION_2019_9_19 = 6,
  IR_VERSION_2020_5_8 = 7,
  IR_VERSION_2021_7_30 = 8,
  IR_VERSION = 9,
  Version_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Version_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Version_IsValid(int value);
const Version Version_MIN = _START_VERSION;
const Version Version_MAX = IR_VERSION;
const int Version_ARRAYSIZE = Version_MAX + 1;

enum OperatorStatus {
  EXPERIMENTAL = 0,
  STABLE = 1,
  OperatorStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OperatorStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OperatorStatus_IsValid(int value);
const OperatorStatus OperatorStatus_MIN = EXPERIMENTAL;
const OperatorStatus OperatorStatus_MAX = STABLE;
const int OperatorStatus_ARRAYSIZE = OperatorStatus_MAX + 1;

// ===================================================================

class AttributeProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.AttributeProto) */ {
 public:
  AttributeProto();
  virtual ~AttributeProto();

  AttributeProto(const AttributeProto& from);

  inline AttributeProto& operator=(const AttributeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttributeProto(AttributeProto&& from) noexcept
    : AttributeProto() {
    *this = ::std::move(from);
  }

  inline AttributeProto& operator=(AttributeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AttributeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttributeProto* internal_default_instance() {
    return reinterpret_cast<const AttributeProto*>(
               &_AttributeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AttributeProto* other);
  friend void swap(AttributeProto& a, AttributeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttributeProto* New() const final {
    return CreateMaybeMessage<AttributeProto>(NULL);
  }

  AttributeProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AttributeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AttributeProto& from);
  void MergeFrom(const AttributeProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AttributeProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AttributeProto_AttributeType AttributeType;
  static const AttributeType UNDEFINED =
    AttributeProto_AttributeType_UNDEFINED;
  static const AttributeType FLOAT =
    AttributeProto_AttributeType_FLOAT;
  static const AttributeType INT =
    AttributeProto_AttributeType_INT;
  static const AttributeType STRING =
    AttributeProto_AttributeType_STRING;
  static const AttributeType TENSOR =
    AttributeProto_AttributeType_TENSOR;
  static const AttributeType GRAPH =
    AttributeProto_AttributeType_GRAPH;
  static const AttributeType SPARSE_TENSOR =
    AttributeProto_AttributeType_SPARSE_TENSOR;
  static const AttributeType TYPE_PROTO =
    AttributeProto_AttributeType_TYPE_PROTO;
  static const AttributeType FLOATS =
    AttributeProto_AttributeType_FLOATS;
  static const AttributeType INTS =
    AttributeProto_AttributeType_INTS;
  static const AttributeType STRINGS =
    AttributeProto_AttributeType_STRINGS;
  static const AttributeType TENSORS =
    AttributeProto_AttributeType_TENSORS;
  static const AttributeType GRAPHS =
    AttributeProto_AttributeType_GRAPHS;
  static const AttributeType SPARSE_TENSORS =
    AttributeProto_AttributeType_SPARSE_TENSORS;
  static const AttributeType TYPE_PROTOS =
    AttributeProto_AttributeType_TYPE_PROTOS;
  static inline bool AttributeType_IsValid(int value) {
    return AttributeProto_AttributeType_IsValid(value);
  }
  static const AttributeType AttributeType_MIN =
    AttributeProto_AttributeType_AttributeType_MIN;
  static const AttributeType AttributeType_MAX =
    AttributeProto_AttributeType_AttributeType_MAX;
  static const int AttributeType_ARRAYSIZE =
    AttributeProto_AttributeType_AttributeType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated float floats = 7;
  int floats_size() const;
  void clear_floats();
  static const int kFloatsFieldNumber = 7;
  float floats(int index) const;
  void set_floats(int index, float value);
  void add_floats(float value);
  const ::google::protobuf::RepeatedField< float >&
      floats() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_floats();

  // repeated int64 ints = 8;
  int ints_size() const;
  void clear_ints();
  static const int kIntsFieldNumber = 8;
  ::google::protobuf::int64 ints(int index) const;
  void set_ints(int index, ::google::protobuf::int64 value);
  void add_ints(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ints() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ints();

  // repeated bytes strings = 9;
  int strings_size() const;
  void clear_strings();
  static const int kStringsFieldNumber = 9;
  const ::std::string& strings(int index) const;
  ::std::string* mutable_strings(int index);
  void set_strings(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_strings(int index, ::std::string&& value);
  #endif
  void set_strings(int index, const char* value);
  void set_strings(int index, const void* value, size_t size);
  ::std::string* add_strings();
  void add_strings(const ::std::string& value);
  #if LANG_CXX11
  void add_strings(::std::string&& value);
  #endif
  void add_strings(const char* value);
  void add_strings(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& strings() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strings();

  // repeated .onnx.TensorProto tensors = 10;
  int tensors_size() const;
  void clear_tensors();
  static const int kTensorsFieldNumber = 10;
  ::onnx::TensorProto* mutable_tensors(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
      mutable_tensors();
  const ::onnx::TensorProto& tensors(int index) const;
  ::onnx::TensorProto* add_tensors();
  const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
      tensors() const;

  // repeated .onnx.GraphProto graphs = 11;
  int graphs_size() const;
  void clear_graphs();
  static const int kGraphsFieldNumber = 11;
  ::onnx::GraphProto* mutable_graphs(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::GraphProto >*
      mutable_graphs();
  const ::onnx::GraphProto& graphs(int index) const;
  ::onnx::GraphProto* add_graphs();
  const ::google::protobuf::RepeatedPtrField< ::onnx::GraphProto >&
      graphs() const;

  // repeated .onnx.TypeProto type_protos = 15;
  int type_protos_size() const;
  void clear_type_protos();
  static const int kTypeProtosFieldNumber = 15;
  ::onnx::TypeProto* mutable_type_protos(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::TypeProto >*
      mutable_type_protos();
  const ::onnx::TypeProto& type_protos(int index) const;
  ::onnx::TypeProto* add_type_protos();
  const ::google::protobuf::RepeatedPtrField< ::onnx::TypeProto >&
      type_protos() const;

  // repeated .onnx.SparseTensorProto sparse_tensors = 23;
  int sparse_tensors_size() const;
  void clear_sparse_tensors();
  static const int kSparseTensorsFieldNumber = 23;
  ::onnx::SparseTensorProto* mutable_sparse_tensors(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >*
      mutable_sparse_tensors();
  const ::onnx::SparseTensorProto& sparse_tensors(int index) const;
  ::onnx::SparseTensorProto* add_sparse_tensors();
  const ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >&
      sparse_tensors() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes s = 4;
  void clear_s();
  static const int kSFieldNumber = 4;
  const ::std::string& s() const;
  void set_s(const ::std::string& value);
  #if LANG_CXX11
  void set_s(::std::string&& value);
  #endif
  void set_s(const char* value);
  void set_s(const void* value, size_t size);
  ::std::string* mutable_s();
  ::std::string* release_s();
  void set_allocated_s(::std::string* s);

  // string doc_string = 13;
  void clear_doc_string();
  static const int kDocStringFieldNumber = 13;
  const ::std::string& doc_string() const;
  void set_doc_string(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_string(::std::string&& value);
  #endif
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  ::std::string* mutable_doc_string();
  ::std::string* release_doc_string();
  void set_allocated_doc_string(::std::string* doc_string);

  // string ref_attr_name = 21;
  void clear_ref_attr_name();
  static const int kRefAttrNameFieldNumber = 21;
  const ::std::string& ref_attr_name() const;
  void set_ref_attr_name(const ::std::string& value);
  #if LANG_CXX11
  void set_ref_attr_name(::std::string&& value);
  #endif
  void set_ref_attr_name(const char* value);
  void set_ref_attr_name(const char* value, size_t size);
  ::std::string* mutable_ref_attr_name();
  ::std::string* release_ref_attr_name();
  void set_allocated_ref_attr_name(::std::string* ref_attr_name);

  // .onnx.TensorProto t = 5;
  bool has_t() const;
  void clear_t();
  static const int kTFieldNumber = 5;
  private:
  const ::onnx::TensorProto& _internal_t() const;
  public:
  const ::onnx::TensorProto& t() const;
  ::onnx::TensorProto* release_t();
  ::onnx::TensorProto* mutable_t();
  void set_allocated_t(::onnx::TensorProto* t);

  // .onnx.GraphProto g = 6;
  bool has_g() const;
  void clear_g();
  static const int kGFieldNumber = 6;
  private:
  const ::onnx::GraphProto& _internal_g() const;
  public:
  const ::onnx::GraphProto& g() const;
  ::onnx::GraphProto* release_g();
  ::onnx::GraphProto* mutable_g();
  void set_allocated_g(::onnx::GraphProto* g);

  // .onnx.TypeProto tp = 14;
  bool has_tp() const;
  void clear_tp();
  static const int kTpFieldNumber = 14;
  private:
  const ::onnx::TypeProto& _internal_tp() const;
  public:
  const ::onnx::TypeProto& tp() const;
  ::onnx::TypeProto* release_tp();
  ::onnx::TypeProto* mutable_tp();
  void set_allocated_tp(::onnx::TypeProto* tp);

  // .onnx.SparseTensorProto sparse_tensor = 22;
  bool has_sparse_tensor() const;
  void clear_sparse_tensor();
  static const int kSparseTensorFieldNumber = 22;
  private:
  const ::onnx::SparseTensorProto& _internal_sparse_tensor() const;
  public:
  const ::onnx::SparseTensorProto& sparse_tensor() const;
  ::onnx::SparseTensorProto* release_sparse_tensor();
  ::onnx::SparseTensorProto* mutable_sparse_tensor();
  void set_allocated_sparse_tensor(::onnx::SparseTensorProto* sparse_tensor);

  // int64 i = 3;
  void clear_i();
  static const int kIFieldNumber = 3;
  ::google::protobuf::int64 i() const;
  void set_i(::google::protobuf::int64 value);

  // float f = 2;
  void clear_f();
  static const int kFFieldNumber = 2;
  float f() const;
  void set_f(float value);

  // .onnx.AttributeProto.AttributeType type = 20;
  void clear_type();
  static const int kTypeFieldNumber = 20;
  ::onnx::AttributeProto_AttributeType type() const;
  void set_type(::onnx::AttributeProto_AttributeType value);

  // @@protoc_insertion_point(class_scope:onnx.AttributeProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< float > floats_;
  mutable int _floats_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ints_;
  mutable int _ints_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strings_;
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto > tensors_;
  ::google::protobuf::RepeatedPtrField< ::onnx::GraphProto > graphs_;
  ::google::protobuf::RepeatedPtrField< ::onnx::TypeProto > type_protos_;
  ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto > sparse_tensors_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr s_;
  ::google::protobuf::internal::ArenaStringPtr doc_string_;
  ::google::protobuf::internal::ArenaStringPtr ref_attr_name_;
  ::onnx::TensorProto* t_;
  ::onnx::GraphProto* g_;
  ::onnx::TypeProto* tp_;
  ::onnx::SparseTensorProto* sparse_tensor_;
  ::google::protobuf::int64 i_;
  float f_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class ValueInfoProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.ValueInfoProto) */ {
 public:
  ValueInfoProto();
  virtual ~ValueInfoProto();

  ValueInfoProto(const ValueInfoProto& from);

  inline ValueInfoProto& operator=(const ValueInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueInfoProto(ValueInfoProto&& from) noexcept
    : ValueInfoProto() {
    *this = ::std::move(from);
  }

  inline ValueInfoProto& operator=(ValueInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ValueInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueInfoProto* internal_default_instance() {
    return reinterpret_cast<const ValueInfoProto*>(
               &_ValueInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ValueInfoProto* other);
  friend void swap(ValueInfoProto& a, ValueInfoProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueInfoProto* New() const final {
    return CreateMaybeMessage<ValueInfoProto>(NULL);
  }

  ValueInfoProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ValueInfoProto& from);
  void MergeFrom(const ValueInfoProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ValueInfoProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string doc_string = 3;
  void clear_doc_string();
  static const int kDocStringFieldNumber = 3;
  const ::std::string& doc_string() const;
  void set_doc_string(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_string(::std::string&& value);
  #endif
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  ::std::string* mutable_doc_string();
  ::std::string* release_doc_string();
  void set_allocated_doc_string(::std::string* doc_string);

  // .onnx.TypeProto type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  private:
  const ::onnx::TypeProto& _internal_type() const;
  public:
  const ::onnx::TypeProto& type() const;
  ::onnx::TypeProto* release_type();
  ::onnx::TypeProto* mutable_type();
  void set_allocated_type(::onnx::TypeProto* type);

  // @@protoc_insertion_point(class_scope:onnx.ValueInfoProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr doc_string_;
  ::onnx::TypeProto* type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class NodeProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.NodeProto) */ {
 public:
  NodeProto();
  virtual ~NodeProto();

  NodeProto(const NodeProto& from);

  inline NodeProto& operator=(const NodeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeProto(NodeProto&& from) noexcept
    : NodeProto() {
    *this = ::std::move(from);
  }

  inline NodeProto& operator=(NodeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const NodeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeProto* internal_default_instance() {
    return reinterpret_cast<const NodeProto*>(
               &_NodeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NodeProto* other);
  friend void swap(NodeProto& a, NodeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeProto* New() const final {
    return CreateMaybeMessage<NodeProto>(NULL);
  }

  NodeProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const NodeProto& from);
  void MergeFrom(const NodeProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string input = 1;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 1;
  const ::std::string& input(int index) const;
  ::std::string* mutable_input(int index);
  void set_input(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_input(int index, ::std::string&& value);
  #endif
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  ::std::string* add_input();
  void add_input(const ::std::string& value);
  #if LANG_CXX11
  void add_input(::std::string&& value);
  #endif
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated string output = 2;
  int output_size() const;
  void clear_output();
  static const int kOutputFieldNumber = 2;
  const ::std::string& output(int index) const;
  ::std::string* mutable_output(int index);
  void set_output(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_output(int index, ::std::string&& value);
  #endif
  void set_output(int index, const char* value);
  void set_output(int index, const char* value, size_t size);
  ::std::string* add_output();
  void add_output(const ::std::string& value);
  #if LANG_CXX11
  void add_output(::std::string&& value);
  #endif
  void add_output(const char* value);
  void add_output(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& output() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_output();

  // repeated .onnx.AttributeProto attribute = 5;
  int attribute_size() const;
  void clear_attribute();
  static const int kAttributeFieldNumber = 5;
  ::onnx::AttributeProto* mutable_attribute(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >*
      mutable_attribute();
  const ::onnx::AttributeProto& attribute(int index) const;
  ::onnx::AttributeProto* add_attribute();
  const ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >&
      attribute() const;

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string op_type = 4;
  void clear_op_type();
  static const int kOpTypeFieldNumber = 4;
  const ::std::string& op_type() const;
  void set_op_type(const ::std::string& value);
  #if LANG_CXX11
  void set_op_type(::std::string&& value);
  #endif
  void set_op_type(const char* value);
  void set_op_type(const char* value, size_t size);
  ::std::string* mutable_op_type();
  ::std::string* release_op_type();
  void set_allocated_op_type(::std::string* op_type);

  // string doc_string = 6;
  void clear_doc_string();
  static const int kDocStringFieldNumber = 6;
  const ::std::string& doc_string() const;
  void set_doc_string(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_string(::std::string&& value);
  #endif
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  ::std::string* mutable_doc_string();
  ::std::string* release_doc_string();
  void set_allocated_doc_string(::std::string* doc_string);

  // string domain = 7;
  void clear_domain();
  static const int kDomainFieldNumber = 7;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // @@protoc_insertion_point(class_scope:onnx.NodeProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedPtrField< ::std::string> output_;
  ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto > attribute_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr op_type_;
  ::google::protobuf::internal::ArenaStringPtr doc_string_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class TrainingInfoProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.TrainingInfoProto) */ {
 public:
  TrainingInfoProto();
  virtual ~TrainingInfoProto();

  TrainingInfoProto(const TrainingInfoProto& from);

  inline TrainingInfoProto& operator=(const TrainingInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrainingInfoProto(TrainingInfoProto&& from) noexcept
    : TrainingInfoProto() {
    *this = ::std::move(from);
  }

  inline TrainingInfoProto& operator=(TrainingInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TrainingInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainingInfoProto* internal_default_instance() {
    return reinterpret_cast<const TrainingInfoProto*>(
               &_TrainingInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TrainingInfoProto* other);
  friend void swap(TrainingInfoProto& a, TrainingInfoProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrainingInfoProto* New() const final {
    return CreateMaybeMessage<TrainingInfoProto>(NULL);
  }

  TrainingInfoProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrainingInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TrainingInfoProto& from);
  void MergeFrom(const TrainingInfoProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrainingInfoProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .onnx.StringStringEntryProto initialization_binding = 3;
  int initialization_binding_size() const;
  void clear_initialization_binding();
  static const int kInitializationBindingFieldNumber = 3;
  ::onnx::StringStringEntryProto* mutable_initialization_binding(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
      mutable_initialization_binding();
  const ::onnx::StringStringEntryProto& initialization_binding(int index) const;
  ::onnx::StringStringEntryProto* add_initialization_binding();
  const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
      initialization_binding() const;

  // repeated .onnx.StringStringEntryProto update_binding = 4;
  int update_binding_size() const;
  void clear_update_binding();
  static const int kUpdateBindingFieldNumber = 4;
  ::onnx::StringStringEntryProto* mutable_update_binding(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
      mutable_update_binding();
  const ::onnx::StringStringEntryProto& update_binding(int index) const;
  ::onnx::StringStringEntryProto* add_update_binding();
  const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
      update_binding() const;

  // .onnx.GraphProto initialization = 1;
  bool has_initialization() const;
  void clear_initialization();
  static const int kInitializationFieldNumber = 1;
  private:
  const ::onnx::GraphProto& _internal_initialization() const;
  public:
  const ::onnx::GraphProto& initialization() const;
  ::onnx::GraphProto* release_initialization();
  ::onnx::GraphProto* mutable_initialization();
  void set_allocated_initialization(::onnx::GraphProto* initialization);

  // .onnx.GraphProto algorithm = 2;
  bool has_algorithm() const;
  void clear_algorithm();
  static const int kAlgorithmFieldNumber = 2;
  private:
  const ::onnx::GraphProto& _internal_algorithm() const;
  public:
  const ::onnx::GraphProto& algorithm() const;
  ::onnx::GraphProto* release_algorithm();
  ::onnx::GraphProto* mutable_algorithm();
  void set_allocated_algorithm(::onnx::GraphProto* algorithm);

  // @@protoc_insertion_point(class_scope:onnx.TrainingInfoProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto > initialization_binding_;
  ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto > update_binding_;
  ::onnx::GraphProto* initialization_;
  ::onnx::GraphProto* algorithm_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class ModelProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.ModelProto) */ {
 public:
  ModelProto();
  virtual ~ModelProto();

  ModelProto(const ModelProto& from);

  inline ModelProto& operator=(const ModelProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModelProto(ModelProto&& from) noexcept
    : ModelProto() {
    *this = ::std::move(from);
  }

  inline ModelProto& operator=(ModelProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ModelProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelProto* internal_default_instance() {
    return reinterpret_cast<const ModelProto*>(
               &_ModelProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ModelProto* other);
  friend void swap(ModelProto& a, ModelProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModelProto* New() const final {
    return CreateMaybeMessage<ModelProto>(NULL);
  }

  ModelProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModelProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ModelProto& from);
  void MergeFrom(const ModelProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .onnx.OperatorSetIdProto opset_import = 8;
  int opset_import_size() const;
  void clear_opset_import();
  static const int kOpsetImportFieldNumber = 8;
  ::onnx::OperatorSetIdProto* mutable_opset_import(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto >*
      mutable_opset_import();
  const ::onnx::OperatorSetIdProto& opset_import(int index) const;
  ::onnx::OperatorSetIdProto* add_opset_import();
  const ::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto >&
      opset_import() const;

  // repeated .onnx.StringStringEntryProto metadata_props = 14;
  int metadata_props_size() const;
  void clear_metadata_props();
  static const int kMetadataPropsFieldNumber = 14;
  ::onnx::StringStringEntryProto* mutable_metadata_props(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
      mutable_metadata_props();
  const ::onnx::StringStringEntryProto& metadata_props(int index) const;
  ::onnx::StringStringEntryProto* add_metadata_props();
  const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
      metadata_props() const;

  // repeated .onnx.TrainingInfoProto training_info = 20;
  int training_info_size() const;
  void clear_training_info();
  static const int kTrainingInfoFieldNumber = 20;
  ::onnx::TrainingInfoProto* mutable_training_info(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::TrainingInfoProto >*
      mutable_training_info();
  const ::onnx::TrainingInfoProto& training_info(int index) const;
  ::onnx::TrainingInfoProto* add_training_info();
  const ::google::protobuf::RepeatedPtrField< ::onnx::TrainingInfoProto >&
      training_info() const;

  // repeated .onnx.FunctionProto functions = 25;
  int functions_size() const;
  void clear_functions();
  static const int kFunctionsFieldNumber = 25;
  ::onnx::FunctionProto* mutable_functions(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::FunctionProto >*
      mutable_functions();
  const ::onnx::FunctionProto& functions(int index) const;
  ::onnx::FunctionProto* add_functions();
  const ::google::protobuf::RepeatedPtrField< ::onnx::FunctionProto >&
      functions() const;

  // string producer_name = 2;
  void clear_producer_name();
  static const int kProducerNameFieldNumber = 2;
  const ::std::string& producer_name() const;
  void set_producer_name(const ::std::string& value);
  #if LANG_CXX11
  void set_producer_name(::std::string&& value);
  #endif
  void set_producer_name(const char* value);
  void set_producer_name(const char* value, size_t size);
  ::std::string* mutable_producer_name();
  ::std::string* release_producer_name();
  void set_allocated_producer_name(::std::string* producer_name);

  // string producer_version = 3;
  void clear_producer_version();
  static const int kProducerVersionFieldNumber = 3;
  const ::std::string& producer_version() const;
  void set_producer_version(const ::std::string& value);
  #if LANG_CXX11
  void set_producer_version(::std::string&& value);
  #endif
  void set_producer_version(const char* value);
  void set_producer_version(const char* value, size_t size);
  ::std::string* mutable_producer_version();
  ::std::string* release_producer_version();
  void set_allocated_producer_version(::std::string* producer_version);

  // string domain = 4;
  void clear_domain();
  static const int kDomainFieldNumber = 4;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string doc_string = 6;
  void clear_doc_string();
  static const int kDocStringFieldNumber = 6;
  const ::std::string& doc_string() const;
  void set_doc_string(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_string(::std::string&& value);
  #endif
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  ::std::string* mutable_doc_string();
  ::std::string* release_doc_string();
  void set_allocated_doc_string(::std::string* doc_string);

  // .onnx.GraphProto graph = 7;
  bool has_graph() const;
  void clear_graph();
  static const int kGraphFieldNumber = 7;
  private:
  const ::onnx::GraphProto& _internal_graph() const;
  public:
  const ::onnx::GraphProto& graph() const;
  ::onnx::GraphProto* release_graph();
  ::onnx::GraphProto* mutable_graph();
  void set_allocated_graph(::onnx::GraphProto* graph);

  // int64 ir_version = 1;
  void clear_ir_version();
  static const int kIrVersionFieldNumber = 1;
  ::google::protobuf::int64 ir_version() const;
  void set_ir_version(::google::protobuf::int64 value);

  // int64 model_version = 5;
  void clear_model_version();
  static const int kModelVersionFieldNumber = 5;
  ::google::protobuf::int64 model_version() const;
  void set_model_version(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:onnx.ModelProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto > opset_import_;
  ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto > metadata_props_;
  ::google::protobuf::RepeatedPtrField< ::onnx::TrainingInfoProto > training_info_;
  ::google::protobuf::RepeatedPtrField< ::onnx::FunctionProto > functions_;
  ::google::protobuf::internal::ArenaStringPtr producer_name_;
  ::google::protobuf::internal::ArenaStringPtr producer_version_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr doc_string_;
  ::onnx::GraphProto* graph_;
  ::google::protobuf::int64 ir_version_;
  ::google::protobuf::int64 model_version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class StringStringEntryProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.StringStringEntryProto) */ {
 public:
  StringStringEntryProto();
  virtual ~StringStringEntryProto();

  StringStringEntryProto(const StringStringEntryProto& from);

  inline StringStringEntryProto& operator=(const StringStringEntryProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringStringEntryProto(StringStringEntryProto&& from) noexcept
    : StringStringEntryProto() {
    *this = ::std::move(from);
  }

  inline StringStringEntryProto& operator=(StringStringEntryProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const StringStringEntryProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringStringEntryProto* internal_default_instance() {
    return reinterpret_cast<const StringStringEntryProto*>(
               &_StringStringEntryProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(StringStringEntryProto* other);
  friend void swap(StringStringEntryProto& a, StringStringEntryProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringStringEntryProto* New() const final {
    return CreateMaybeMessage<StringStringEntryProto>(NULL);
  }

  StringStringEntryProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StringStringEntryProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const StringStringEntryProto& from);
  void MergeFrom(const StringStringEntryProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringStringEntryProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:onnx.StringStringEntryProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class TensorAnnotation : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.TensorAnnotation) */ {
 public:
  TensorAnnotation();
  virtual ~TensorAnnotation();

  TensorAnnotation(const TensorAnnotation& from);

  inline TensorAnnotation& operator=(const TensorAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorAnnotation(TensorAnnotation&& from) noexcept
    : TensorAnnotation() {
    *this = ::std::move(from);
  }

  inline TensorAnnotation& operator=(TensorAnnotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TensorAnnotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorAnnotation* internal_default_instance() {
    return reinterpret_cast<const TensorAnnotation*>(
               &_TensorAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TensorAnnotation* other);
  friend void swap(TensorAnnotation& a, TensorAnnotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorAnnotation* New() const final {
    return CreateMaybeMessage<TensorAnnotation>(NULL);
  }

  TensorAnnotation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TensorAnnotation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TensorAnnotation& from);
  void MergeFrom(const TensorAnnotation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TensorAnnotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .onnx.StringStringEntryProto quant_parameter_tensor_names = 2;
  int quant_parameter_tensor_names_size() const;
  void clear_quant_parameter_tensor_names();
  static const int kQuantParameterTensorNamesFieldNumber = 2;
  ::onnx::StringStringEntryProto* mutable_quant_parameter_tensor_names(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
      mutable_quant_parameter_tensor_names();
  const ::onnx::StringStringEntryProto& quant_parameter_tensor_names(int index) const;
  ::onnx::StringStringEntryProto* add_quant_parameter_tensor_names();
  const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
      quant_parameter_tensor_names() const;

  // string tensor_name = 1;
  void clear_tensor_name();
  static const int kTensorNameFieldNumber = 1;
  const ::std::string& tensor_name() const;
  void set_tensor_name(const ::std::string& value);
  #if LANG_CXX11
  void set_tensor_name(::std::string&& value);
  #endif
  void set_tensor_name(const char* value);
  void set_tensor_name(const char* value, size_t size);
  ::std::string* mutable_tensor_name();
  ::std::string* release_tensor_name();
  void set_allocated_tensor_name(::std::string* tensor_name);

  // @@protoc_insertion_point(class_scope:onnx.TensorAnnotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto > quant_parameter_tensor_names_;
  ::google::protobuf::internal::ArenaStringPtr tensor_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class GraphProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.GraphProto) */ {
 public:
  GraphProto();
  virtual ~GraphProto();

  GraphProto(const GraphProto& from);

  inline GraphProto& operator=(const GraphProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphProto(GraphProto&& from) noexcept
    : GraphProto() {
    *this = ::std::move(from);
  }

  inline GraphProto& operator=(GraphProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const GraphProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphProto* internal_default_instance() {
    return reinterpret_cast<const GraphProto*>(
               &_GraphProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GraphProto* other);
  friend void swap(GraphProto& a, GraphProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphProto* New() const final {
    return CreateMaybeMessage<GraphProto>(NULL);
  }

  GraphProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GraphProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const GraphProto& from);
  void MergeFrom(const GraphProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GraphProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .onnx.NodeProto node = 1;
  int node_size() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  ::onnx::NodeProto* mutable_node(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >*
      mutable_node();
  const ::onnx::NodeProto& node(int index) const;
  ::onnx::NodeProto* add_node();
  const ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >&
      node() const;

  // repeated .onnx.TensorProto initializer = 5;
  int initializer_size() const;
  void clear_initializer();
  static const int kInitializerFieldNumber = 5;
  ::onnx::TensorProto* mutable_initializer(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
      mutable_initializer();
  const ::onnx::TensorProto& initializer(int index) const;
  ::onnx::TensorProto* add_initializer();
  const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
      initializer() const;

  // repeated .onnx.ValueInfoProto input = 11;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 11;
  ::onnx::ValueInfoProto* mutable_input(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
      mutable_input();
  const ::onnx::ValueInfoProto& input(int index) const;
  ::onnx::ValueInfoProto* add_input();
  const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
      input() const;

  // repeated .onnx.ValueInfoProto output = 12;
  int output_size() const;
  void clear_output();
  static const int kOutputFieldNumber = 12;
  ::onnx::ValueInfoProto* mutable_output(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
      mutable_output();
  const ::onnx::ValueInfoProto& output(int index) const;
  ::onnx::ValueInfoProto* add_output();
  const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
      output() const;

  // repeated .onnx.ValueInfoProto value_info = 13;
  int value_info_size() const;
  void clear_value_info();
  static const int kValueInfoFieldNumber = 13;
  ::onnx::ValueInfoProto* mutable_value_info(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
      mutable_value_info();
  const ::onnx::ValueInfoProto& value_info(int index) const;
  ::onnx::ValueInfoProto* add_value_info();
  const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
      value_info() const;

  // repeated .onnx.TensorAnnotation quantization_annotation = 14;
  int quantization_annotation_size() const;
  void clear_quantization_annotation();
  static const int kQuantizationAnnotationFieldNumber = 14;
  ::onnx::TensorAnnotation* mutable_quantization_annotation(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorAnnotation >*
      mutable_quantization_annotation();
  const ::onnx::TensorAnnotation& quantization_annotation(int index) const;
  ::onnx::TensorAnnotation* add_quantization_annotation();
  const ::google::protobuf::RepeatedPtrField< ::onnx::TensorAnnotation >&
      quantization_annotation() const;

  // repeated .onnx.SparseTensorProto sparse_initializer = 15;
  int sparse_initializer_size() const;
  void clear_sparse_initializer();
  static const int kSparseInitializerFieldNumber = 15;
  ::onnx::SparseTensorProto* mutable_sparse_initializer(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >*
      mutable_sparse_initializer();
  const ::onnx::SparseTensorProto& sparse_initializer(int index) const;
  ::onnx::SparseTensorProto* add_sparse_initializer();
  const ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >&
      sparse_initializer() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string doc_string = 10;
  void clear_doc_string();
  static const int kDocStringFieldNumber = 10;
  const ::std::string& doc_string() const;
  void set_doc_string(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_string(::std::string&& value);
  #endif
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  ::std::string* mutable_doc_string();
  ::std::string* release_doc_string();
  void set_allocated_doc_string(::std::string* doc_string);

  // @@protoc_insertion_point(class_scope:onnx.GraphProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto > node_;
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto > initializer_;
  ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto > input_;
  ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto > output_;
  ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto > value_info_;
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorAnnotation > quantization_annotation_;
  ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto > sparse_initializer_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr doc_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class TensorProto_Segment : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.TensorProto.Segment) */ {
 public:
  TensorProto_Segment();
  virtual ~TensorProto_Segment();

  TensorProto_Segment(const TensorProto_Segment& from);

  inline TensorProto_Segment& operator=(const TensorProto_Segment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorProto_Segment(TensorProto_Segment&& from) noexcept
    : TensorProto_Segment() {
    *this = ::std::move(from);
  }

  inline TensorProto_Segment& operator=(TensorProto_Segment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TensorProto_Segment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorProto_Segment* internal_default_instance() {
    return reinterpret_cast<const TensorProto_Segment*>(
               &_TensorProto_Segment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(TensorProto_Segment* other);
  friend void swap(TensorProto_Segment& a, TensorProto_Segment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorProto_Segment* New() const final {
    return CreateMaybeMessage<TensorProto_Segment>(NULL);
  }

  TensorProto_Segment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TensorProto_Segment>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TensorProto_Segment& from);
  void MergeFrom(const TensorProto_Segment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TensorProto_Segment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 begin = 1;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  ::google::protobuf::int64 begin() const;
  void set_begin(::google::protobuf::int64 value);

  // int64 end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  ::google::protobuf::int64 end() const;
  void set_end(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:onnx.TensorProto.Segment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 begin_;
  ::google::protobuf::int64 end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class TensorProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.TensorProto) */ {
 public:
  TensorProto();
  virtual ~TensorProto();

  TensorProto(const TensorProto& from);

  inline TensorProto& operator=(const TensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorProto(TensorProto&& from) noexcept
    : TensorProto() {
    *this = ::std::move(from);
  }

  inline TensorProto& operator=(TensorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TensorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorProto* internal_default_instance() {
    return reinterpret_cast<const TensorProto*>(
               &_TensorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(TensorProto* other);
  friend void swap(TensorProto& a, TensorProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorProto* New() const final {
    return CreateMaybeMessage<TensorProto>(NULL);
  }

  TensorProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TensorProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TensorProto& from);
  void MergeFrom(const TensorProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TensorProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TensorProto_Segment Segment;

  typedef TensorProto_DataType DataType;
  static const DataType UNDEFINED =
    TensorProto_DataType_UNDEFINED;
  static const DataType FLOAT =
    TensorProto_DataType_FLOAT;
  static const DataType UINT8 =
    TensorProto_DataType_UINT8;
  static const DataType INT8 =
    TensorProto_DataType_INT8;
  static const DataType UINT16 =
    TensorProto_DataType_UINT16;
  static const DataType INT16 =
    TensorProto_DataType_INT16;
  static const DataType INT32 =
    TensorProto_DataType_INT32;
  static const DataType INT64 =
    TensorProto_DataType_INT64;
  static const DataType STRING =
    TensorProto_DataType_STRING;
  static const DataType BOOL =
    TensorProto_DataType_BOOL;
  static const DataType FLOAT16 =
    TensorProto_DataType_FLOAT16;
  static const DataType DOUBLE =
    TensorProto_DataType_DOUBLE;
  static const DataType UINT32 =
    TensorProto_DataType_UINT32;
  static const DataType UINT64 =
    TensorProto_DataType_UINT64;
  static const DataType COMPLEX64 =
    TensorProto_DataType_COMPLEX64;
  static const DataType COMPLEX128 =
    TensorProto_DataType_COMPLEX128;
  static const DataType BFLOAT16 =
    TensorProto_DataType_BFLOAT16;
  static inline bool DataType_IsValid(int value) {
    return TensorProto_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    TensorProto_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    TensorProto_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    TensorProto_DataType_DataType_ARRAYSIZE;

  typedef TensorProto_DataLocation DataLocation;
  static const DataLocation DEFAULT =
    TensorProto_DataLocation_DEFAULT;
  static const DataLocation EXTERNAL =
    TensorProto_DataLocation_EXTERNAL;
  static inline bool DataLocation_IsValid(int value) {
    return TensorProto_DataLocation_IsValid(value);
  }
  static const DataLocation DataLocation_MIN =
    TensorProto_DataLocation_DataLocation_MIN;
  static const DataLocation DataLocation_MAX =
    TensorProto_DataLocation_DataLocation_MAX;
  static const int DataLocation_ARRAYSIZE =
    TensorProto_DataLocation_DataLocation_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated int64 dims = 1;
  int dims_size() const;
  void clear_dims();
  static const int kDimsFieldNumber = 1;
  ::google::protobuf::int64 dims(int index) const;
  void set_dims(int index, ::google::protobuf::int64 value);
  void add_dims(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dims();

  // repeated float float_data = 4 [packed = true];
  int float_data_size() const;
  void clear_float_data();
  static const int kFloatDataFieldNumber = 4;
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // repeated int32 int32_data = 5 [packed = true];
  int int32_data_size() const;
  void clear_int32_data();
  static const int kInt32DataFieldNumber = 5;
  ::google::protobuf::int32 int32_data(int index) const;
  void set_int32_data(int index, ::google::protobuf::int32 value);
  void add_int32_data(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int32_data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int32_data();

  // repeated bytes string_data = 6;
  int string_data_size() const;
  void clear_string_data();
  static const int kStringDataFieldNumber = 6;
  const ::std::string& string_data(int index) const;
  ::std::string* mutable_string_data(int index);
  void set_string_data(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_string_data(int index, ::std::string&& value);
  #endif
  void set_string_data(int index, const char* value);
  void set_string_data(int index, const void* value, size_t size);
  ::std::string* add_string_data();
  void add_string_data(const ::std::string& value);
  #if LANG_CXX11
  void add_string_data(::std::string&& value);
  #endif
  void add_string_data(const char* value);
  void add_string_data(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& string_data() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_data();

  // repeated int64 int64_data = 7 [packed = true];
  int int64_data_size() const;
  void clear_int64_data();
  static const int kInt64DataFieldNumber = 7;
  ::google::protobuf::int64 int64_data(int index) const;
  void set_int64_data(int index, ::google::protobuf::int64 value);
  void add_int64_data(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      int64_data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_int64_data();

  // repeated double double_data = 10 [packed = true];
  int double_data_size() const;
  void clear_double_data();
  static const int kDoubleDataFieldNumber = 10;
  double double_data(int index) const;
  void set_double_data(int index, double value);
  void add_double_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated uint64 uint64_data = 11 [packed = true];
  int uint64_data_size() const;
  void clear_uint64_data();
  static const int kUint64DataFieldNumber = 11;
  ::google::protobuf::uint64 uint64_data(int index) const;
  void set_uint64_data(int index, ::google::protobuf::uint64 value);
  void add_uint64_data(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uint64_data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uint64_data();

  // repeated .onnx.StringStringEntryProto external_data = 13;
  int external_data_size() const;
  void clear_external_data();
  static const int kExternalDataFieldNumber = 13;
  ::onnx::StringStringEntryProto* mutable_external_data(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
      mutable_external_data();
  const ::onnx::StringStringEntryProto& external_data(int index) const;
  ::onnx::StringStringEntryProto* add_external_data();
  const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
      external_data() const;

  // string name = 8;
  void clear_name();
  static const int kNameFieldNumber = 8;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes raw_data = 9;
  void clear_raw_data();
  static const int kRawDataFieldNumber = 9;
  const ::std::string& raw_data() const;
  void set_raw_data(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_data(::std::string&& value);
  #endif
  void set_raw_data(const char* value);
  void set_raw_data(const void* value, size_t size);
  ::std::string* mutable_raw_data();
  ::std::string* release_raw_data();
  void set_allocated_raw_data(::std::string* raw_data);

  // string doc_string = 12;
  void clear_doc_string();
  static const int kDocStringFieldNumber = 12;
  const ::std::string& doc_string() const;
  void set_doc_string(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_string(::std::string&& value);
  #endif
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  ::std::string* mutable_doc_string();
  ::std::string* release_doc_string();
  void set_allocated_doc_string(::std::string* doc_string);

  // .onnx.TensorProto.Segment segment = 3;
  bool has_segment() const;
  void clear_segment();
  static const int kSegmentFieldNumber = 3;
  private:
  const ::onnx::TensorProto_Segment& _internal_segment() const;
  public:
  const ::onnx::TensorProto_Segment& segment() const;
  ::onnx::TensorProto_Segment* release_segment();
  ::onnx::TensorProto_Segment* mutable_segment();
  void set_allocated_segment(::onnx::TensorProto_Segment* segment);

  // int32 data_type = 2;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 2;
  ::google::protobuf::int32 data_type() const;
  void set_data_type(::google::protobuf::int32 value);

  // .onnx.TensorProto.DataLocation data_location = 14;
  void clear_data_location();
  static const int kDataLocationFieldNumber = 14;
  ::onnx::TensorProto_DataLocation data_location() const;
  void set_data_location(::onnx::TensorProto_DataLocation value);

  // @@protoc_insertion_point(class_scope:onnx.TensorProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dims_;
  mutable int _dims_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > float_data_;
  mutable int _float_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int32_data_;
  mutable int _int32_data_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> string_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > int64_data_;
  mutable int _int64_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_data_;
  mutable int _double_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uint64_data_;
  mutable int _uint64_data_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto > external_data_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr raw_data_;
  ::google::protobuf::internal::ArenaStringPtr doc_string_;
  ::onnx::TensorProto_Segment* segment_;
  ::google::protobuf::int32 data_type_;
  int data_location_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class SparseTensorProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.SparseTensorProto) */ {
 public:
  SparseTensorProto();
  virtual ~SparseTensorProto();

  SparseTensorProto(const SparseTensorProto& from);

  inline SparseTensorProto& operator=(const SparseTensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SparseTensorProto(SparseTensorProto&& from) noexcept
    : SparseTensorProto() {
    *this = ::std::move(from);
  }

  inline SparseTensorProto& operator=(SparseTensorProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SparseTensorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SparseTensorProto* internal_default_instance() {
    return reinterpret_cast<const SparseTensorProto*>(
               &_SparseTensorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SparseTensorProto* other);
  friend void swap(SparseTensorProto& a, SparseTensorProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SparseTensorProto* New() const final {
    return CreateMaybeMessage<SparseTensorProto>(NULL);
  }

  SparseTensorProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SparseTensorProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SparseTensorProto& from);
  void MergeFrom(const SparseTensorProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SparseTensorProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dims = 3;
  int dims_size() const;
  void clear_dims();
  static const int kDimsFieldNumber = 3;
  ::google::protobuf::int64 dims(int index) const;
  void set_dims(int index, ::google::protobuf::int64 value);
  void add_dims(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dims() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dims();

  // .onnx.TensorProto values = 1;
  bool has_values() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  private:
  const ::onnx::TensorProto& _internal_values() const;
  public:
  const ::onnx::TensorProto& values() const;
  ::onnx::TensorProto* release_values();
  ::onnx::TensorProto* mutable_values();
  void set_allocated_values(::onnx::TensorProto* values);

  // .onnx.TensorProto indices = 2;
  bool has_indices() const;
  void clear_indices();
  static const int kIndicesFieldNumber = 2;
  private:
  const ::onnx::TensorProto& _internal_indices() const;
  public:
  const ::onnx::TensorProto& indices() const;
  ::onnx::TensorProto* release_indices();
  ::onnx::TensorProto* mutable_indices();
  void set_allocated_indices(::onnx::TensorProto* indices);

  // @@protoc_insertion_point(class_scope:onnx.SparseTensorProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dims_;
  mutable int _dims_cached_byte_size_;
  ::onnx::TensorProto* values_;
  ::onnx::TensorProto* indices_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class TensorShapeProto_Dimension : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.TensorShapeProto.Dimension) */ {
 public:
  TensorShapeProto_Dimension();
  virtual ~TensorShapeProto_Dimension();

  TensorShapeProto_Dimension(const TensorShapeProto_Dimension& from);

  inline TensorShapeProto_Dimension& operator=(const TensorShapeProto_Dimension& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorShapeProto_Dimension(TensorShapeProto_Dimension&& from) noexcept
    : TensorShapeProto_Dimension() {
    *this = ::std::move(from);
  }

  inline TensorShapeProto_Dimension& operator=(TensorShapeProto_Dimension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TensorShapeProto_Dimension& default_instance();

  enum ValueCase {
    kDimValue = 1,
    kDimParam = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorShapeProto_Dimension* internal_default_instance() {
    return reinterpret_cast<const TensorShapeProto_Dimension*>(
               &_TensorShapeProto_Dimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(TensorShapeProto_Dimension* other);
  friend void swap(TensorShapeProto_Dimension& a, TensorShapeProto_Dimension& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorShapeProto_Dimension* New() const final {
    return CreateMaybeMessage<TensorShapeProto_Dimension>(NULL);
  }

  TensorShapeProto_Dimension* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TensorShapeProto_Dimension>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TensorShapeProto_Dimension& from);
  void MergeFrom(const TensorShapeProto_Dimension& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TensorShapeProto_Dimension* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string denotation = 3;
  void clear_denotation();
  static const int kDenotationFieldNumber = 3;
  const ::std::string& denotation() const;
  void set_denotation(const ::std::string& value);
  #if LANG_CXX11
  void set_denotation(::std::string&& value);
  #endif
  void set_denotation(const char* value);
  void set_denotation(const char* value, size_t size);
  ::std::string* mutable_denotation();
  ::std::string* release_denotation();
  void set_allocated_denotation(::std::string* denotation);

  // int64 dim_value = 1;
  private:
  bool has_dim_value() const;
  public:
  void clear_dim_value();
  static const int kDimValueFieldNumber = 1;
  ::google::protobuf::int64 dim_value() const;
  void set_dim_value(::google::protobuf::int64 value);

  // string dim_param = 2;
  private:
  bool has_dim_param() const;
  public:
  void clear_dim_param();
  static const int kDimParamFieldNumber = 2;
  const ::std::string& dim_param() const;
  void set_dim_param(const ::std::string& value);
  #if LANG_CXX11
  void set_dim_param(::std::string&& value);
  #endif
  void set_dim_param(const char* value);
  void set_dim_param(const char* value, size_t size);
  ::std::string* mutable_dim_param();
  ::std::string* release_dim_param();
  void set_allocated_dim_param(::std::string* dim_param);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:onnx.TensorShapeProto.Dimension)
 private:
  void set_has_dim_value();
  void set_has_dim_param();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr denotation_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::int64 dim_value_;
    ::google::protobuf::internal::ArenaStringPtr dim_param_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class TensorShapeProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.TensorShapeProto) */ {
 public:
  TensorShapeProto();
  virtual ~TensorShapeProto();

  TensorShapeProto(const TensorShapeProto& from);

  inline TensorShapeProto& operator=(const TensorShapeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorShapeProto(TensorShapeProto&& from) noexcept
    : TensorShapeProto() {
    *this = ::std::move(from);
  }

  inline TensorShapeProto& operator=(TensorShapeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TensorShapeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorShapeProto* internal_default_instance() {
    return reinterpret_cast<const TensorShapeProto*>(
               &_TensorShapeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(TensorShapeProto* other);
  friend void swap(TensorShapeProto& a, TensorShapeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorShapeProto* New() const final {
    return CreateMaybeMessage<TensorShapeProto>(NULL);
  }

  TensorShapeProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TensorShapeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TensorShapeProto& from);
  void MergeFrom(const TensorShapeProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TensorShapeProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TensorShapeProto_Dimension Dimension;

  // accessors -------------------------------------------------------

  // repeated .onnx.TensorShapeProto.Dimension dim = 1;
  int dim_size() const;
  void clear_dim();
  static const int kDimFieldNumber = 1;
  ::onnx::TensorShapeProto_Dimension* mutable_dim(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorShapeProto_Dimension >*
      mutable_dim();
  const ::onnx::TensorShapeProto_Dimension& dim(int index) const;
  ::onnx::TensorShapeProto_Dimension* add_dim();
  const ::google::protobuf::RepeatedPtrField< ::onnx::TensorShapeProto_Dimension >&
      dim() const;

  // @@protoc_insertion_point(class_scope:onnx.TensorShapeProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::onnx::TensorShapeProto_Dimension > dim_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class TypeProto_Tensor : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.TypeProto.Tensor) */ {
 public:
  TypeProto_Tensor();
  virtual ~TypeProto_Tensor();

  TypeProto_Tensor(const TypeProto_Tensor& from);

  inline TypeProto_Tensor& operator=(const TypeProto_Tensor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TypeProto_Tensor(TypeProto_Tensor&& from) noexcept
    : TypeProto_Tensor() {
    *this = ::std::move(from);
  }

  inline TypeProto_Tensor& operator=(TypeProto_Tensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TypeProto_Tensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeProto_Tensor* internal_default_instance() {
    return reinterpret_cast<const TypeProto_Tensor*>(
               &_TypeProto_Tensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(TypeProto_Tensor* other);
  friend void swap(TypeProto_Tensor& a, TypeProto_Tensor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TypeProto_Tensor* New() const final {
    return CreateMaybeMessage<TypeProto_Tensor>(NULL);
  }

  TypeProto_Tensor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TypeProto_Tensor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TypeProto_Tensor& from);
  void MergeFrom(const TypeProto_Tensor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TypeProto_Tensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .onnx.TensorShapeProto shape = 2;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  private:
  const ::onnx::TensorShapeProto& _internal_shape() const;
  public:
  const ::onnx::TensorShapeProto& shape() const;
  ::onnx::TensorShapeProto* release_shape();
  ::onnx::TensorShapeProto* mutable_shape();
  void set_allocated_shape(::onnx::TensorShapeProto* shape);

  // int32 elem_type = 1;
  void clear_elem_type();
  static const int kElemTypeFieldNumber = 1;
  ::google::protobuf::int32 elem_type() const;
  void set_elem_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:onnx.TypeProto.Tensor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::onnx::TensorShapeProto* shape_;
  ::google::protobuf::int32 elem_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class TypeProto_Sequence : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.TypeProto.Sequence) */ {
 public:
  TypeProto_Sequence();
  virtual ~TypeProto_Sequence();

  TypeProto_Sequence(const TypeProto_Sequence& from);

  inline TypeProto_Sequence& operator=(const TypeProto_Sequence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TypeProto_Sequence(TypeProto_Sequence&& from) noexcept
    : TypeProto_Sequence() {
    *this = ::std::move(from);
  }

  inline TypeProto_Sequence& operator=(TypeProto_Sequence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TypeProto_Sequence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeProto_Sequence* internal_default_instance() {
    return reinterpret_cast<const TypeProto_Sequence*>(
               &_TypeProto_Sequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(TypeProto_Sequence* other);
  friend void swap(TypeProto_Sequence& a, TypeProto_Sequence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TypeProto_Sequence* New() const final {
    return CreateMaybeMessage<TypeProto_Sequence>(NULL);
  }

  TypeProto_Sequence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TypeProto_Sequence>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TypeProto_Sequence& from);
  void MergeFrom(const TypeProto_Sequence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TypeProto_Sequence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .onnx.TypeProto elem_type = 1;
  bool has_elem_type() const;
  void clear_elem_type();
  static const int kElemTypeFieldNumber = 1;
  private:
  const ::onnx::TypeProto& _internal_elem_type() const;
  public:
  const ::onnx::TypeProto& elem_type() const;
  ::onnx::TypeProto* release_elem_type();
  ::onnx::TypeProto* mutable_elem_type();
  void set_allocated_elem_type(::onnx::TypeProto* elem_type);

  // @@protoc_insertion_point(class_scope:onnx.TypeProto.Sequence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::onnx::TypeProto* elem_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class TypeProto_Map : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.TypeProto.Map) */ {
 public:
  TypeProto_Map();
  virtual ~TypeProto_Map();

  TypeProto_Map(const TypeProto_Map& from);

  inline TypeProto_Map& operator=(const TypeProto_Map& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TypeProto_Map(TypeProto_Map&& from) noexcept
    : TypeProto_Map() {
    *this = ::std::move(from);
  }

  inline TypeProto_Map& operator=(TypeProto_Map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TypeProto_Map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeProto_Map* internal_default_instance() {
    return reinterpret_cast<const TypeProto_Map*>(
               &_TypeProto_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(TypeProto_Map* other);
  friend void swap(TypeProto_Map& a, TypeProto_Map& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TypeProto_Map* New() const final {
    return CreateMaybeMessage<TypeProto_Map>(NULL);
  }

  TypeProto_Map* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TypeProto_Map>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TypeProto_Map& from);
  void MergeFrom(const TypeProto_Map& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TypeProto_Map* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .onnx.TypeProto value_type = 2;
  bool has_value_type() const;
  void clear_value_type();
  static const int kValueTypeFieldNumber = 2;
  private:
  const ::onnx::TypeProto& _internal_value_type() const;
  public:
  const ::onnx::TypeProto& value_type() const;
  ::onnx::TypeProto* release_value_type();
  ::onnx::TypeProto* mutable_value_type();
  void set_allocated_value_type(::onnx::TypeProto* value_type);

  // int32 key_type = 1;
  void clear_key_type();
  static const int kKeyTypeFieldNumber = 1;
  ::google::protobuf::int32 key_type() const;
  void set_key_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:onnx.TypeProto.Map)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::onnx::TypeProto* value_type_;
  ::google::protobuf::int32 key_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class TypeProto_Optional : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.TypeProto.Optional) */ {
 public:
  TypeProto_Optional();
  virtual ~TypeProto_Optional();

  TypeProto_Optional(const TypeProto_Optional& from);

  inline TypeProto_Optional& operator=(const TypeProto_Optional& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TypeProto_Optional(TypeProto_Optional&& from) noexcept
    : TypeProto_Optional() {
    *this = ::std::move(from);
  }

  inline TypeProto_Optional& operator=(TypeProto_Optional&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TypeProto_Optional& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeProto_Optional* internal_default_instance() {
    return reinterpret_cast<const TypeProto_Optional*>(
               &_TypeProto_Optional_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(TypeProto_Optional* other);
  friend void swap(TypeProto_Optional& a, TypeProto_Optional& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TypeProto_Optional* New() const final {
    return CreateMaybeMessage<TypeProto_Optional>(NULL);
  }

  TypeProto_Optional* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TypeProto_Optional>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TypeProto_Optional& from);
  void MergeFrom(const TypeProto_Optional& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TypeProto_Optional* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .onnx.TypeProto elem_type = 1;
  bool has_elem_type() const;
  void clear_elem_type();
  static const int kElemTypeFieldNumber = 1;
  private:
  const ::onnx::TypeProto& _internal_elem_type() const;
  public:
  const ::onnx::TypeProto& elem_type() const;
  ::onnx::TypeProto* release_elem_type();
  ::onnx::TypeProto* mutable_elem_type();
  void set_allocated_elem_type(::onnx::TypeProto* elem_type);

  // @@protoc_insertion_point(class_scope:onnx.TypeProto.Optional)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::onnx::TypeProto* elem_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class TypeProto_SparseTensor : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.TypeProto.SparseTensor) */ {
 public:
  TypeProto_SparseTensor();
  virtual ~TypeProto_SparseTensor();

  TypeProto_SparseTensor(const TypeProto_SparseTensor& from);

  inline TypeProto_SparseTensor& operator=(const TypeProto_SparseTensor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TypeProto_SparseTensor(TypeProto_SparseTensor&& from) noexcept
    : TypeProto_SparseTensor() {
    *this = ::std::move(from);
  }

  inline TypeProto_SparseTensor& operator=(TypeProto_SparseTensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TypeProto_SparseTensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeProto_SparseTensor* internal_default_instance() {
    return reinterpret_cast<const TypeProto_SparseTensor*>(
               &_TypeProto_SparseTensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(TypeProto_SparseTensor* other);
  friend void swap(TypeProto_SparseTensor& a, TypeProto_SparseTensor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TypeProto_SparseTensor* New() const final {
    return CreateMaybeMessage<TypeProto_SparseTensor>(NULL);
  }

  TypeProto_SparseTensor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TypeProto_SparseTensor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TypeProto_SparseTensor& from);
  void MergeFrom(const TypeProto_SparseTensor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TypeProto_SparseTensor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .onnx.TensorShapeProto shape = 2;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  private:
  const ::onnx::TensorShapeProto& _internal_shape() const;
  public:
  const ::onnx::TensorShapeProto& shape() const;
  ::onnx::TensorShapeProto* release_shape();
  ::onnx::TensorShapeProto* mutable_shape();
  void set_allocated_shape(::onnx::TensorShapeProto* shape);

  // int32 elem_type = 1;
  void clear_elem_type();
  static const int kElemTypeFieldNumber = 1;
  ::google::protobuf::int32 elem_type() const;
  void set_elem_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:onnx.TypeProto.SparseTensor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::onnx::TensorShapeProto* shape_;
  ::google::protobuf::int32 elem_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class TypeProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.TypeProto) */ {
 public:
  TypeProto();
  virtual ~TypeProto();

  TypeProto(const TypeProto& from);

  inline TypeProto& operator=(const TypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TypeProto(TypeProto&& from) noexcept
    : TypeProto() {
    *this = ::std::move(from);
  }

  inline TypeProto& operator=(TypeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const TypeProto& default_instance();

  enum ValueCase {
    kTensorType = 1,
    kSequenceType = 4,
    kMapType = 5,
    kOptionalType = 9,
    kSparseTensorType = 8,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeProto* internal_default_instance() {
    return reinterpret_cast<const TypeProto*>(
               &_TypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(TypeProto* other);
  friend void swap(TypeProto& a, TypeProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TypeProto* New() const final {
    return CreateMaybeMessage<TypeProto>(NULL);
  }

  TypeProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TypeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const TypeProto& from);
  void MergeFrom(const TypeProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TypeProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TypeProto_Tensor Tensor;
  typedef TypeProto_Sequence Sequence;
  typedef TypeProto_Map Map;
  typedef TypeProto_Optional Optional;
  typedef TypeProto_SparseTensor SparseTensor;

  // accessors -------------------------------------------------------

  // string denotation = 6;
  void clear_denotation();
  static const int kDenotationFieldNumber = 6;
  const ::std::string& denotation() const;
  void set_denotation(const ::std::string& value);
  #if LANG_CXX11
  void set_denotation(::std::string&& value);
  #endif
  void set_denotation(const char* value);
  void set_denotation(const char* value, size_t size);
  ::std::string* mutable_denotation();
  ::std::string* release_denotation();
  void set_allocated_denotation(::std::string* denotation);

  // .onnx.TypeProto.Tensor tensor_type = 1;
  bool has_tensor_type() const;
  void clear_tensor_type();
  static const int kTensorTypeFieldNumber = 1;
  private:
  const ::onnx::TypeProto_Tensor& _internal_tensor_type() const;
  public:
  const ::onnx::TypeProto_Tensor& tensor_type() const;
  ::onnx::TypeProto_Tensor* release_tensor_type();
  ::onnx::TypeProto_Tensor* mutable_tensor_type();
  void set_allocated_tensor_type(::onnx::TypeProto_Tensor* tensor_type);

  // .onnx.TypeProto.Sequence sequence_type = 4;
  bool has_sequence_type() const;
  void clear_sequence_type();
  static const int kSequenceTypeFieldNumber = 4;
  private:
  const ::onnx::TypeProto_Sequence& _internal_sequence_type() const;
  public:
  const ::onnx::TypeProto_Sequence& sequence_type() const;
  ::onnx::TypeProto_Sequence* release_sequence_type();
  ::onnx::TypeProto_Sequence* mutable_sequence_type();
  void set_allocated_sequence_type(::onnx::TypeProto_Sequence* sequence_type);

  // .onnx.TypeProto.Map map_type = 5;
  bool has_map_type() const;
  void clear_map_type();
  static const int kMapTypeFieldNumber = 5;
  private:
  const ::onnx::TypeProto_Map& _internal_map_type() const;
  public:
  const ::onnx::TypeProto_Map& map_type() const;
  ::onnx::TypeProto_Map* release_map_type();
  ::onnx::TypeProto_Map* mutable_map_type();
  void set_allocated_map_type(::onnx::TypeProto_Map* map_type);

  // .onnx.TypeProto.Optional optional_type = 9;
  bool has_optional_type() const;
  void clear_optional_type();
  static const int kOptionalTypeFieldNumber = 9;
  private:
  const ::onnx::TypeProto_Optional& _internal_optional_type() const;
  public:
  const ::onnx::TypeProto_Optional& optional_type() const;
  ::onnx::TypeProto_Optional* release_optional_type();
  ::onnx::TypeProto_Optional* mutable_optional_type();
  void set_allocated_optional_type(::onnx::TypeProto_Optional* optional_type);

  // .onnx.TypeProto.SparseTensor sparse_tensor_type = 8;
  bool has_sparse_tensor_type() const;
  void clear_sparse_tensor_type();
  static const int kSparseTensorTypeFieldNumber = 8;
  private:
  const ::onnx::TypeProto_SparseTensor& _internal_sparse_tensor_type() const;
  public:
  const ::onnx::TypeProto_SparseTensor& sparse_tensor_type() const;
  ::onnx::TypeProto_SparseTensor* release_sparse_tensor_type();
  ::onnx::TypeProto_SparseTensor* mutable_sparse_tensor_type();
  void set_allocated_sparse_tensor_type(::onnx::TypeProto_SparseTensor* sparse_tensor_type);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:onnx.TypeProto)
 private:
  void set_has_tensor_type();
  void set_has_sequence_type();
  void set_has_map_type();
  void set_has_optional_type();
  void set_has_sparse_tensor_type();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr denotation_;
  union ValueUnion {
    ValueUnion() {}
    ::onnx::TypeProto_Tensor* tensor_type_;
    ::onnx::TypeProto_Sequence* sequence_type_;
    ::onnx::TypeProto_Map* map_type_;
    ::onnx::TypeProto_Optional* optional_type_;
    ::onnx::TypeProto_SparseTensor* sparse_tensor_type_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class OperatorSetIdProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.OperatorSetIdProto) */ {
 public:
  OperatorSetIdProto();
  virtual ~OperatorSetIdProto();

  OperatorSetIdProto(const OperatorSetIdProto& from);

  inline OperatorSetIdProto& operator=(const OperatorSetIdProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperatorSetIdProto(OperatorSetIdProto&& from) noexcept
    : OperatorSetIdProto() {
    *this = ::std::move(from);
  }

  inline OperatorSetIdProto& operator=(OperatorSetIdProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const OperatorSetIdProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperatorSetIdProto* internal_default_instance() {
    return reinterpret_cast<const OperatorSetIdProto*>(
               &_OperatorSetIdProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(OperatorSetIdProto* other);
  friend void swap(OperatorSetIdProto& a, OperatorSetIdProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperatorSetIdProto* New() const final {
    return CreateMaybeMessage<OperatorSetIdProto>(NULL);
  }

  OperatorSetIdProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OperatorSetIdProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const OperatorSetIdProto& from);
  void MergeFrom(const OperatorSetIdProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OperatorSetIdProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string domain = 1;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // int64 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int64 version() const;
  void set_version(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:onnx.OperatorSetIdProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::int64 version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// -------------------------------------------------------------------

class FunctionProto : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:onnx.FunctionProto) */ {
 public:
  FunctionProto();
  virtual ~FunctionProto();

  FunctionProto(const FunctionProto& from);

  inline FunctionProto& operator=(const FunctionProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FunctionProto(FunctionProto&& from) noexcept
    : FunctionProto() {
    *this = ::std::move(from);
  }

  inline FunctionProto& operator=(FunctionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const FunctionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionProto* internal_default_instance() {
    return reinterpret_cast<const FunctionProto*>(
               &_FunctionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(FunctionProto* other);
  friend void swap(FunctionProto& a, FunctionProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FunctionProto* New() const final {
    return CreateMaybeMessage<FunctionProto>(NULL);
  }

  FunctionProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FunctionProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const FunctionProto& from);
  void MergeFrom(const FunctionProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FunctionProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string input = 4;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 4;
  const ::std::string& input(int index) const;
  ::std::string* mutable_input(int index);
  void set_input(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_input(int index, ::std::string&& value);
  #endif
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  ::std::string* add_input();
  void add_input(const ::std::string& value);
  #if LANG_CXX11
  void add_input(::std::string&& value);
  #endif
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated string output = 5;
  int output_size() const;
  void clear_output();
  static const int kOutputFieldNumber = 5;
  const ::std::string& output(int index) const;
  ::std::string* mutable_output(int index);
  void set_output(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_output(int index, ::std::string&& value);
  #endif
  void set_output(int index, const char* value);
  void set_output(int index, const char* value, size_t size);
  ::std::string* add_output();
  void add_output(const ::std::string& value);
  #if LANG_CXX11
  void add_output(::std::string&& value);
  #endif
  void add_output(const char* value);
  void add_output(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& output() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_output();

  // repeated string attribute = 6;
  int attribute_size() const;
  void clear_attribute();
  static const int kAttributeFieldNumber = 6;
  const ::std::string& attribute(int index) const;
  ::std::string* mutable_attribute(int index);
  void set_attribute(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_attribute(int index, ::std::string&& value);
  #endif
  void set_attribute(int index, const char* value);
  void set_attribute(int index, const char* value, size_t size);
  ::std::string* add_attribute();
  void add_attribute(const ::std::string& value);
  #if LANG_CXX11
  void add_attribute(::std::string&& value);
  #endif
  void add_attribute(const char* value);
  void add_attribute(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& attribute() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attribute();

  // repeated .onnx.NodeProto node = 7;
  int node_size() const;
  void clear_node();
  static const int kNodeFieldNumber = 7;
  ::onnx::NodeProto* mutable_node(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >*
      mutable_node();
  const ::onnx::NodeProto& node(int index) const;
  ::onnx::NodeProto* add_node();
  const ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >&
      node() const;

  // repeated .onnx.OperatorSetIdProto opset_import = 9;
  int opset_import_size() const;
  void clear_opset_import();
  static const int kOpsetImportFieldNumber = 9;
  ::onnx::OperatorSetIdProto* mutable_opset_import(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto >*
      mutable_opset_import();
  const ::onnx::OperatorSetIdProto& opset_import(int index) const;
  ::onnx::OperatorSetIdProto* add_opset_import();
  const ::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto >&
      opset_import() const;

  // repeated .onnx.AttributeProto attribute_proto = 11;
  int attribute_proto_size() const;
  void clear_attribute_proto();
  static const int kAttributeProtoFieldNumber = 11;
  ::onnx::AttributeProto* mutable_attribute_proto(int index);
  ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >*
      mutable_attribute_proto();
  const ::onnx::AttributeProto& attribute_proto(int index) const;
  ::onnx::AttributeProto* add_attribute_proto();
  const ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >&
      attribute_proto() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string doc_string = 8;
  void clear_doc_string();
  static const int kDocStringFieldNumber = 8;
  const ::std::string& doc_string() const;
  void set_doc_string(const ::std::string& value);
  #if LANG_CXX11
  void set_doc_string(::std::string&& value);
  #endif
  void set_doc_string(const char* value);
  void set_doc_string(const char* value, size_t size);
  ::std::string* mutable_doc_string();
  ::std::string* release_doc_string();
  void set_allocated_doc_string(::std::string* doc_string);

  // string domain = 10;
  void clear_domain();
  static const int kDomainFieldNumber = 10;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // @@protoc_insertion_point(class_scope:onnx.FunctionProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedPtrField< ::std::string> output_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attribute_;
  ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto > node_;
  ::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto > opset_import_;
  ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto > attribute_proto_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr doc_string_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_onnx_2eproto3::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AttributeProto

// string name = 1;
inline void AttributeProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttributeProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.name)
  return name_.GetNoArena();
}
inline void AttributeProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.name)
}
#if LANG_CXX11
inline void AttributeProto::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.AttributeProto.name)
}
#endif
inline void AttributeProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.name)
}
inline void AttributeProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.name)
}
inline ::std::string* AttributeProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttributeProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttributeProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.name)
}

// string ref_attr_name = 21;
inline void AttributeProto::clear_ref_attr_name() {
  ref_attr_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttributeProto::ref_attr_name() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.ref_attr_name)
  return ref_attr_name_.GetNoArena();
}
inline void AttributeProto::set_ref_attr_name(const ::std::string& value) {
  
  ref_attr_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.ref_attr_name)
}
#if LANG_CXX11
inline void AttributeProto::set_ref_attr_name(::std::string&& value) {
  
  ref_attr_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.AttributeProto.ref_attr_name)
}
#endif
inline void AttributeProto::set_ref_attr_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ref_attr_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.ref_attr_name)
}
inline void AttributeProto::set_ref_attr_name(const char* value, size_t size) {
  
  ref_attr_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.ref_attr_name)
}
inline ::std::string* AttributeProto::mutable_ref_attr_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.ref_attr_name)
  return ref_attr_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttributeProto::release_ref_attr_name() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.ref_attr_name)
  
  return ref_attr_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttributeProto::set_allocated_ref_attr_name(::std::string* ref_attr_name) {
  if (ref_attr_name != NULL) {
    
  } else {
    
  }
  ref_attr_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ref_attr_name);
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.ref_attr_name)
}

// string doc_string = 13;
inline void AttributeProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttributeProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.doc_string)
  return doc_string_.GetNoArena();
}
inline void AttributeProto::set_doc_string(const ::std::string& value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.doc_string)
}
#if LANG_CXX11
inline void AttributeProto::set_doc_string(::std::string&& value) {
  
  doc_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.AttributeProto.doc_string)
}
#endif
inline void AttributeProto::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.doc_string)
}
inline void AttributeProto::set_doc_string(const char* value, size_t size) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.doc_string)
}
inline ::std::string* AttributeProto::mutable_doc_string() {
  
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.doc_string)
  return doc_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttributeProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.doc_string)
  
  return doc_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttributeProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string != NULL) {
    
  } else {
    
  }
  doc_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.doc_string)
}

// .onnx.AttributeProto.AttributeType type = 20;
inline void AttributeProto::clear_type() {
  type_ = 0;
}
inline ::onnx::AttributeProto_AttributeType AttributeProto::type() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.type)
  return static_cast< ::onnx::AttributeProto_AttributeType >(type_);
}
inline void AttributeProto::set_type(::onnx::AttributeProto_AttributeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.type)
}

// float f = 2;
inline void AttributeProto::clear_f() {
  f_ = 0;
}
inline float AttributeProto::f() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.f)
  return f_;
}
inline void AttributeProto::set_f(float value) {
  
  f_ = value;
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.f)
}

// int64 i = 3;
inline void AttributeProto::clear_i() {
  i_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AttributeProto::i() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.i)
  return i_;
}
inline void AttributeProto::set_i(::google::protobuf::int64 value) {
  
  i_ = value;
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.i)
}

// bytes s = 4;
inline void AttributeProto::clear_s() {
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttributeProto::s() const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.s)
  return s_.GetNoArena();
}
inline void AttributeProto::set_s(const ::std::string& value) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.s)
}
#if LANG_CXX11
inline void AttributeProto::set_s(::std::string&& value) {
  
  s_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.AttributeProto.s)
}
#endif
inline void AttributeProto::set_s(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.s)
}
inline void AttributeProto::set_s(const void* value, size_t size) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.s)
}
inline ::std::string* AttributeProto::mutable_s() {
  
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.s)
  return s_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttributeProto::release_s() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.s)
  
  return s_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttributeProto::set_allocated_s(::std::string* s) {
  if (s != NULL) {
    
  } else {
    
  }
  s_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s);
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.s)
}

// .onnx.TensorProto t = 5;
inline bool AttributeProto::has_t() const {
  return this != internal_default_instance() && t_ != NULL;
}
inline void AttributeProto::clear_t() {
  if (GetArenaNoVirtual() == NULL && t_ != NULL) {
    delete t_;
  }
  t_ = NULL;
}
inline const ::onnx::TensorProto& AttributeProto::_internal_t() const {
  return *t_;
}
inline const ::onnx::TensorProto& AttributeProto::t() const {
  const ::onnx::TensorProto* p = t_;
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.t)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TensorProto*>(
      &::onnx::_TensorProto_default_instance_);
}
inline ::onnx::TensorProto* AttributeProto::release_t() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.t)
  
  ::onnx::TensorProto* temp = t_;
  t_ = NULL;
  return temp;
}
inline ::onnx::TensorProto* AttributeProto::mutable_t() {
  
  if (t_ == NULL) {
    auto* p = CreateMaybeMessage<::onnx::TensorProto>(GetArenaNoVirtual());
    t_ = p;
  }
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.t)
  return t_;
}
inline void AttributeProto::set_allocated_t(::onnx::TensorProto* t) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete t_;
  }
  if (t) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      t = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, t, submessage_arena);
    }
    
  } else {
    
  }
  t_ = t;
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.t)
}

// .onnx.GraphProto g = 6;
inline bool AttributeProto::has_g() const {
  return this != internal_default_instance() && g_ != NULL;
}
inline void AttributeProto::clear_g() {
  if (GetArenaNoVirtual() == NULL && g_ != NULL) {
    delete g_;
  }
  g_ = NULL;
}
inline const ::onnx::GraphProto& AttributeProto::_internal_g() const {
  return *g_;
}
inline const ::onnx::GraphProto& AttributeProto::g() const {
  const ::onnx::GraphProto* p = g_;
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.g)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::GraphProto*>(
      &::onnx::_GraphProto_default_instance_);
}
inline ::onnx::GraphProto* AttributeProto::release_g() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.g)
  
  ::onnx::GraphProto* temp = g_;
  g_ = NULL;
  return temp;
}
inline ::onnx::GraphProto* AttributeProto::mutable_g() {
  
  if (g_ == NULL) {
    auto* p = CreateMaybeMessage<::onnx::GraphProto>(GetArenaNoVirtual());
    g_ = p;
  }
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.g)
  return g_;
}
inline void AttributeProto::set_allocated_g(::onnx::GraphProto* g) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete g_;
  }
  if (g) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      g = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, g, submessage_arena);
    }
    
  } else {
    
  }
  g_ = g;
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.g)
}

// .onnx.SparseTensorProto sparse_tensor = 22;
inline bool AttributeProto::has_sparse_tensor() const {
  return this != internal_default_instance() && sparse_tensor_ != NULL;
}
inline void AttributeProto::clear_sparse_tensor() {
  if (GetArenaNoVirtual() == NULL && sparse_tensor_ != NULL) {
    delete sparse_tensor_;
  }
  sparse_tensor_ = NULL;
}
inline const ::onnx::SparseTensorProto& AttributeProto::_internal_sparse_tensor() const {
  return *sparse_tensor_;
}
inline const ::onnx::SparseTensorProto& AttributeProto::sparse_tensor() const {
  const ::onnx::SparseTensorProto* p = sparse_tensor_;
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.sparse_tensor)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::SparseTensorProto*>(
      &::onnx::_SparseTensorProto_default_instance_);
}
inline ::onnx::SparseTensorProto* AttributeProto::release_sparse_tensor() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.sparse_tensor)
  
  ::onnx::SparseTensorProto* temp = sparse_tensor_;
  sparse_tensor_ = NULL;
  return temp;
}
inline ::onnx::SparseTensorProto* AttributeProto::mutable_sparse_tensor() {
  
  if (sparse_tensor_ == NULL) {
    auto* p = CreateMaybeMessage<::onnx::SparseTensorProto>(GetArenaNoVirtual());
    sparse_tensor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.sparse_tensor)
  return sparse_tensor_;
}
inline void AttributeProto::set_allocated_sparse_tensor(::onnx::SparseTensorProto* sparse_tensor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sparse_tensor_;
  }
  if (sparse_tensor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sparse_tensor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sparse_tensor, submessage_arena);
    }
    
  } else {
    
  }
  sparse_tensor_ = sparse_tensor;
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.sparse_tensor)
}

// .onnx.TypeProto tp = 14;
inline bool AttributeProto::has_tp() const {
  return this != internal_default_instance() && tp_ != NULL;
}
inline void AttributeProto::clear_tp() {
  if (GetArenaNoVirtual() == NULL && tp_ != NULL) {
    delete tp_;
  }
  tp_ = NULL;
}
inline const ::onnx::TypeProto& AttributeProto::_internal_tp() const {
  return *tp_;
}
inline const ::onnx::TypeProto& AttributeProto::tp() const {
  const ::onnx::TypeProto* p = tp_;
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.tp)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TypeProto*>(
      &::onnx::_TypeProto_default_instance_);
}
inline ::onnx::TypeProto* AttributeProto::release_tp() {
  // @@protoc_insertion_point(field_release:onnx.AttributeProto.tp)
  
  ::onnx::TypeProto* temp = tp_;
  tp_ = NULL;
  return temp;
}
inline ::onnx::TypeProto* AttributeProto::mutable_tp() {
  
  if (tp_ == NULL) {
    auto* p = CreateMaybeMessage<::onnx::TypeProto>(GetArenaNoVirtual());
    tp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.tp)
  return tp_;
}
inline void AttributeProto::set_allocated_tp(::onnx::TypeProto* tp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tp_;
  }
  if (tp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tp, submessage_arena);
    }
    
  } else {
    
  }
  tp_ = tp;
  // @@protoc_insertion_point(field_set_allocated:onnx.AttributeProto.tp)
}

// repeated float floats = 7;
inline int AttributeProto::floats_size() const {
  return floats_.size();
}
inline void AttributeProto::clear_floats() {
  floats_.Clear();
}
inline float AttributeProto::floats(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.floats)
  return floats_.Get(index);
}
inline void AttributeProto::set_floats(int index, float value) {
  floats_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.floats)
}
inline void AttributeProto::add_floats(float value) {
  floats_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.floats)
}
inline const ::google::protobuf::RepeatedField< float >&
AttributeProto::floats() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.floats)
  return floats_;
}
inline ::google::protobuf::RepeatedField< float >*
AttributeProto::mutable_floats() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.floats)
  return &floats_;
}

// repeated int64 ints = 8;
inline int AttributeProto::ints_size() const {
  return ints_.size();
}
inline void AttributeProto::clear_ints() {
  ints_.Clear();
}
inline ::google::protobuf::int64 AttributeProto::ints(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.ints)
  return ints_.Get(index);
}
inline void AttributeProto::set_ints(int index, ::google::protobuf::int64 value) {
  ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.ints)
}
inline void AttributeProto::add_ints(::google::protobuf::int64 value) {
  ints_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.ints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AttributeProto::ints() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.ints)
  return ints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AttributeProto::mutable_ints() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.ints)
  return &ints_;
}

// repeated bytes strings = 9;
inline int AttributeProto::strings_size() const {
  return strings_.size();
}
inline void AttributeProto::clear_strings() {
  strings_.Clear();
}
inline const ::std::string& AttributeProto::strings(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.strings)
  return strings_.Get(index);
}
inline ::std::string* AttributeProto::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.strings)
  return strings_.Mutable(index);
}
inline void AttributeProto::set_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.strings)
  strings_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AttributeProto::set_strings(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:onnx.AttributeProto.strings)
  strings_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AttributeProto::set_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.AttributeProto.strings)
}
inline void AttributeProto::set_strings(int index, const void* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.AttributeProto.strings)
}
inline ::std::string* AttributeProto::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:onnx.AttributeProto.strings)
  return strings_.Add();
}
inline void AttributeProto::add_strings(const ::std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.strings)
}
#if LANG_CXX11
inline void AttributeProto::add_strings(::std::string&& value) {
  strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.strings)
}
#endif
inline void AttributeProto::add_strings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.AttributeProto.strings)
}
inline void AttributeProto::add_strings(const void* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.AttributeProto.strings)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AttributeProto::strings() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.strings)
  return strings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AttributeProto::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.strings)
  return &strings_;
}

// repeated .onnx.TensorProto tensors = 10;
inline int AttributeProto::tensors_size() const {
  return tensors_.size();
}
inline void AttributeProto::clear_tensors() {
  tensors_.Clear();
}
inline ::onnx::TensorProto* AttributeProto::mutable_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.tensors)
  return tensors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
AttributeProto::mutable_tensors() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.tensors)
  return &tensors_;
}
inline const ::onnx::TensorProto& AttributeProto::tensors(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.tensors)
  return tensors_.Get(index);
}
inline ::onnx::TensorProto* AttributeProto::add_tensors() {
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.tensors)
  return tensors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
AttributeProto::tensors() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.tensors)
  return tensors_;
}

// repeated .onnx.GraphProto graphs = 11;
inline int AttributeProto::graphs_size() const {
  return graphs_.size();
}
inline void AttributeProto::clear_graphs() {
  graphs_.Clear();
}
inline ::onnx::GraphProto* AttributeProto::mutable_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.graphs)
  return graphs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::GraphProto >*
AttributeProto::mutable_graphs() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.graphs)
  return &graphs_;
}
inline const ::onnx::GraphProto& AttributeProto::graphs(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.graphs)
  return graphs_.Get(index);
}
inline ::onnx::GraphProto* AttributeProto::add_graphs() {
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.graphs)
  return graphs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::GraphProto >&
AttributeProto::graphs() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.graphs)
  return graphs_;
}

// repeated .onnx.SparseTensorProto sparse_tensors = 23;
inline int AttributeProto::sparse_tensors_size() const {
  return sparse_tensors_.size();
}
inline void AttributeProto::clear_sparse_tensors() {
  sparse_tensors_.Clear();
}
inline ::onnx::SparseTensorProto* AttributeProto::mutable_sparse_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.sparse_tensors)
  return sparse_tensors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >*
AttributeProto::mutable_sparse_tensors() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.sparse_tensors)
  return &sparse_tensors_;
}
inline const ::onnx::SparseTensorProto& AttributeProto::sparse_tensors(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.sparse_tensors)
  return sparse_tensors_.Get(index);
}
inline ::onnx::SparseTensorProto* AttributeProto::add_sparse_tensors() {
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.sparse_tensors)
  return sparse_tensors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >&
AttributeProto::sparse_tensors() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.sparse_tensors)
  return sparse_tensors_;
}

// repeated .onnx.TypeProto type_protos = 15;
inline int AttributeProto::type_protos_size() const {
  return type_protos_.size();
}
inline void AttributeProto::clear_type_protos() {
  type_protos_.Clear();
}
inline ::onnx::TypeProto* AttributeProto::mutable_type_protos(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.AttributeProto.type_protos)
  return type_protos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::TypeProto >*
AttributeProto::mutable_type_protos() {
  // @@protoc_insertion_point(field_mutable_list:onnx.AttributeProto.type_protos)
  return &type_protos_;
}
inline const ::onnx::TypeProto& AttributeProto::type_protos(int index) const {
  // @@protoc_insertion_point(field_get:onnx.AttributeProto.type_protos)
  return type_protos_.Get(index);
}
inline ::onnx::TypeProto* AttributeProto::add_type_protos() {
  // @@protoc_insertion_point(field_add:onnx.AttributeProto.type_protos)
  return type_protos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::TypeProto >&
AttributeProto::type_protos() const {
  // @@protoc_insertion_point(field_list:onnx.AttributeProto.type_protos)
  return type_protos_;
}

// -------------------------------------------------------------------

// ValueInfoProto

// string name = 1;
inline void ValueInfoProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ValueInfoProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.ValueInfoProto.name)
  return name_.GetNoArena();
}
inline void ValueInfoProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.ValueInfoProto.name)
}
#if LANG_CXX11
inline void ValueInfoProto::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.ValueInfoProto.name)
}
#endif
inline void ValueInfoProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.ValueInfoProto.name)
}
inline void ValueInfoProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.ValueInfoProto.name)
}
inline ::std::string* ValueInfoProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.ValueInfoProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValueInfoProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.ValueInfoProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValueInfoProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.ValueInfoProto.name)
}

// .onnx.TypeProto type = 2;
inline bool ValueInfoProto::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
inline void ValueInfoProto::clear_type() {
  if (GetArenaNoVirtual() == NULL && type_ != NULL) {
    delete type_;
  }
  type_ = NULL;
}
inline const ::onnx::TypeProto& ValueInfoProto::_internal_type() const {
  return *type_;
}
inline const ::onnx::TypeProto& ValueInfoProto::type() const {
  const ::onnx::TypeProto* p = type_;
  // @@protoc_insertion_point(field_get:onnx.ValueInfoProto.type)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TypeProto*>(
      &::onnx::_TypeProto_default_instance_);
}
inline ::onnx::TypeProto* ValueInfoProto::release_type() {
  // @@protoc_insertion_point(field_release:onnx.ValueInfoProto.type)
  
  ::onnx::TypeProto* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::onnx::TypeProto* ValueInfoProto::mutable_type() {
  
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::onnx::TypeProto>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:onnx.ValueInfoProto.type)
  return type_;
}
inline void ValueInfoProto::set_allocated_type(::onnx::TypeProto* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete type_;
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:onnx.ValueInfoProto.type)
}

// string doc_string = 3;
inline void ValueInfoProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ValueInfoProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.ValueInfoProto.doc_string)
  return doc_string_.GetNoArena();
}
inline void ValueInfoProto::set_doc_string(const ::std::string& value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.ValueInfoProto.doc_string)
}
#if LANG_CXX11
inline void ValueInfoProto::set_doc_string(::std::string&& value) {
  
  doc_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.ValueInfoProto.doc_string)
}
#endif
inline void ValueInfoProto::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.ValueInfoProto.doc_string)
}
inline void ValueInfoProto::set_doc_string(const char* value, size_t size) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.ValueInfoProto.doc_string)
}
inline ::std::string* ValueInfoProto::mutable_doc_string() {
  
  // @@protoc_insertion_point(field_mutable:onnx.ValueInfoProto.doc_string)
  return doc_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ValueInfoProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:onnx.ValueInfoProto.doc_string)
  
  return doc_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ValueInfoProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string != NULL) {
    
  } else {
    
  }
  doc_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:onnx.ValueInfoProto.doc_string)
}

// -------------------------------------------------------------------

// NodeProto

// repeated string input = 1;
inline int NodeProto::input_size() const {
  return input_.size();
}
inline void NodeProto::clear_input() {
  input_.Clear();
}
inline const ::std::string& NodeProto::input(int index) const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.input)
  return input_.Get(index);
}
inline ::std::string* NodeProto::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.input)
  return input_.Mutable(index);
}
inline void NodeProto::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.NodeProto.input)
  input_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodeProto::set_input(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:onnx.NodeProto.input)
  input_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodeProto::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.input)
}
inline void NodeProto::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.input)
}
inline ::std::string* NodeProto::add_input() {
  // @@protoc_insertion_point(field_add_mutable:onnx.NodeProto.input)
  return input_.Add();
}
inline void NodeProto::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.NodeProto.input)
}
#if LANG_CXX11
inline void NodeProto::add_input(::std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onnx.NodeProto.input)
}
#endif
inline void NodeProto::add_input(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.NodeProto.input)
}
inline void NodeProto::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.NodeProto.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeProto::input() const {
  // @@protoc_insertion_point(field_list:onnx.NodeProto.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeProto::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:onnx.NodeProto.input)
  return &input_;
}

// repeated string output = 2;
inline int NodeProto::output_size() const {
  return output_.size();
}
inline void NodeProto::clear_output() {
  output_.Clear();
}
inline const ::std::string& NodeProto::output(int index) const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.output)
  return output_.Get(index);
}
inline ::std::string* NodeProto::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.output)
  return output_.Mutable(index);
}
inline void NodeProto::set_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.NodeProto.output)
  output_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodeProto::set_output(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:onnx.NodeProto.output)
  output_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodeProto::set_output(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.output)
}
inline void NodeProto::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.output)
}
inline ::std::string* NodeProto::add_output() {
  // @@protoc_insertion_point(field_add_mutable:onnx.NodeProto.output)
  return output_.Add();
}
inline void NodeProto::add_output(const ::std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.NodeProto.output)
}
#if LANG_CXX11
inline void NodeProto::add_output(::std::string&& value) {
  output_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onnx.NodeProto.output)
}
#endif
inline void NodeProto::add_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.NodeProto.output)
}
inline void NodeProto::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.NodeProto.output)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeProto::output() const {
  // @@protoc_insertion_point(field_list:onnx.NodeProto.output)
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeProto::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:onnx.NodeProto.output)
  return &output_;
}

// string name = 3;
inline void NodeProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.name)
  return name_.GetNoArena();
}
inline void NodeProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.NodeProto.name)
}
#if LANG_CXX11
inline void NodeProto::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.NodeProto.name)
}
#endif
inline void NodeProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.name)
}
inline void NodeProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.name)
}
inline ::std::string* NodeProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.NodeProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.NodeProto.name)
}

// string op_type = 4;
inline void NodeProto::clear_op_type() {
  op_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeProto::op_type() const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.op_type)
  return op_type_.GetNoArena();
}
inline void NodeProto::set_op_type(const ::std::string& value) {
  
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.NodeProto.op_type)
}
#if LANG_CXX11
inline void NodeProto::set_op_type(::std::string&& value) {
  
  op_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.NodeProto.op_type)
}
#endif
inline void NodeProto::set_op_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.op_type)
}
inline void NodeProto::set_op_type(const char* value, size_t size) {
  
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.op_type)
}
inline ::std::string* NodeProto::mutable_op_type() {
  
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.op_type)
  return op_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeProto::release_op_type() {
  // @@protoc_insertion_point(field_release:onnx.NodeProto.op_type)
  
  return op_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeProto::set_allocated_op_type(::std::string* op_type) {
  if (op_type != NULL) {
    
  } else {
    
  }
  op_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_type);
  // @@protoc_insertion_point(field_set_allocated:onnx.NodeProto.op_type)
}

// string domain = 7;
inline void NodeProto::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeProto::domain() const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.domain)
  return domain_.GetNoArena();
}
inline void NodeProto::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.NodeProto.domain)
}
#if LANG_CXX11
inline void NodeProto::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.NodeProto.domain)
}
#endif
inline void NodeProto::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.domain)
}
inline void NodeProto::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.domain)
}
inline ::std::string* NodeProto::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeProto::release_domain() {
  // @@protoc_insertion_point(field_release:onnx.NodeProto.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeProto::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:onnx.NodeProto.domain)
}

// repeated .onnx.AttributeProto attribute = 5;
inline int NodeProto::attribute_size() const {
  return attribute_.size();
}
inline void NodeProto::clear_attribute() {
  attribute_.Clear();
}
inline ::onnx::AttributeProto* NodeProto::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.attribute)
  return attribute_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >*
NodeProto::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:onnx.NodeProto.attribute)
  return &attribute_;
}
inline const ::onnx::AttributeProto& NodeProto::attribute(int index) const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.attribute)
  return attribute_.Get(index);
}
inline ::onnx::AttributeProto* NodeProto::add_attribute() {
  // @@protoc_insertion_point(field_add:onnx.NodeProto.attribute)
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >&
NodeProto::attribute() const {
  // @@protoc_insertion_point(field_list:onnx.NodeProto.attribute)
  return attribute_;
}

// string doc_string = 6;
inline void NodeProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.NodeProto.doc_string)
  return doc_string_.GetNoArena();
}
inline void NodeProto::set_doc_string(const ::std::string& value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.NodeProto.doc_string)
}
#if LANG_CXX11
inline void NodeProto::set_doc_string(::std::string&& value) {
  
  doc_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.NodeProto.doc_string)
}
#endif
inline void NodeProto::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.NodeProto.doc_string)
}
inline void NodeProto::set_doc_string(const char* value, size_t size) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.NodeProto.doc_string)
}
inline ::std::string* NodeProto::mutable_doc_string() {
  
  // @@protoc_insertion_point(field_mutable:onnx.NodeProto.doc_string)
  return doc_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:onnx.NodeProto.doc_string)
  
  return doc_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string != NULL) {
    
  } else {
    
  }
  doc_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:onnx.NodeProto.doc_string)
}

// -------------------------------------------------------------------

// TrainingInfoProto

// .onnx.GraphProto initialization = 1;
inline bool TrainingInfoProto::has_initialization() const {
  return this != internal_default_instance() && initialization_ != NULL;
}
inline void TrainingInfoProto::clear_initialization() {
  if (GetArenaNoVirtual() == NULL && initialization_ != NULL) {
    delete initialization_;
  }
  initialization_ = NULL;
}
inline const ::onnx::GraphProto& TrainingInfoProto::_internal_initialization() const {
  return *initialization_;
}
inline const ::onnx::GraphProto& TrainingInfoProto::initialization() const {
  const ::onnx::GraphProto* p = initialization_;
  // @@protoc_insertion_point(field_get:onnx.TrainingInfoProto.initialization)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::GraphProto*>(
      &::onnx::_GraphProto_default_instance_);
}
inline ::onnx::GraphProto* TrainingInfoProto::release_initialization() {
  // @@protoc_insertion_point(field_release:onnx.TrainingInfoProto.initialization)
  
  ::onnx::GraphProto* temp = initialization_;
  initialization_ = NULL;
  return temp;
}
inline ::onnx::GraphProto* TrainingInfoProto::mutable_initialization() {
  
  if (initialization_ == NULL) {
    auto* p = CreateMaybeMessage<::onnx::GraphProto>(GetArenaNoVirtual());
    initialization_ = p;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TrainingInfoProto.initialization)
  return initialization_;
}
inline void TrainingInfoProto::set_allocated_initialization(::onnx::GraphProto* initialization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete initialization_;
  }
  if (initialization) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      initialization = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, initialization, submessage_arena);
    }
    
  } else {
    
  }
  initialization_ = initialization;
  // @@protoc_insertion_point(field_set_allocated:onnx.TrainingInfoProto.initialization)
}

// .onnx.GraphProto algorithm = 2;
inline bool TrainingInfoProto::has_algorithm() const {
  return this != internal_default_instance() && algorithm_ != NULL;
}
inline void TrainingInfoProto::clear_algorithm() {
  if (GetArenaNoVirtual() == NULL && algorithm_ != NULL) {
    delete algorithm_;
  }
  algorithm_ = NULL;
}
inline const ::onnx::GraphProto& TrainingInfoProto::_internal_algorithm() const {
  return *algorithm_;
}
inline const ::onnx::GraphProto& TrainingInfoProto::algorithm() const {
  const ::onnx::GraphProto* p = algorithm_;
  // @@protoc_insertion_point(field_get:onnx.TrainingInfoProto.algorithm)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::GraphProto*>(
      &::onnx::_GraphProto_default_instance_);
}
inline ::onnx::GraphProto* TrainingInfoProto::release_algorithm() {
  // @@protoc_insertion_point(field_release:onnx.TrainingInfoProto.algorithm)
  
  ::onnx::GraphProto* temp = algorithm_;
  algorithm_ = NULL;
  return temp;
}
inline ::onnx::GraphProto* TrainingInfoProto::mutable_algorithm() {
  
  if (algorithm_ == NULL) {
    auto* p = CreateMaybeMessage<::onnx::GraphProto>(GetArenaNoVirtual());
    algorithm_ = p;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TrainingInfoProto.algorithm)
  return algorithm_;
}
inline void TrainingInfoProto::set_allocated_algorithm(::onnx::GraphProto* algorithm) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete algorithm_;
  }
  if (algorithm) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      algorithm = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, algorithm, submessage_arena);
    }
    
  } else {
    
  }
  algorithm_ = algorithm;
  // @@protoc_insertion_point(field_set_allocated:onnx.TrainingInfoProto.algorithm)
}

// repeated .onnx.StringStringEntryProto initialization_binding = 3;
inline int TrainingInfoProto::initialization_binding_size() const {
  return initialization_binding_.size();
}
inline void TrainingInfoProto::clear_initialization_binding() {
  initialization_binding_.Clear();
}
inline ::onnx::StringStringEntryProto* TrainingInfoProto::mutable_initialization_binding(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TrainingInfoProto.initialization_binding)
  return initialization_binding_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
TrainingInfoProto::mutable_initialization_binding() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TrainingInfoProto.initialization_binding)
  return &initialization_binding_;
}
inline const ::onnx::StringStringEntryProto& TrainingInfoProto::initialization_binding(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TrainingInfoProto.initialization_binding)
  return initialization_binding_.Get(index);
}
inline ::onnx::StringStringEntryProto* TrainingInfoProto::add_initialization_binding() {
  // @@protoc_insertion_point(field_add:onnx.TrainingInfoProto.initialization_binding)
  return initialization_binding_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
TrainingInfoProto::initialization_binding() const {
  // @@protoc_insertion_point(field_list:onnx.TrainingInfoProto.initialization_binding)
  return initialization_binding_;
}

// repeated .onnx.StringStringEntryProto update_binding = 4;
inline int TrainingInfoProto::update_binding_size() const {
  return update_binding_.size();
}
inline void TrainingInfoProto::clear_update_binding() {
  update_binding_.Clear();
}
inline ::onnx::StringStringEntryProto* TrainingInfoProto::mutable_update_binding(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TrainingInfoProto.update_binding)
  return update_binding_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
TrainingInfoProto::mutable_update_binding() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TrainingInfoProto.update_binding)
  return &update_binding_;
}
inline const ::onnx::StringStringEntryProto& TrainingInfoProto::update_binding(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TrainingInfoProto.update_binding)
  return update_binding_.Get(index);
}
inline ::onnx::StringStringEntryProto* TrainingInfoProto::add_update_binding() {
  // @@protoc_insertion_point(field_add:onnx.TrainingInfoProto.update_binding)
  return update_binding_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
TrainingInfoProto::update_binding() const {
  // @@protoc_insertion_point(field_list:onnx.TrainingInfoProto.update_binding)
  return update_binding_;
}

// -------------------------------------------------------------------

// ModelProto

// int64 ir_version = 1;
inline void ModelProto::clear_ir_version() {
  ir_version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ModelProto::ir_version() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.ir_version)
  return ir_version_;
}
inline void ModelProto::set_ir_version(::google::protobuf::int64 value) {
  
  ir_version_ = value;
  // @@protoc_insertion_point(field_set:onnx.ModelProto.ir_version)
}

// repeated .onnx.OperatorSetIdProto opset_import = 8;
inline int ModelProto::opset_import_size() const {
  return opset_import_.size();
}
inline void ModelProto::clear_opset_import() {
  opset_import_.Clear();
}
inline ::onnx::OperatorSetIdProto* ModelProto::mutable_opset_import(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.opset_import)
  return opset_import_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto >*
ModelProto::mutable_opset_import() {
  // @@protoc_insertion_point(field_mutable_list:onnx.ModelProto.opset_import)
  return &opset_import_;
}
inline const ::onnx::OperatorSetIdProto& ModelProto::opset_import(int index) const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.opset_import)
  return opset_import_.Get(index);
}
inline ::onnx::OperatorSetIdProto* ModelProto::add_opset_import() {
  // @@protoc_insertion_point(field_add:onnx.ModelProto.opset_import)
  return opset_import_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto >&
ModelProto::opset_import() const {
  // @@protoc_insertion_point(field_list:onnx.ModelProto.opset_import)
  return opset_import_;
}

// string producer_name = 2;
inline void ModelProto::clear_producer_name() {
  producer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModelProto::producer_name() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.producer_name)
  return producer_name_.GetNoArena();
}
inline void ModelProto::set_producer_name(const ::std::string& value) {
  
  producer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.ModelProto.producer_name)
}
#if LANG_CXX11
inline void ModelProto::set_producer_name(::std::string&& value) {
  
  producer_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.ModelProto.producer_name)
}
#endif
inline void ModelProto::set_producer_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  producer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.ModelProto.producer_name)
}
inline void ModelProto::set_producer_name(const char* value, size_t size) {
  
  producer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.ModelProto.producer_name)
}
inline ::std::string* ModelProto::mutable_producer_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.producer_name)
  return producer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelProto::release_producer_name() {
  // @@protoc_insertion_point(field_release:onnx.ModelProto.producer_name)
  
  return producer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelProto::set_allocated_producer_name(::std::string* producer_name) {
  if (producer_name != NULL) {
    
  } else {
    
  }
  producer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer_name);
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.producer_name)
}

// string producer_version = 3;
inline void ModelProto::clear_producer_version() {
  producer_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModelProto::producer_version() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.producer_version)
  return producer_version_.GetNoArena();
}
inline void ModelProto::set_producer_version(const ::std::string& value) {
  
  producer_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.ModelProto.producer_version)
}
#if LANG_CXX11
inline void ModelProto::set_producer_version(::std::string&& value) {
  
  producer_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.ModelProto.producer_version)
}
#endif
inline void ModelProto::set_producer_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  producer_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.ModelProto.producer_version)
}
inline void ModelProto::set_producer_version(const char* value, size_t size) {
  
  producer_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.ModelProto.producer_version)
}
inline ::std::string* ModelProto::mutable_producer_version() {
  
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.producer_version)
  return producer_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelProto::release_producer_version() {
  // @@protoc_insertion_point(field_release:onnx.ModelProto.producer_version)
  
  return producer_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelProto::set_allocated_producer_version(::std::string* producer_version) {
  if (producer_version != NULL) {
    
  } else {
    
  }
  producer_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), producer_version);
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.producer_version)
}

// string domain = 4;
inline void ModelProto::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModelProto::domain() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.domain)
  return domain_.GetNoArena();
}
inline void ModelProto::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.ModelProto.domain)
}
#if LANG_CXX11
inline void ModelProto::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.ModelProto.domain)
}
#endif
inline void ModelProto::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.ModelProto.domain)
}
inline void ModelProto::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.ModelProto.domain)
}
inline ::std::string* ModelProto::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelProto::release_domain() {
  // @@protoc_insertion_point(field_release:onnx.ModelProto.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelProto::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.domain)
}

// int64 model_version = 5;
inline void ModelProto::clear_model_version() {
  model_version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ModelProto::model_version() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.model_version)
  return model_version_;
}
inline void ModelProto::set_model_version(::google::protobuf::int64 value) {
  
  model_version_ = value;
  // @@protoc_insertion_point(field_set:onnx.ModelProto.model_version)
}

// string doc_string = 6;
inline void ModelProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModelProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.doc_string)
  return doc_string_.GetNoArena();
}
inline void ModelProto::set_doc_string(const ::std::string& value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.ModelProto.doc_string)
}
#if LANG_CXX11
inline void ModelProto::set_doc_string(::std::string&& value) {
  
  doc_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.ModelProto.doc_string)
}
#endif
inline void ModelProto::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.ModelProto.doc_string)
}
inline void ModelProto::set_doc_string(const char* value, size_t size) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.ModelProto.doc_string)
}
inline ::std::string* ModelProto::mutable_doc_string() {
  
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.doc_string)
  return doc_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModelProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:onnx.ModelProto.doc_string)
  
  return doc_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModelProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string != NULL) {
    
  } else {
    
  }
  doc_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.doc_string)
}

// .onnx.GraphProto graph = 7;
inline bool ModelProto::has_graph() const {
  return this != internal_default_instance() && graph_ != NULL;
}
inline void ModelProto::clear_graph() {
  if (GetArenaNoVirtual() == NULL && graph_ != NULL) {
    delete graph_;
  }
  graph_ = NULL;
}
inline const ::onnx::GraphProto& ModelProto::_internal_graph() const {
  return *graph_;
}
inline const ::onnx::GraphProto& ModelProto::graph() const {
  const ::onnx::GraphProto* p = graph_;
  // @@protoc_insertion_point(field_get:onnx.ModelProto.graph)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::GraphProto*>(
      &::onnx::_GraphProto_default_instance_);
}
inline ::onnx::GraphProto* ModelProto::release_graph() {
  // @@protoc_insertion_point(field_release:onnx.ModelProto.graph)
  
  ::onnx::GraphProto* temp = graph_;
  graph_ = NULL;
  return temp;
}
inline ::onnx::GraphProto* ModelProto::mutable_graph() {
  
  if (graph_ == NULL) {
    auto* p = CreateMaybeMessage<::onnx::GraphProto>(GetArenaNoVirtual());
    graph_ = p;
  }
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.graph)
  return graph_;
}
inline void ModelProto::set_allocated_graph(::onnx::GraphProto* graph) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete graph_;
  }
  if (graph) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      graph = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:onnx.ModelProto.graph)
}

// repeated .onnx.StringStringEntryProto metadata_props = 14;
inline int ModelProto::metadata_props_size() const {
  return metadata_props_.size();
}
inline void ModelProto::clear_metadata_props() {
  metadata_props_.Clear();
}
inline ::onnx::StringStringEntryProto* ModelProto::mutable_metadata_props(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.metadata_props)
  return metadata_props_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
ModelProto::mutable_metadata_props() {
  // @@protoc_insertion_point(field_mutable_list:onnx.ModelProto.metadata_props)
  return &metadata_props_;
}
inline const ::onnx::StringStringEntryProto& ModelProto::metadata_props(int index) const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.metadata_props)
  return metadata_props_.Get(index);
}
inline ::onnx::StringStringEntryProto* ModelProto::add_metadata_props() {
  // @@protoc_insertion_point(field_add:onnx.ModelProto.metadata_props)
  return metadata_props_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
ModelProto::metadata_props() const {
  // @@protoc_insertion_point(field_list:onnx.ModelProto.metadata_props)
  return metadata_props_;
}

// repeated .onnx.TrainingInfoProto training_info = 20;
inline int ModelProto::training_info_size() const {
  return training_info_.size();
}
inline void ModelProto::clear_training_info() {
  training_info_.Clear();
}
inline ::onnx::TrainingInfoProto* ModelProto::mutable_training_info(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.training_info)
  return training_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::TrainingInfoProto >*
ModelProto::mutable_training_info() {
  // @@protoc_insertion_point(field_mutable_list:onnx.ModelProto.training_info)
  return &training_info_;
}
inline const ::onnx::TrainingInfoProto& ModelProto::training_info(int index) const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.training_info)
  return training_info_.Get(index);
}
inline ::onnx::TrainingInfoProto* ModelProto::add_training_info() {
  // @@protoc_insertion_point(field_add:onnx.ModelProto.training_info)
  return training_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::TrainingInfoProto >&
ModelProto::training_info() const {
  // @@protoc_insertion_point(field_list:onnx.ModelProto.training_info)
  return training_info_;
}

// repeated .onnx.FunctionProto functions = 25;
inline int ModelProto::functions_size() const {
  return functions_.size();
}
inline void ModelProto::clear_functions() {
  functions_.Clear();
}
inline ::onnx::FunctionProto* ModelProto::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.ModelProto.functions)
  return functions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::FunctionProto >*
ModelProto::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:onnx.ModelProto.functions)
  return &functions_;
}
inline const ::onnx::FunctionProto& ModelProto::functions(int index) const {
  // @@protoc_insertion_point(field_get:onnx.ModelProto.functions)
  return functions_.Get(index);
}
inline ::onnx::FunctionProto* ModelProto::add_functions() {
  // @@protoc_insertion_point(field_add:onnx.ModelProto.functions)
  return functions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::FunctionProto >&
ModelProto::functions() const {
  // @@protoc_insertion_point(field_list:onnx.ModelProto.functions)
  return functions_;
}

// -------------------------------------------------------------------

// StringStringEntryProto

// string key = 1;
inline void StringStringEntryProto::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StringStringEntryProto::key() const {
  // @@protoc_insertion_point(field_get:onnx.StringStringEntryProto.key)
  return key_.GetNoArena();
}
inline void StringStringEntryProto::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.StringStringEntryProto.key)
}
#if LANG_CXX11
inline void StringStringEntryProto::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.StringStringEntryProto.key)
}
#endif
inline void StringStringEntryProto::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.StringStringEntryProto.key)
}
inline void StringStringEntryProto::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.StringStringEntryProto.key)
}
inline ::std::string* StringStringEntryProto::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:onnx.StringStringEntryProto.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StringStringEntryProto::release_key() {
  // @@protoc_insertion_point(field_release:onnx.StringStringEntryProto.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StringStringEntryProto::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:onnx.StringStringEntryProto.key)
}

// string value = 2;
inline void StringStringEntryProto::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StringStringEntryProto::value() const {
  // @@protoc_insertion_point(field_get:onnx.StringStringEntryProto.value)
  return value_.GetNoArena();
}
inline void StringStringEntryProto::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.StringStringEntryProto.value)
}
#if LANG_CXX11
inline void StringStringEntryProto::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.StringStringEntryProto.value)
}
#endif
inline void StringStringEntryProto::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.StringStringEntryProto.value)
}
inline void StringStringEntryProto::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.StringStringEntryProto.value)
}
inline ::std::string* StringStringEntryProto::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:onnx.StringStringEntryProto.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StringStringEntryProto::release_value() {
  // @@protoc_insertion_point(field_release:onnx.StringStringEntryProto.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StringStringEntryProto::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:onnx.StringStringEntryProto.value)
}

// -------------------------------------------------------------------

// TensorAnnotation

// string tensor_name = 1;
inline void TensorAnnotation::clear_tensor_name() {
  tensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TensorAnnotation::tensor_name() const {
  // @@protoc_insertion_point(field_get:onnx.TensorAnnotation.tensor_name)
  return tensor_name_.GetNoArena();
}
inline void TensorAnnotation::set_tensor_name(const ::std::string& value) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.TensorAnnotation.tensor_name)
}
#if LANG_CXX11
inline void TensorAnnotation::set_tensor_name(::std::string&& value) {
  
  tensor_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.TensorAnnotation.tensor_name)
}
#endif
inline void TensorAnnotation::set_tensor_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.TensorAnnotation.tensor_name)
}
inline void TensorAnnotation::set_tensor_name(const char* value, size_t size) {
  
  tensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorAnnotation.tensor_name)
}
inline ::std::string* TensorAnnotation::mutable_tensor_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.TensorAnnotation.tensor_name)
  return tensor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorAnnotation::release_tensor_name() {
  // @@protoc_insertion_point(field_release:onnx.TensorAnnotation.tensor_name)
  
  return tensor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorAnnotation::set_allocated_tensor_name(::std::string* tensor_name) {
  if (tensor_name != NULL) {
    
  } else {
    
  }
  tensor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tensor_name);
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorAnnotation.tensor_name)
}

// repeated .onnx.StringStringEntryProto quant_parameter_tensor_names = 2;
inline int TensorAnnotation::quant_parameter_tensor_names_size() const {
  return quant_parameter_tensor_names_.size();
}
inline void TensorAnnotation::clear_quant_parameter_tensor_names() {
  quant_parameter_tensor_names_.Clear();
}
inline ::onnx::StringStringEntryProto* TensorAnnotation::mutable_quant_parameter_tensor_names(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TensorAnnotation.quant_parameter_tensor_names)
  return quant_parameter_tensor_names_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
TensorAnnotation::mutable_quant_parameter_tensor_names() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorAnnotation.quant_parameter_tensor_names)
  return &quant_parameter_tensor_names_;
}
inline const ::onnx::StringStringEntryProto& TensorAnnotation::quant_parameter_tensor_names(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorAnnotation.quant_parameter_tensor_names)
  return quant_parameter_tensor_names_.Get(index);
}
inline ::onnx::StringStringEntryProto* TensorAnnotation::add_quant_parameter_tensor_names() {
  // @@protoc_insertion_point(field_add:onnx.TensorAnnotation.quant_parameter_tensor_names)
  return quant_parameter_tensor_names_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
TensorAnnotation::quant_parameter_tensor_names() const {
  // @@protoc_insertion_point(field_list:onnx.TensorAnnotation.quant_parameter_tensor_names)
  return quant_parameter_tensor_names_;
}

// -------------------------------------------------------------------

// GraphProto

// repeated .onnx.NodeProto node = 1;
inline int GraphProto::node_size() const {
  return node_.size();
}
inline void GraphProto::clear_node() {
  node_.Clear();
}
inline ::onnx::NodeProto* GraphProto::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.node)
  return node_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >*
GraphProto::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.node)
  return &node_;
}
inline const ::onnx::NodeProto& GraphProto::node(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.node)
  return node_.Get(index);
}
inline ::onnx::NodeProto* GraphProto::add_node() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.node)
  return node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >&
GraphProto::node() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.node)
  return node_;
}

// string name = 2;
inline void GraphProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GraphProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.name)
  return name_.GetNoArena();
}
inline void GraphProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.GraphProto.name)
}
#if LANG_CXX11
inline void GraphProto::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.GraphProto.name)
}
#endif
inline void GraphProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.GraphProto.name)
}
inline void GraphProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.GraphProto.name)
}
inline ::std::string* GraphProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.GraphProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.GraphProto.name)
}

// repeated .onnx.TensorProto initializer = 5;
inline int GraphProto::initializer_size() const {
  return initializer_.size();
}
inline void GraphProto::clear_initializer() {
  initializer_.Clear();
}
inline ::onnx::TensorProto* GraphProto::mutable_initializer(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.initializer)
  return initializer_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >*
GraphProto::mutable_initializer() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.initializer)
  return &initializer_;
}
inline const ::onnx::TensorProto& GraphProto::initializer(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.initializer)
  return initializer_.Get(index);
}
inline ::onnx::TensorProto* GraphProto::add_initializer() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.initializer)
  return initializer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::TensorProto >&
GraphProto::initializer() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.initializer)
  return initializer_;
}

// repeated .onnx.SparseTensorProto sparse_initializer = 15;
inline int GraphProto::sparse_initializer_size() const {
  return sparse_initializer_.size();
}
inline void GraphProto::clear_sparse_initializer() {
  sparse_initializer_.Clear();
}
inline ::onnx::SparseTensorProto* GraphProto::mutable_sparse_initializer(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.sparse_initializer)
  return sparse_initializer_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >*
GraphProto::mutable_sparse_initializer() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.sparse_initializer)
  return &sparse_initializer_;
}
inline const ::onnx::SparseTensorProto& GraphProto::sparse_initializer(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.sparse_initializer)
  return sparse_initializer_.Get(index);
}
inline ::onnx::SparseTensorProto* GraphProto::add_sparse_initializer() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.sparse_initializer)
  return sparse_initializer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::SparseTensorProto >&
GraphProto::sparse_initializer() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.sparse_initializer)
  return sparse_initializer_;
}

// string doc_string = 10;
inline void GraphProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GraphProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.doc_string)
  return doc_string_.GetNoArena();
}
inline void GraphProto::set_doc_string(const ::std::string& value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.GraphProto.doc_string)
}
#if LANG_CXX11
inline void GraphProto::set_doc_string(::std::string&& value) {
  
  doc_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.GraphProto.doc_string)
}
#endif
inline void GraphProto::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.GraphProto.doc_string)
}
inline void GraphProto::set_doc_string(const char* value, size_t size) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.GraphProto.doc_string)
}
inline ::std::string* GraphProto::mutable_doc_string() {
  
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.doc_string)
  return doc_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:onnx.GraphProto.doc_string)
  
  return doc_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string != NULL) {
    
  } else {
    
  }
  doc_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:onnx.GraphProto.doc_string)
}

// repeated .onnx.ValueInfoProto input = 11;
inline int GraphProto::input_size() const {
  return input_.size();
}
inline void GraphProto::clear_input() {
  input_.Clear();
}
inline ::onnx::ValueInfoProto* GraphProto::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.input)
  return input_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
GraphProto::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.input)
  return &input_;
}
inline const ::onnx::ValueInfoProto& GraphProto::input(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.input)
  return input_.Get(index);
}
inline ::onnx::ValueInfoProto* GraphProto::add_input() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.input)
  return input_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
GraphProto::input() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.input)
  return input_;
}

// repeated .onnx.ValueInfoProto output = 12;
inline int GraphProto::output_size() const {
  return output_.size();
}
inline void GraphProto::clear_output() {
  output_.Clear();
}
inline ::onnx::ValueInfoProto* GraphProto::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.output)
  return output_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
GraphProto::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.output)
  return &output_;
}
inline const ::onnx::ValueInfoProto& GraphProto::output(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.output)
  return output_.Get(index);
}
inline ::onnx::ValueInfoProto* GraphProto::add_output() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.output)
  return output_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
GraphProto::output() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.output)
  return output_;
}

// repeated .onnx.ValueInfoProto value_info = 13;
inline int GraphProto::value_info_size() const {
  return value_info_.size();
}
inline void GraphProto::clear_value_info() {
  value_info_.Clear();
}
inline ::onnx::ValueInfoProto* GraphProto::mutable_value_info(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.value_info)
  return value_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >*
GraphProto::mutable_value_info() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.value_info)
  return &value_info_;
}
inline const ::onnx::ValueInfoProto& GraphProto::value_info(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.value_info)
  return value_info_.Get(index);
}
inline ::onnx::ValueInfoProto* GraphProto::add_value_info() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.value_info)
  return value_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::ValueInfoProto >&
GraphProto::value_info() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.value_info)
  return value_info_;
}

// repeated .onnx.TensorAnnotation quantization_annotation = 14;
inline int GraphProto::quantization_annotation_size() const {
  return quantization_annotation_.size();
}
inline void GraphProto::clear_quantization_annotation() {
  quantization_annotation_.Clear();
}
inline ::onnx::TensorAnnotation* GraphProto::mutable_quantization_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.GraphProto.quantization_annotation)
  return quantization_annotation_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::TensorAnnotation >*
GraphProto::mutable_quantization_annotation() {
  // @@protoc_insertion_point(field_mutable_list:onnx.GraphProto.quantization_annotation)
  return &quantization_annotation_;
}
inline const ::onnx::TensorAnnotation& GraphProto::quantization_annotation(int index) const {
  // @@protoc_insertion_point(field_get:onnx.GraphProto.quantization_annotation)
  return quantization_annotation_.Get(index);
}
inline ::onnx::TensorAnnotation* GraphProto::add_quantization_annotation() {
  // @@protoc_insertion_point(field_add:onnx.GraphProto.quantization_annotation)
  return quantization_annotation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::TensorAnnotation >&
GraphProto::quantization_annotation() const {
  // @@protoc_insertion_point(field_list:onnx.GraphProto.quantization_annotation)
  return quantization_annotation_;
}

// -------------------------------------------------------------------

// TensorProto_Segment

// int64 begin = 1;
inline void TensorProto_Segment::clear_begin() {
  begin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TensorProto_Segment::begin() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.Segment.begin)
  return begin_;
}
inline void TensorProto_Segment::set_begin(::google::protobuf::int64 value) {
  
  begin_ = value;
  // @@protoc_insertion_point(field_set:onnx.TensorProto.Segment.begin)
}

// int64 end = 2;
inline void TensorProto_Segment::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TensorProto_Segment::end() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.Segment.end)
  return end_;
}
inline void TensorProto_Segment::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:onnx.TensorProto.Segment.end)
}

// -------------------------------------------------------------------

// TensorProto

// repeated int64 dims = 1;
inline int TensorProto::dims_size() const {
  return dims_.size();
}
inline void TensorProto::clear_dims() {
  dims_.Clear();
}
inline ::google::protobuf::int64 TensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.dims)
  return dims_.Get(index);
}
inline void TensorProto::set_dims(int index, ::google::protobuf::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.dims)
}
inline void TensorProto::add_dims(::google::protobuf::int64 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorProto::dims() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.dims)
  return dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.dims)
  return &dims_;
}

// int32 data_type = 2;
inline void TensorProto::clear_data_type() {
  data_type_ = 0;
}
inline ::google::protobuf::int32 TensorProto::data_type() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.data_type)
  return data_type_;
}
inline void TensorProto::set_data_type(::google::protobuf::int32 value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.TensorProto.data_type)
}

// .onnx.TensorProto.Segment segment = 3;
inline bool TensorProto::has_segment() const {
  return this != internal_default_instance() && segment_ != NULL;
}
inline void TensorProto::clear_segment() {
  if (GetArenaNoVirtual() == NULL && segment_ != NULL) {
    delete segment_;
  }
  segment_ = NULL;
}
inline const ::onnx::TensorProto_Segment& TensorProto::_internal_segment() const {
  return *segment_;
}
inline const ::onnx::TensorProto_Segment& TensorProto::segment() const {
  const ::onnx::TensorProto_Segment* p = segment_;
  // @@protoc_insertion_point(field_get:onnx.TensorProto.segment)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TensorProto_Segment*>(
      &::onnx::_TensorProto_Segment_default_instance_);
}
inline ::onnx::TensorProto_Segment* TensorProto::release_segment() {
  // @@protoc_insertion_point(field_release:onnx.TensorProto.segment)
  
  ::onnx::TensorProto_Segment* temp = segment_;
  segment_ = NULL;
  return temp;
}
inline ::onnx::TensorProto_Segment* TensorProto::mutable_segment() {
  
  if (segment_ == NULL) {
    auto* p = CreateMaybeMessage<::onnx::TensorProto_Segment>(GetArenaNoVirtual());
    segment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.segment)
  return segment_;
}
inline void TensorProto::set_allocated_segment(::onnx::TensorProto_Segment* segment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete segment_;
  }
  if (segment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      segment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, segment, submessage_arena);
    }
    
  } else {
    
  }
  segment_ = segment;
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorProto.segment)
}

// repeated float float_data = 4 [packed = true];
inline int TensorProto::float_data_size() const {
  return float_data_.size();
}
inline void TensorProto::clear_float_data() {
  float_data_.Clear();
}
inline float TensorProto::float_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.float_data)
  return float_data_.Get(index);
}
inline void TensorProto::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.float_data)
}
inline void TensorProto::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
TensorProto::float_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
TensorProto::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.float_data)
  return &float_data_;
}

// repeated int32 int32_data = 5 [packed = true];
inline int TensorProto::int32_data_size() const {
  return int32_data_.size();
}
inline void TensorProto::clear_int32_data() {
  int32_data_.Clear();
}
inline ::google::protobuf::int32 TensorProto::int32_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.int32_data)
  return int32_data_.Get(index);
}
inline void TensorProto::set_int32_data(int index, ::google::protobuf::int32 value) {
  int32_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.int32_data)
}
inline void TensorProto::add_int32_data(::google::protobuf::int32 value) {
  int32_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.int32_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TensorProto::int32_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.int32_data)
  return int32_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TensorProto::mutable_int32_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.int32_data)
  return &int32_data_;
}

// repeated bytes string_data = 6;
inline int TensorProto::string_data_size() const {
  return string_data_.size();
}
inline void TensorProto::clear_string_data() {
  string_data_.Clear();
}
inline const ::std::string& TensorProto::string_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.string_data)
  return string_data_.Get(index);
}
inline ::std::string* TensorProto::mutable_string_data(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.string_data)
  return string_data_.Mutable(index);
}
inline void TensorProto::set_string_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.TensorProto.string_data)
  string_data_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TensorProto::set_string_data(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:onnx.TensorProto.string_data)
  string_data_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TensorProto::set_string_data(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.TensorProto.string_data)
}
inline void TensorProto::set_string_data(int index, const void* value, size_t size) {
  string_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorProto.string_data)
}
inline ::std::string* TensorProto::add_string_data() {
  // @@protoc_insertion_point(field_add_mutable:onnx.TensorProto.string_data)
  return string_data_.Add();
}
inline void TensorProto::add_string_data(const ::std::string& value) {
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.string_data)
}
#if LANG_CXX11
inline void TensorProto::add_string_data(::std::string&& value) {
  string_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onnx.TensorProto.string_data)
}
#endif
inline void TensorProto::add_string_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  string_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.TensorProto.string_data)
}
inline void TensorProto::add_string_data(const void* value, size_t size) {
  string_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.TensorProto.string_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TensorProto::string_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.string_data)
  return string_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TensorProto::mutable_string_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.string_data)
  return &string_data_;
}

// repeated int64 int64_data = 7 [packed = true];
inline int TensorProto::int64_data_size() const {
  return int64_data_.size();
}
inline void TensorProto::clear_int64_data() {
  int64_data_.Clear();
}
inline ::google::protobuf::int64 TensorProto::int64_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.int64_data)
  return int64_data_.Get(index);
}
inline void TensorProto::set_int64_data(int index, ::google::protobuf::int64 value) {
  int64_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.int64_data)
}
inline void TensorProto::add_int64_data(::google::protobuf::int64 value) {
  int64_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.int64_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TensorProto::int64_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.int64_data)
  return int64_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TensorProto::mutable_int64_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.int64_data)
  return &int64_data_;
}

// string name = 8;
inline void TensorProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TensorProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.name)
  return name_.GetNoArena();
}
inline void TensorProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.name)
}
#if LANG_CXX11
inline void TensorProto::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.TensorProto.name)
}
#endif
inline void TensorProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.TensorProto.name)
}
inline void TensorProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorProto.name)
}
inline ::std::string* TensorProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.TensorProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorProto.name)
}

// string doc_string = 12;
inline void TensorProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TensorProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.doc_string)
  return doc_string_.GetNoArena();
}
inline void TensorProto::set_doc_string(const ::std::string& value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.doc_string)
}
#if LANG_CXX11
inline void TensorProto::set_doc_string(::std::string&& value) {
  
  doc_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.TensorProto.doc_string)
}
#endif
inline void TensorProto::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.TensorProto.doc_string)
}
inline void TensorProto::set_doc_string(const char* value, size_t size) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorProto.doc_string)
}
inline ::std::string* TensorProto::mutable_doc_string() {
  
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.doc_string)
  return doc_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:onnx.TensorProto.doc_string)
  
  return doc_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string != NULL) {
    
  } else {
    
  }
  doc_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorProto.doc_string)
}

// bytes raw_data = 9;
inline void TensorProto::clear_raw_data() {
  raw_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TensorProto::raw_data() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.raw_data)
  return raw_data_.GetNoArena();
}
inline void TensorProto::set_raw_data(const ::std::string& value) {
  
  raw_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.raw_data)
}
#if LANG_CXX11
inline void TensorProto::set_raw_data(::std::string&& value) {
  
  raw_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.TensorProto.raw_data)
}
#endif
inline void TensorProto::set_raw_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  raw_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.TensorProto.raw_data)
}
inline void TensorProto::set_raw_data(const void* value, size_t size) {
  
  raw_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorProto.raw_data)
}
inline ::std::string* TensorProto::mutable_raw_data() {
  
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.raw_data)
  return raw_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorProto::release_raw_data() {
  // @@protoc_insertion_point(field_release:onnx.TensorProto.raw_data)
  
  return raw_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorProto::set_allocated_raw_data(::std::string* raw_data) {
  if (raw_data != NULL) {
    
  } else {
    
  }
  raw_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_data);
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorProto.raw_data)
}

// repeated .onnx.StringStringEntryProto external_data = 13;
inline int TensorProto::external_data_size() const {
  return external_data_.size();
}
inline void TensorProto::clear_external_data() {
  external_data_.Clear();
}
inline ::onnx::StringStringEntryProto* TensorProto::mutable_external_data(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TensorProto.external_data)
  return external_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >*
TensorProto::mutable_external_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.external_data)
  return &external_data_;
}
inline const ::onnx::StringStringEntryProto& TensorProto::external_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.external_data)
  return external_data_.Get(index);
}
inline ::onnx::StringStringEntryProto* TensorProto::add_external_data() {
  // @@protoc_insertion_point(field_add:onnx.TensorProto.external_data)
  return external_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::StringStringEntryProto >&
TensorProto::external_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.external_data)
  return external_data_;
}

// .onnx.TensorProto.DataLocation data_location = 14;
inline void TensorProto::clear_data_location() {
  data_location_ = 0;
}
inline ::onnx::TensorProto_DataLocation TensorProto::data_location() const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.data_location)
  return static_cast< ::onnx::TensorProto_DataLocation >(data_location_);
}
inline void TensorProto::set_data_location(::onnx::TensorProto_DataLocation value) {
  
  data_location_ = value;
  // @@protoc_insertion_point(field_set:onnx.TensorProto.data_location)
}

// repeated double double_data = 10 [packed = true];
inline int TensorProto::double_data_size() const {
  return double_data_.size();
}
inline void TensorProto::clear_double_data() {
  double_data_.Clear();
}
inline double TensorProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.double_data)
  return double_data_.Get(index);
}
inline void TensorProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.double_data)
}
inline void TensorProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.double_data)
}
inline const ::google::protobuf::RepeatedField< double >&
TensorProto::double_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.double_data)
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
TensorProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.double_data)
  return &double_data_;
}

// repeated uint64 uint64_data = 11 [packed = true];
inline int TensorProto::uint64_data_size() const {
  return uint64_data_.size();
}
inline void TensorProto::clear_uint64_data() {
  uint64_data_.Clear();
}
inline ::google::protobuf::uint64 TensorProto::uint64_data(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorProto.uint64_data)
  return uint64_data_.Get(index);
}
inline void TensorProto::set_uint64_data(int index, ::google::protobuf::uint64 value) {
  uint64_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.TensorProto.uint64_data)
}
inline void TensorProto::add_uint64_data(::google::protobuf::uint64 value) {
  uint64_data_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.TensorProto.uint64_data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TensorProto::uint64_data() const {
  // @@protoc_insertion_point(field_list:onnx.TensorProto.uint64_data)
  return uint64_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TensorProto::mutable_uint64_data() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorProto.uint64_data)
  return &uint64_data_;
}

// -------------------------------------------------------------------

// SparseTensorProto

// .onnx.TensorProto values = 1;
inline bool SparseTensorProto::has_values() const {
  return this != internal_default_instance() && values_ != NULL;
}
inline void SparseTensorProto::clear_values() {
  if (GetArenaNoVirtual() == NULL && values_ != NULL) {
    delete values_;
  }
  values_ = NULL;
}
inline const ::onnx::TensorProto& SparseTensorProto::_internal_values() const {
  return *values_;
}
inline const ::onnx::TensorProto& SparseTensorProto::values() const {
  const ::onnx::TensorProto* p = values_;
  // @@protoc_insertion_point(field_get:onnx.SparseTensorProto.values)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TensorProto*>(
      &::onnx::_TensorProto_default_instance_);
}
inline ::onnx::TensorProto* SparseTensorProto::release_values() {
  // @@protoc_insertion_point(field_release:onnx.SparseTensorProto.values)
  
  ::onnx::TensorProto* temp = values_;
  values_ = NULL;
  return temp;
}
inline ::onnx::TensorProto* SparseTensorProto::mutable_values() {
  
  if (values_ == NULL) {
    auto* p = CreateMaybeMessage<::onnx::TensorProto>(GetArenaNoVirtual());
    values_ = p;
  }
  // @@protoc_insertion_point(field_mutable:onnx.SparseTensorProto.values)
  return values_;
}
inline void SparseTensorProto::set_allocated_values(::onnx::TensorProto* values) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete values_;
  }
  if (values) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      values = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, values, submessage_arena);
    }
    
  } else {
    
  }
  values_ = values;
  // @@protoc_insertion_point(field_set_allocated:onnx.SparseTensorProto.values)
}

// .onnx.TensorProto indices = 2;
inline bool SparseTensorProto::has_indices() const {
  return this != internal_default_instance() && indices_ != NULL;
}
inline void SparseTensorProto::clear_indices() {
  if (GetArenaNoVirtual() == NULL && indices_ != NULL) {
    delete indices_;
  }
  indices_ = NULL;
}
inline const ::onnx::TensorProto& SparseTensorProto::_internal_indices() const {
  return *indices_;
}
inline const ::onnx::TensorProto& SparseTensorProto::indices() const {
  const ::onnx::TensorProto* p = indices_;
  // @@protoc_insertion_point(field_get:onnx.SparseTensorProto.indices)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TensorProto*>(
      &::onnx::_TensorProto_default_instance_);
}
inline ::onnx::TensorProto* SparseTensorProto::release_indices() {
  // @@protoc_insertion_point(field_release:onnx.SparseTensorProto.indices)
  
  ::onnx::TensorProto* temp = indices_;
  indices_ = NULL;
  return temp;
}
inline ::onnx::TensorProto* SparseTensorProto::mutable_indices() {
  
  if (indices_ == NULL) {
    auto* p = CreateMaybeMessage<::onnx::TensorProto>(GetArenaNoVirtual());
    indices_ = p;
  }
  // @@protoc_insertion_point(field_mutable:onnx.SparseTensorProto.indices)
  return indices_;
}
inline void SparseTensorProto::set_allocated_indices(::onnx::TensorProto* indices) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete indices_;
  }
  if (indices) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      indices = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, indices, submessage_arena);
    }
    
  } else {
    
  }
  indices_ = indices;
  // @@protoc_insertion_point(field_set_allocated:onnx.SparseTensorProto.indices)
}

// repeated int64 dims = 3;
inline int SparseTensorProto::dims_size() const {
  return dims_.size();
}
inline void SparseTensorProto::clear_dims() {
  dims_.Clear();
}
inline ::google::protobuf::int64 SparseTensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:onnx.SparseTensorProto.dims)
  return dims_.Get(index);
}
inline void SparseTensorProto::set_dims(int index, ::google::protobuf::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:onnx.SparseTensorProto.dims)
}
inline void SparseTensorProto::add_dims(::google::protobuf::int64 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:onnx.SparseTensorProto.dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SparseTensorProto::dims() const {
  // @@protoc_insertion_point(field_list:onnx.SparseTensorProto.dims)
  return dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SparseTensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:onnx.SparseTensorProto.dims)
  return &dims_;
}

// -------------------------------------------------------------------

// TensorShapeProto_Dimension

// int64 dim_value = 1;
inline bool TensorShapeProto_Dimension::has_dim_value() const {
  return value_case() == kDimValue;
}
inline void TensorShapeProto_Dimension::set_has_dim_value() {
  _oneof_case_[0] = kDimValue;
}
inline void TensorShapeProto_Dimension::clear_dim_value() {
  if (has_dim_value()) {
    value_.dim_value_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 TensorShapeProto_Dimension::dim_value() const {
  // @@protoc_insertion_point(field_get:onnx.TensorShapeProto.Dimension.dim_value)
  if (has_dim_value()) {
    return value_.dim_value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void TensorShapeProto_Dimension::set_dim_value(::google::protobuf::int64 value) {
  if (!has_dim_value()) {
    clear_value();
    set_has_dim_value();
  }
  value_.dim_value_ = value;
  // @@protoc_insertion_point(field_set:onnx.TensorShapeProto.Dimension.dim_value)
}

// string dim_param = 2;
inline bool TensorShapeProto_Dimension::has_dim_param() const {
  return value_case() == kDimParam;
}
inline void TensorShapeProto_Dimension::set_has_dim_param() {
  _oneof_case_[0] = kDimParam;
}
inline void TensorShapeProto_Dimension::clear_dim_param() {
  if (has_dim_param()) {
    value_.dim_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& TensorShapeProto_Dimension::dim_param() const {
  // @@protoc_insertion_point(field_get:onnx.TensorShapeProto.Dimension.dim_param)
  if (has_dim_param()) {
    return value_.dim_param_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TensorShapeProto_Dimension::set_dim_param(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.TensorShapeProto.Dimension.dim_param)
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.dim_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.TensorShapeProto.Dimension.dim_param)
}
#if LANG_CXX11
inline void TensorShapeProto_Dimension::set_dim_param(::std::string&& value) {
  // @@protoc_insertion_point(field_set:onnx.TensorShapeProto.Dimension.dim_param)
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.dim_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.TensorShapeProto.Dimension.dim_param)
}
#endif
inline void TensorShapeProto_Dimension::set_dim_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.dim_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.TensorShapeProto.Dimension.dim_param)
}
inline void TensorShapeProto_Dimension::set_dim_param(const char* value, size_t size) {
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.dim_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorShapeProto.Dimension.dim_param)
}
inline ::std::string* TensorShapeProto_Dimension::mutable_dim_param() {
  if (!has_dim_param()) {
    clear_value();
    set_has_dim_param();
    value_.dim_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:onnx.TensorShapeProto.Dimension.dim_param)
  return value_.dim_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorShapeProto_Dimension::release_dim_param() {
  // @@protoc_insertion_point(field_release:onnx.TensorShapeProto.Dimension.dim_param)
  if (has_dim_param()) {
    clear_has_value();
    return value_.dim_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TensorShapeProto_Dimension::set_allocated_dim_param(::std::string* dim_param) {
  if (!has_dim_param()) {
    value_.dim_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (dim_param != NULL) {
    set_has_dim_param();
    value_.dim_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dim_param);
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorShapeProto.Dimension.dim_param)
}

// string denotation = 3;
inline void TensorShapeProto_Dimension::clear_denotation() {
  denotation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TensorShapeProto_Dimension::denotation() const {
  // @@protoc_insertion_point(field_get:onnx.TensorShapeProto.Dimension.denotation)
  return denotation_.GetNoArena();
}
inline void TensorShapeProto_Dimension::set_denotation(const ::std::string& value) {
  
  denotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.TensorShapeProto.Dimension.denotation)
}
#if LANG_CXX11
inline void TensorShapeProto_Dimension::set_denotation(::std::string&& value) {
  
  denotation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.TensorShapeProto.Dimension.denotation)
}
#endif
inline void TensorShapeProto_Dimension::set_denotation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  denotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.TensorShapeProto.Dimension.denotation)
}
inline void TensorShapeProto_Dimension::set_denotation(const char* value, size_t size) {
  
  denotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.TensorShapeProto.Dimension.denotation)
}
inline ::std::string* TensorShapeProto_Dimension::mutable_denotation() {
  
  // @@protoc_insertion_point(field_mutable:onnx.TensorShapeProto.Dimension.denotation)
  return denotation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorShapeProto_Dimension::release_denotation() {
  // @@protoc_insertion_point(field_release:onnx.TensorShapeProto.Dimension.denotation)
  
  return denotation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorShapeProto_Dimension::set_allocated_denotation(::std::string* denotation) {
  if (denotation != NULL) {
    
  } else {
    
  }
  denotation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), denotation);
  // @@protoc_insertion_point(field_set_allocated:onnx.TensorShapeProto.Dimension.denotation)
}

inline bool TensorShapeProto_Dimension::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void TensorShapeProto_Dimension::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline TensorShapeProto_Dimension::ValueCase TensorShapeProto_Dimension::value_case() const {
  return TensorShapeProto_Dimension::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TensorShapeProto

// repeated .onnx.TensorShapeProto.Dimension dim = 1;
inline int TensorShapeProto::dim_size() const {
  return dim_.size();
}
inline void TensorShapeProto::clear_dim() {
  dim_.Clear();
}
inline ::onnx::TensorShapeProto_Dimension* TensorShapeProto::mutable_dim(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.TensorShapeProto.dim)
  return dim_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::TensorShapeProto_Dimension >*
TensorShapeProto::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:onnx.TensorShapeProto.dim)
  return &dim_;
}
inline const ::onnx::TensorShapeProto_Dimension& TensorShapeProto::dim(int index) const {
  // @@protoc_insertion_point(field_get:onnx.TensorShapeProto.dim)
  return dim_.Get(index);
}
inline ::onnx::TensorShapeProto_Dimension* TensorShapeProto::add_dim() {
  // @@protoc_insertion_point(field_add:onnx.TensorShapeProto.dim)
  return dim_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::TensorShapeProto_Dimension >&
TensorShapeProto::dim() const {
  // @@protoc_insertion_point(field_list:onnx.TensorShapeProto.dim)
  return dim_;
}

// -------------------------------------------------------------------

// TypeProto_Tensor

// int32 elem_type = 1;
inline void TypeProto_Tensor::clear_elem_type() {
  elem_type_ = 0;
}
inline ::google::protobuf::int32 TypeProto_Tensor::elem_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.Tensor.elem_type)
  return elem_type_;
}
inline void TypeProto_Tensor::set_elem_type(::google::protobuf::int32 value) {
  
  elem_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.TypeProto.Tensor.elem_type)
}

// .onnx.TensorShapeProto shape = 2;
inline bool TypeProto_Tensor::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void TypeProto_Tensor::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}
inline const ::onnx::TensorShapeProto& TypeProto_Tensor::_internal_shape() const {
  return *shape_;
}
inline const ::onnx::TensorShapeProto& TypeProto_Tensor::shape() const {
  const ::onnx::TensorShapeProto* p = shape_;
  // @@protoc_insertion_point(field_get:onnx.TypeProto.Tensor.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TensorShapeProto*>(
      &::onnx::_TensorShapeProto_default_instance_);
}
inline ::onnx::TensorShapeProto* TypeProto_Tensor::release_shape() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.Tensor.shape)
  
  ::onnx::TensorShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::onnx::TensorShapeProto* TypeProto_Tensor::mutable_shape() {
  
  if (shape_ == NULL) {
    auto* p = CreateMaybeMessage<::onnx::TensorShapeProto>(GetArenaNoVirtual());
    shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.Tensor.shape)
  return shape_;
}
inline void TypeProto_Tensor::set_allocated_shape(::onnx::TensorShapeProto* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.Tensor.shape)
}

// -------------------------------------------------------------------

// TypeProto_Sequence

// .onnx.TypeProto elem_type = 1;
inline bool TypeProto_Sequence::has_elem_type() const {
  return this != internal_default_instance() && elem_type_ != NULL;
}
inline void TypeProto_Sequence::clear_elem_type() {
  if (GetArenaNoVirtual() == NULL && elem_type_ != NULL) {
    delete elem_type_;
  }
  elem_type_ = NULL;
}
inline const ::onnx::TypeProto& TypeProto_Sequence::_internal_elem_type() const {
  return *elem_type_;
}
inline const ::onnx::TypeProto& TypeProto_Sequence::elem_type() const {
  const ::onnx::TypeProto* p = elem_type_;
  // @@protoc_insertion_point(field_get:onnx.TypeProto.Sequence.elem_type)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TypeProto*>(
      &::onnx::_TypeProto_default_instance_);
}
inline ::onnx::TypeProto* TypeProto_Sequence::release_elem_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.Sequence.elem_type)
  
  ::onnx::TypeProto* temp = elem_type_;
  elem_type_ = NULL;
  return temp;
}
inline ::onnx::TypeProto* TypeProto_Sequence::mutable_elem_type() {
  
  if (elem_type_ == NULL) {
    auto* p = CreateMaybeMessage<::onnx::TypeProto>(GetArenaNoVirtual());
    elem_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.Sequence.elem_type)
  return elem_type_;
}
inline void TypeProto_Sequence::set_allocated_elem_type(::onnx::TypeProto* elem_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete elem_type_;
  }
  if (elem_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      elem_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, elem_type, submessage_arena);
    }
    
  } else {
    
  }
  elem_type_ = elem_type;
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.Sequence.elem_type)
}

// -------------------------------------------------------------------

// TypeProto_Map

// int32 key_type = 1;
inline void TypeProto_Map::clear_key_type() {
  key_type_ = 0;
}
inline ::google::protobuf::int32 TypeProto_Map::key_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.Map.key_type)
  return key_type_;
}
inline void TypeProto_Map::set_key_type(::google::protobuf::int32 value) {
  
  key_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.TypeProto.Map.key_type)
}

// .onnx.TypeProto value_type = 2;
inline bool TypeProto_Map::has_value_type() const {
  return this != internal_default_instance() && value_type_ != NULL;
}
inline void TypeProto_Map::clear_value_type() {
  if (GetArenaNoVirtual() == NULL && value_type_ != NULL) {
    delete value_type_;
  }
  value_type_ = NULL;
}
inline const ::onnx::TypeProto& TypeProto_Map::_internal_value_type() const {
  return *value_type_;
}
inline const ::onnx::TypeProto& TypeProto_Map::value_type() const {
  const ::onnx::TypeProto* p = value_type_;
  // @@protoc_insertion_point(field_get:onnx.TypeProto.Map.value_type)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TypeProto*>(
      &::onnx::_TypeProto_default_instance_);
}
inline ::onnx::TypeProto* TypeProto_Map::release_value_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.Map.value_type)
  
  ::onnx::TypeProto* temp = value_type_;
  value_type_ = NULL;
  return temp;
}
inline ::onnx::TypeProto* TypeProto_Map::mutable_value_type() {
  
  if (value_type_ == NULL) {
    auto* p = CreateMaybeMessage<::onnx::TypeProto>(GetArenaNoVirtual());
    value_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.Map.value_type)
  return value_type_;
}
inline void TypeProto_Map::set_allocated_value_type(::onnx::TypeProto* value_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_type_;
  }
  if (value_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_type, submessage_arena);
    }
    
  } else {
    
  }
  value_type_ = value_type;
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.Map.value_type)
}

// -------------------------------------------------------------------

// TypeProto_Optional

// .onnx.TypeProto elem_type = 1;
inline bool TypeProto_Optional::has_elem_type() const {
  return this != internal_default_instance() && elem_type_ != NULL;
}
inline void TypeProto_Optional::clear_elem_type() {
  if (GetArenaNoVirtual() == NULL && elem_type_ != NULL) {
    delete elem_type_;
  }
  elem_type_ = NULL;
}
inline const ::onnx::TypeProto& TypeProto_Optional::_internal_elem_type() const {
  return *elem_type_;
}
inline const ::onnx::TypeProto& TypeProto_Optional::elem_type() const {
  const ::onnx::TypeProto* p = elem_type_;
  // @@protoc_insertion_point(field_get:onnx.TypeProto.Optional.elem_type)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TypeProto*>(
      &::onnx::_TypeProto_default_instance_);
}
inline ::onnx::TypeProto* TypeProto_Optional::release_elem_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.Optional.elem_type)
  
  ::onnx::TypeProto* temp = elem_type_;
  elem_type_ = NULL;
  return temp;
}
inline ::onnx::TypeProto* TypeProto_Optional::mutable_elem_type() {
  
  if (elem_type_ == NULL) {
    auto* p = CreateMaybeMessage<::onnx::TypeProto>(GetArenaNoVirtual());
    elem_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.Optional.elem_type)
  return elem_type_;
}
inline void TypeProto_Optional::set_allocated_elem_type(::onnx::TypeProto* elem_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete elem_type_;
  }
  if (elem_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      elem_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, elem_type, submessage_arena);
    }
    
  } else {
    
  }
  elem_type_ = elem_type;
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.Optional.elem_type)
}

// -------------------------------------------------------------------

// TypeProto_SparseTensor

// int32 elem_type = 1;
inline void TypeProto_SparseTensor::clear_elem_type() {
  elem_type_ = 0;
}
inline ::google::protobuf::int32 TypeProto_SparseTensor::elem_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.SparseTensor.elem_type)
  return elem_type_;
}
inline void TypeProto_SparseTensor::set_elem_type(::google::protobuf::int32 value) {
  
  elem_type_ = value;
  // @@protoc_insertion_point(field_set:onnx.TypeProto.SparseTensor.elem_type)
}

// .onnx.TensorShapeProto shape = 2;
inline bool TypeProto_SparseTensor::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void TypeProto_SparseTensor::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}
inline const ::onnx::TensorShapeProto& TypeProto_SparseTensor::_internal_shape() const {
  return *shape_;
}
inline const ::onnx::TensorShapeProto& TypeProto_SparseTensor::shape() const {
  const ::onnx::TensorShapeProto* p = shape_;
  // @@protoc_insertion_point(field_get:onnx.TypeProto.SparseTensor.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::onnx::TensorShapeProto*>(
      &::onnx::_TensorShapeProto_default_instance_);
}
inline ::onnx::TensorShapeProto* TypeProto_SparseTensor::release_shape() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.SparseTensor.shape)
  
  ::onnx::TensorShapeProto* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::onnx::TensorShapeProto* TypeProto_SparseTensor::mutable_shape() {
  
  if (shape_ == NULL) {
    auto* p = CreateMaybeMessage<::onnx::TensorShapeProto>(GetArenaNoVirtual());
    shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.SparseTensor.shape)
  return shape_;
}
inline void TypeProto_SparseTensor::set_allocated_shape(::onnx::TensorShapeProto* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.SparseTensor.shape)
}

// -------------------------------------------------------------------

// TypeProto

// .onnx.TypeProto.Tensor tensor_type = 1;
inline bool TypeProto::has_tensor_type() const {
  return value_case() == kTensorType;
}
inline void TypeProto::set_has_tensor_type() {
  _oneof_case_[0] = kTensorType;
}
inline void TypeProto::clear_tensor_type() {
  if (has_tensor_type()) {
    delete value_.tensor_type_;
    clear_has_value();
  }
}
inline const ::onnx::TypeProto_Tensor& TypeProto::_internal_tensor_type() const {
  return *value_.tensor_type_;
}
inline ::onnx::TypeProto_Tensor* TypeProto::release_tensor_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.tensor_type)
  if (has_tensor_type()) {
    clear_has_value();
      ::onnx::TypeProto_Tensor* temp = value_.tensor_type_;
    value_.tensor_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::onnx::TypeProto_Tensor& TypeProto::tensor_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.tensor_type)
  return has_tensor_type()
      ? *value_.tensor_type_
      : *reinterpret_cast< ::onnx::TypeProto_Tensor*>(&::onnx::_TypeProto_Tensor_default_instance_);
}
inline ::onnx::TypeProto_Tensor* TypeProto::mutable_tensor_type() {
  if (!has_tensor_type()) {
    clear_value();
    set_has_tensor_type();
    value_.tensor_type_ = CreateMaybeMessage< ::onnx::TypeProto_Tensor >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.tensor_type)
  return value_.tensor_type_;
}

// .onnx.TypeProto.Sequence sequence_type = 4;
inline bool TypeProto::has_sequence_type() const {
  return value_case() == kSequenceType;
}
inline void TypeProto::set_has_sequence_type() {
  _oneof_case_[0] = kSequenceType;
}
inline void TypeProto::clear_sequence_type() {
  if (has_sequence_type()) {
    delete value_.sequence_type_;
    clear_has_value();
  }
}
inline const ::onnx::TypeProto_Sequence& TypeProto::_internal_sequence_type() const {
  return *value_.sequence_type_;
}
inline ::onnx::TypeProto_Sequence* TypeProto::release_sequence_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.sequence_type)
  if (has_sequence_type()) {
    clear_has_value();
      ::onnx::TypeProto_Sequence* temp = value_.sequence_type_;
    value_.sequence_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::onnx::TypeProto_Sequence& TypeProto::sequence_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.sequence_type)
  return has_sequence_type()
      ? *value_.sequence_type_
      : *reinterpret_cast< ::onnx::TypeProto_Sequence*>(&::onnx::_TypeProto_Sequence_default_instance_);
}
inline ::onnx::TypeProto_Sequence* TypeProto::mutable_sequence_type() {
  if (!has_sequence_type()) {
    clear_value();
    set_has_sequence_type();
    value_.sequence_type_ = CreateMaybeMessage< ::onnx::TypeProto_Sequence >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.sequence_type)
  return value_.sequence_type_;
}

// .onnx.TypeProto.Map map_type = 5;
inline bool TypeProto::has_map_type() const {
  return value_case() == kMapType;
}
inline void TypeProto::set_has_map_type() {
  _oneof_case_[0] = kMapType;
}
inline void TypeProto::clear_map_type() {
  if (has_map_type()) {
    delete value_.map_type_;
    clear_has_value();
  }
}
inline const ::onnx::TypeProto_Map& TypeProto::_internal_map_type() const {
  return *value_.map_type_;
}
inline ::onnx::TypeProto_Map* TypeProto::release_map_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.map_type)
  if (has_map_type()) {
    clear_has_value();
      ::onnx::TypeProto_Map* temp = value_.map_type_;
    value_.map_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::onnx::TypeProto_Map& TypeProto::map_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.map_type)
  return has_map_type()
      ? *value_.map_type_
      : *reinterpret_cast< ::onnx::TypeProto_Map*>(&::onnx::_TypeProto_Map_default_instance_);
}
inline ::onnx::TypeProto_Map* TypeProto::mutable_map_type() {
  if (!has_map_type()) {
    clear_value();
    set_has_map_type();
    value_.map_type_ = CreateMaybeMessage< ::onnx::TypeProto_Map >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.map_type)
  return value_.map_type_;
}

// .onnx.TypeProto.Optional optional_type = 9;
inline bool TypeProto::has_optional_type() const {
  return value_case() == kOptionalType;
}
inline void TypeProto::set_has_optional_type() {
  _oneof_case_[0] = kOptionalType;
}
inline void TypeProto::clear_optional_type() {
  if (has_optional_type()) {
    delete value_.optional_type_;
    clear_has_value();
  }
}
inline const ::onnx::TypeProto_Optional& TypeProto::_internal_optional_type() const {
  return *value_.optional_type_;
}
inline ::onnx::TypeProto_Optional* TypeProto::release_optional_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.optional_type)
  if (has_optional_type()) {
    clear_has_value();
      ::onnx::TypeProto_Optional* temp = value_.optional_type_;
    value_.optional_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::onnx::TypeProto_Optional& TypeProto::optional_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.optional_type)
  return has_optional_type()
      ? *value_.optional_type_
      : *reinterpret_cast< ::onnx::TypeProto_Optional*>(&::onnx::_TypeProto_Optional_default_instance_);
}
inline ::onnx::TypeProto_Optional* TypeProto::mutable_optional_type() {
  if (!has_optional_type()) {
    clear_value();
    set_has_optional_type();
    value_.optional_type_ = CreateMaybeMessage< ::onnx::TypeProto_Optional >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.optional_type)
  return value_.optional_type_;
}

// .onnx.TypeProto.SparseTensor sparse_tensor_type = 8;
inline bool TypeProto::has_sparse_tensor_type() const {
  return value_case() == kSparseTensorType;
}
inline void TypeProto::set_has_sparse_tensor_type() {
  _oneof_case_[0] = kSparseTensorType;
}
inline void TypeProto::clear_sparse_tensor_type() {
  if (has_sparse_tensor_type()) {
    delete value_.sparse_tensor_type_;
    clear_has_value();
  }
}
inline const ::onnx::TypeProto_SparseTensor& TypeProto::_internal_sparse_tensor_type() const {
  return *value_.sparse_tensor_type_;
}
inline ::onnx::TypeProto_SparseTensor* TypeProto::release_sparse_tensor_type() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.sparse_tensor_type)
  if (has_sparse_tensor_type()) {
    clear_has_value();
      ::onnx::TypeProto_SparseTensor* temp = value_.sparse_tensor_type_;
    value_.sparse_tensor_type_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::onnx::TypeProto_SparseTensor& TypeProto::sparse_tensor_type() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.sparse_tensor_type)
  return has_sparse_tensor_type()
      ? *value_.sparse_tensor_type_
      : *reinterpret_cast< ::onnx::TypeProto_SparseTensor*>(&::onnx::_TypeProto_SparseTensor_default_instance_);
}
inline ::onnx::TypeProto_SparseTensor* TypeProto::mutable_sparse_tensor_type() {
  if (!has_sparse_tensor_type()) {
    clear_value();
    set_has_sparse_tensor_type();
    value_.sparse_tensor_type_ = CreateMaybeMessage< ::onnx::TypeProto_SparseTensor >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.sparse_tensor_type)
  return value_.sparse_tensor_type_;
}

// string denotation = 6;
inline void TypeProto::clear_denotation() {
  denotation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TypeProto::denotation() const {
  // @@protoc_insertion_point(field_get:onnx.TypeProto.denotation)
  return denotation_.GetNoArena();
}
inline void TypeProto::set_denotation(const ::std::string& value) {
  
  denotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.TypeProto.denotation)
}
#if LANG_CXX11
inline void TypeProto::set_denotation(::std::string&& value) {
  
  denotation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.TypeProto.denotation)
}
#endif
inline void TypeProto::set_denotation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  denotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.TypeProto.denotation)
}
inline void TypeProto::set_denotation(const char* value, size_t size) {
  
  denotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.TypeProto.denotation)
}
inline ::std::string* TypeProto::mutable_denotation() {
  
  // @@protoc_insertion_point(field_mutable:onnx.TypeProto.denotation)
  return denotation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TypeProto::release_denotation() {
  // @@protoc_insertion_point(field_release:onnx.TypeProto.denotation)
  
  return denotation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TypeProto::set_allocated_denotation(::std::string* denotation) {
  if (denotation != NULL) {
    
  } else {
    
  }
  denotation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), denotation);
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.denotation)
}

inline bool TypeProto::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void TypeProto::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline TypeProto::ValueCase TypeProto::value_case() const {
  return TypeProto::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OperatorSetIdProto

// string domain = 1;
inline void OperatorSetIdProto::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperatorSetIdProto::domain() const {
  // @@protoc_insertion_point(field_get:onnx.OperatorSetIdProto.domain)
  return domain_.GetNoArena();
}
inline void OperatorSetIdProto::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.OperatorSetIdProto.domain)
}
#if LANG_CXX11
inline void OperatorSetIdProto::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.OperatorSetIdProto.domain)
}
#endif
inline void OperatorSetIdProto::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.OperatorSetIdProto.domain)
}
inline void OperatorSetIdProto::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.OperatorSetIdProto.domain)
}
inline ::std::string* OperatorSetIdProto::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:onnx.OperatorSetIdProto.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperatorSetIdProto::release_domain() {
  // @@protoc_insertion_point(field_release:onnx.OperatorSetIdProto.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatorSetIdProto::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:onnx.OperatorSetIdProto.domain)
}

// int64 version = 2;
inline void OperatorSetIdProto::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 OperatorSetIdProto::version() const {
  // @@protoc_insertion_point(field_get:onnx.OperatorSetIdProto.version)
  return version_;
}
inline void OperatorSetIdProto::set_version(::google::protobuf::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:onnx.OperatorSetIdProto.version)
}

// -------------------------------------------------------------------

// FunctionProto

// string name = 1;
inline void FunctionProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FunctionProto::name() const {
  // @@protoc_insertion_point(field_get:onnx.FunctionProto.name)
  return name_.GetNoArena();
}
inline void FunctionProto::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.FunctionProto.name)
}
#if LANG_CXX11
inline void FunctionProto::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.FunctionProto.name)
}
#endif
inline void FunctionProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.FunctionProto.name)
}
inline void FunctionProto::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.FunctionProto.name)
}
inline ::std::string* FunctionProto::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:onnx.FunctionProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FunctionProto::release_name() {
  // @@protoc_insertion_point(field_release:onnx.FunctionProto.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FunctionProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:onnx.FunctionProto.name)
}

// repeated string input = 4;
inline int FunctionProto::input_size() const {
  return input_.size();
}
inline void FunctionProto::clear_input() {
  input_.Clear();
}
inline const ::std::string& FunctionProto::input(int index) const {
  // @@protoc_insertion_point(field_get:onnx.FunctionProto.input)
  return input_.Get(index);
}
inline ::std::string* FunctionProto::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.FunctionProto.input)
  return input_.Mutable(index);
}
inline void FunctionProto::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.FunctionProto.input)
  input_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FunctionProto::set_input(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:onnx.FunctionProto.input)
  input_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FunctionProto::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.FunctionProto.input)
}
inline void FunctionProto::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.FunctionProto.input)
}
inline ::std::string* FunctionProto::add_input() {
  // @@protoc_insertion_point(field_add_mutable:onnx.FunctionProto.input)
  return input_.Add();
}
inline void FunctionProto::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.FunctionProto.input)
}
#if LANG_CXX11
inline void FunctionProto::add_input(::std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onnx.FunctionProto.input)
}
#endif
inline void FunctionProto::add_input(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.FunctionProto.input)
}
inline void FunctionProto::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.FunctionProto.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FunctionProto::input() const {
  // @@protoc_insertion_point(field_list:onnx.FunctionProto.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FunctionProto::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:onnx.FunctionProto.input)
  return &input_;
}

// repeated string output = 5;
inline int FunctionProto::output_size() const {
  return output_.size();
}
inline void FunctionProto::clear_output() {
  output_.Clear();
}
inline const ::std::string& FunctionProto::output(int index) const {
  // @@protoc_insertion_point(field_get:onnx.FunctionProto.output)
  return output_.Get(index);
}
inline ::std::string* FunctionProto::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.FunctionProto.output)
  return output_.Mutable(index);
}
inline void FunctionProto::set_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.FunctionProto.output)
  output_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FunctionProto::set_output(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:onnx.FunctionProto.output)
  output_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FunctionProto::set_output(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.FunctionProto.output)
}
inline void FunctionProto::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.FunctionProto.output)
}
inline ::std::string* FunctionProto::add_output() {
  // @@protoc_insertion_point(field_add_mutable:onnx.FunctionProto.output)
  return output_.Add();
}
inline void FunctionProto::add_output(const ::std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.FunctionProto.output)
}
#if LANG_CXX11
inline void FunctionProto::add_output(::std::string&& value) {
  output_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onnx.FunctionProto.output)
}
#endif
inline void FunctionProto::add_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.FunctionProto.output)
}
inline void FunctionProto::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.FunctionProto.output)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FunctionProto::output() const {
  // @@protoc_insertion_point(field_list:onnx.FunctionProto.output)
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FunctionProto::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:onnx.FunctionProto.output)
  return &output_;
}

// repeated string attribute = 6;
inline int FunctionProto::attribute_size() const {
  return attribute_.size();
}
inline void FunctionProto::clear_attribute() {
  attribute_.Clear();
}
inline const ::std::string& FunctionProto::attribute(int index) const {
  // @@protoc_insertion_point(field_get:onnx.FunctionProto.attribute)
  return attribute_.Get(index);
}
inline ::std::string* FunctionProto::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.FunctionProto.attribute)
  return attribute_.Mutable(index);
}
inline void FunctionProto::set_attribute(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:onnx.FunctionProto.attribute)
  attribute_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FunctionProto::set_attribute(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:onnx.FunctionProto.attribute)
  attribute_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FunctionProto::set_attribute(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  attribute_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onnx.FunctionProto.attribute)
}
inline void FunctionProto::set_attribute(int index, const char* value, size_t size) {
  attribute_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onnx.FunctionProto.attribute)
}
inline ::std::string* FunctionProto::add_attribute() {
  // @@protoc_insertion_point(field_add_mutable:onnx.FunctionProto.attribute)
  return attribute_.Add();
}
inline void FunctionProto::add_attribute(const ::std::string& value) {
  attribute_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onnx.FunctionProto.attribute)
}
#if LANG_CXX11
inline void FunctionProto::add_attribute(::std::string&& value) {
  attribute_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onnx.FunctionProto.attribute)
}
#endif
inline void FunctionProto::add_attribute(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  attribute_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onnx.FunctionProto.attribute)
}
inline void FunctionProto::add_attribute(const char* value, size_t size) {
  attribute_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onnx.FunctionProto.attribute)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FunctionProto::attribute() const {
  // @@protoc_insertion_point(field_list:onnx.FunctionProto.attribute)
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FunctionProto::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:onnx.FunctionProto.attribute)
  return &attribute_;
}

// repeated .onnx.AttributeProto attribute_proto = 11;
inline int FunctionProto::attribute_proto_size() const {
  return attribute_proto_.size();
}
inline void FunctionProto::clear_attribute_proto() {
  attribute_proto_.Clear();
}
inline ::onnx::AttributeProto* FunctionProto::mutable_attribute_proto(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.FunctionProto.attribute_proto)
  return attribute_proto_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >*
FunctionProto::mutable_attribute_proto() {
  // @@protoc_insertion_point(field_mutable_list:onnx.FunctionProto.attribute_proto)
  return &attribute_proto_;
}
inline const ::onnx::AttributeProto& FunctionProto::attribute_proto(int index) const {
  // @@protoc_insertion_point(field_get:onnx.FunctionProto.attribute_proto)
  return attribute_proto_.Get(index);
}
inline ::onnx::AttributeProto* FunctionProto::add_attribute_proto() {
  // @@protoc_insertion_point(field_add:onnx.FunctionProto.attribute_proto)
  return attribute_proto_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::AttributeProto >&
FunctionProto::attribute_proto() const {
  // @@protoc_insertion_point(field_list:onnx.FunctionProto.attribute_proto)
  return attribute_proto_;
}

// repeated .onnx.NodeProto node = 7;
inline int FunctionProto::node_size() const {
  return node_.size();
}
inline void FunctionProto::clear_node() {
  node_.Clear();
}
inline ::onnx::NodeProto* FunctionProto::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.FunctionProto.node)
  return node_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >*
FunctionProto::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:onnx.FunctionProto.node)
  return &node_;
}
inline const ::onnx::NodeProto& FunctionProto::node(int index) const {
  // @@protoc_insertion_point(field_get:onnx.FunctionProto.node)
  return node_.Get(index);
}
inline ::onnx::NodeProto* FunctionProto::add_node() {
  // @@protoc_insertion_point(field_add:onnx.FunctionProto.node)
  return node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::NodeProto >&
FunctionProto::node() const {
  // @@protoc_insertion_point(field_list:onnx.FunctionProto.node)
  return node_;
}

// string doc_string = 8;
inline void FunctionProto::clear_doc_string() {
  doc_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FunctionProto::doc_string() const {
  // @@protoc_insertion_point(field_get:onnx.FunctionProto.doc_string)
  return doc_string_.GetNoArena();
}
inline void FunctionProto::set_doc_string(const ::std::string& value) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.FunctionProto.doc_string)
}
#if LANG_CXX11
inline void FunctionProto::set_doc_string(::std::string&& value) {
  
  doc_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.FunctionProto.doc_string)
}
#endif
inline void FunctionProto::set_doc_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.FunctionProto.doc_string)
}
inline void FunctionProto::set_doc_string(const char* value, size_t size) {
  
  doc_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.FunctionProto.doc_string)
}
inline ::std::string* FunctionProto::mutable_doc_string() {
  
  // @@protoc_insertion_point(field_mutable:onnx.FunctionProto.doc_string)
  return doc_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FunctionProto::release_doc_string() {
  // @@protoc_insertion_point(field_release:onnx.FunctionProto.doc_string)
  
  return doc_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FunctionProto::set_allocated_doc_string(::std::string* doc_string) {
  if (doc_string != NULL) {
    
  } else {
    
  }
  doc_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), doc_string);
  // @@protoc_insertion_point(field_set_allocated:onnx.FunctionProto.doc_string)
}

// repeated .onnx.OperatorSetIdProto opset_import = 9;
inline int FunctionProto::opset_import_size() const {
  return opset_import_.size();
}
inline void FunctionProto::clear_opset_import() {
  opset_import_.Clear();
}
inline ::onnx::OperatorSetIdProto* FunctionProto::mutable_opset_import(int index) {
  // @@protoc_insertion_point(field_mutable:onnx.FunctionProto.opset_import)
  return opset_import_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto >*
FunctionProto::mutable_opset_import() {
  // @@protoc_insertion_point(field_mutable_list:onnx.FunctionProto.opset_import)
  return &opset_import_;
}
inline const ::onnx::OperatorSetIdProto& FunctionProto::opset_import(int index) const {
  // @@protoc_insertion_point(field_get:onnx.FunctionProto.opset_import)
  return opset_import_.Get(index);
}
inline ::onnx::OperatorSetIdProto* FunctionProto::add_opset_import() {
  // @@protoc_insertion_point(field_add:onnx.FunctionProto.opset_import)
  return opset_import_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::onnx::OperatorSetIdProto >&
FunctionProto::opset_import() const {
  // @@protoc_insertion_point(field_list:onnx.FunctionProto.opset_import)
  return opset_import_;
}

// string domain = 10;
inline void FunctionProto::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FunctionProto::domain() const {
  // @@protoc_insertion_point(field_get:onnx.FunctionProto.domain)
  return domain_.GetNoArena();
}
inline void FunctionProto::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:onnx.FunctionProto.domain)
}
#if LANG_CXX11
inline void FunctionProto::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:onnx.FunctionProto.domain)
}
#endif
inline void FunctionProto::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:onnx.FunctionProto.domain)
}
inline void FunctionProto::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:onnx.FunctionProto.domain)
}
inline ::std::string* FunctionProto::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:onnx.FunctionProto.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FunctionProto::release_domain() {
  // @@protoc_insertion_point(field_release:onnx.FunctionProto.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FunctionProto::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:onnx.FunctionProto.domain)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace onnx

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::onnx::AttributeProto_AttributeType> : ::std::true_type {};
template <> struct is_proto_enum< ::onnx::TensorProto_DataType> : ::std::true_type {};
template <> struct is_proto_enum< ::onnx::TensorProto_DataLocation> : ::std::true_type {};
template <> struct is_proto_enum< ::onnx::Version> : ::std::true_type {};
template <> struct is_proto_enum< ::onnx::OperatorStatus> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_onnx_2eproto3