#include "../../../config.h"
//#include "../src/hypro/util/Plotter.h"
#include "../../../representations/GeometricObjectBase.h"

#include <carl/interval/Interval.h>
#include <sys/time.h>

typedef int Number;

int main() {
	typedef double Number;

	hypro::vector_t<Number> center1 = hypro::vector_t<Number>( 100 );
	center1 << -78, -40, -39, -8, 50, 16, 7, 1, 72, -31, -11, 35, -69, 8, 71, -92, 48, 98, -4, -91, 92,
		  32, 66, 37, -78, -23, -4, 15, -75, -28, 75, 57, -87, 98, -43, -62, -35, -35, -77, 15, 86, 94, 0,
		  3, 30, -9, -55, 59, -97, -37, -69, 50, -50, 39, -56, 13, -94, 85, 82, 8, -86, -90, -3, -78, -17,
		  -72, 89, -64, 66, 73, -35, -100, -77, 12, 62, -54, -43, 73, 74, -25, 25, 53, 8, -100, -95, 96, 9, 56,
		  -19, 61, -32, -7, 4, 63, 91, -92, -63, -14, 4, 63;
	hypro::vector_t<Number> center2 = hypro::vector_t<Number>( 100 );
	center2 << -97, -40, -46, -39, -73, 48, -35, 49, 29, -24, -99, -42, -90, -76, 10, 32, 6, -64,
		  11, -52, 18, 97, -23, -53, -3, 30, -36, 40, 12, 28, 31, -74, 45, -86, -30, -46, -48, -32, 28,
		  -71, 45, -5, -84, 12, -85, 20, -88, -15, -57, -44, 32, 46, 41, -17, 6, 77, 57, 63, -12, 64, -52,
		  60, 22, 16, 11, -29, 45, 79, 87, 60, 12, -16, -71, 70, -89, -62, -99, 97, 21, 55, -58, 36, -10, -47,
		  35, -84, 36, -100, 83, 92, -58, 4, 29, 45, 32, 20, -41, -16, -58, -99;

	hypro::vector_t<Number> center3 = hypro::vector_t<Number>( 100 );
	center3 << -101, 513, 330, -935, -290, 988, -937, -226, -407, 432, 721, 103, -375, -628,
		  -370, -24, -965, 264, 509, 70, -363, 228, -307, -119, 924, 292, -604, 665, -516, -662,
		  191, 232, 395, 340, 732, 270, 733, -785, -998, -860, -174, -786, -696, 873, -958, -793,
		  -861, -961, -929, -241, 330, -111, 77, 347, 873, 325, -237, -225, 381, -594, 31, 84, -74,
		  397, -973, 552, -879, 248, 29, 617, 168, 348, -870, -562, -830, -902, -11, 749, 185, 902,
		  -407, -838, 674, -237, 781, 270, 0, 843, -449, -839, -779, 773, 908, -172, 374, 721, -709,
		  10, 14, 903;

	hypro::vector_t<Number> dist = hypro::vector_t<Number>( 100 );
	dist << 484, -499, 915, -726, -766, 299, 593, 393, -579, 227, 971, 602, -138, 215, 300, -357,
		  614, -462, -556, 142, 645, -994, -657, 971, -958, 845, 79, -118, -307, 829, -320, 663,
		  -152, -16, 265, 158, -732, -963, 983, 343, -1, -557, -429, 96, 774, 138, -900, -973, -362,
		  503, -787, -207, -628, -659, 448, -55, -398, -606, 214, 223, 412, -458, -419, -442, 875,
		  382, 318, -258, 793, 210, -139, 332, -846, 76, -750, 193, -584, -980, -890, 727, -334, 191,
		  972, 233, -282, -828, 734, 895, 382, 201, -747, -260, 948, 279, -231, -540, 239, -492, 724, 233;

	hypro::matrix_t<Number> generators1 = hypro::matrix_t<Number>( 100, 10 );
	generators1 << -46, -68, -12, -43, -1, 74, 65, 51, -38, 78,
		  -85, -37, -65, -50, -20, -24, 2, 1, 89, 58,
		  71, 73, 29, -31, 95, 50, -8, 74, 32, -3,
		  -78, -95, -76, 91, 6, -75, -23, -89, 60, -53,
		  -68, -62, 58, -14, -69, 9, 42, 36, -37, -6,
		  55, 28, 39, -68, 95, 57, -60, -85, 20, 4,
		  -32, 21, 56, 42, -4, 28, 24, -56, -75, -51,
		  30, -45, -45, -97, 14, 84, 56, -25, -6, -94,
		  95, 70, -23, -88, 66, 17, -18, 9, 74, 18,
		  52, 11, -95, 73, 0, 77, -73, -80, -93, 4,
		  -42, -60, -2, -61, 62, -93, 16, 18, -46, 74,
		  5, -8, -15, -55, -61, -24, 16, 62, 38, -8,
		  -21, -52, 12, -78, 94, 66, -24, 34, -33, -82,
		  -8, 43, -18, 63, 43, -100, -37, 45, 76, -39,
		  68, 45, 17, 97, 83, 94, -57, -48, -87, 5,
		  32, 6, -32, -57, 73, 69, 73, 66, -20, 67,
		  -20, 98, -17, 80, -87, -11, -82, -11, -72, -53,
		  -26, -29, -40, -66, -33, -44, 30, -65, 59, 33,
		  7, 23, 84, 64, 46, -48, -63, 27, -13, 35,
		  58, -94, 90, -49, -79, -18, 49, -52, -34, -46,
		  -17, 47, 76, 46, 87, -38, 1, -5, -49, 35,
		  93, 70, -37, -74, -90, 67, -96, 21, -66, 24,
		  90, 26, 90, -15, -32, -67, -81, -63, -38, -57,
		  -55, -37, -1, 3, -60, -91, 60, 82, -22, -100,
		  -64, 33, -37, -65, 4, 99, -32, -37, -42, 3,
		  -91, 67, 55, -74, -88, -74, -37, 90, 68, 48,
		  3, -42, 50, -1, -20, 57, 32, 81, 64, 64,
		  -78, -3, -97, -2, 78, 80, -22, -28, 57, 91,
		  -15, 57, 66, 38, 64, -4, 9, -49, 55, 54,
		  -55, -9, 51, 85, 46, 0, -24, -98, -35, -45,
		  63, 8, -41, -32, 79, -62, 14, -46, 13, -8,
		  -22, 42, -91, -3, 2, -42, 47, 4, 7, -15,
		  -67, -8, 43, 70, -58, 30, -54, -97, -42, 84,
		  -50, 72, 60, -39, -50, 53, -75, -100, -35, 53,
		  -16, -89, 92, 84, 0, -13, -88, -38, -19, -100,
		  49, -36, 57, 55, 46, 26, 77, -68, -29, -52,
		  -51, -15, -80, -95, -44, 69, -6, -14, -100, 32,
		  68, 20, -1, -60, -71, 58, 96, 90, 74, 8,
		  67, 59, 41, 63, 76, 93, -89, 35, 4, -89,
		  -9, 66, 55, -72, 16, -43, -13, -52, -1, -17,
		  -57, 97, -29, -86, 4, -31, 13, 92, -17, -76,
		  75, 34, 50, -78, -17, -37, -63, 19, 43, 39,
		  0, -47, 76, 99, -24, -65, 78, 42, -6, -95,
		  -68, -79, -1, 50, 92, -62, 44, 3, -6, 29,
		  56, 46, -73, 10, 91, -70, -33, 21, 34, -82,
		  46, 31, -96, -46, -27, 70, -80, -51, -5, -95,
		  -98, -9, -17, -80, 40, 40, -11, -30, 10, -33,
		  24, -70, 3, 56, -8, 40, 29, -21, 37, -38,
		  -85, 93, -27, 29, 7, -95, 79, 42, 35, 47,
		  21, 60, 44, 1, -3, 26, 20, -42, 46, -94,
		  -72, -13, -88, 74, 71, 83, -50, 22, -11, -31,
		  -27, 3, 34, 29, 98, -19, 93, 25, 25, -78,
		  -74, -98, 7, -13, 35, -78, -65, -42, 53, 59,
		  89, -73, -12, 25, -51, -52, 43, -94, 22, 61,
		  -41, 38, 1, -37, 32, -64, -52, 98, -1, 99,
		  -21, -70, -65, -95, 7, -56, -6, 86, -18, -74,
		  -97, 43, -95, -25, -6, 11, 59, -56, 52, -38,
		  13, 2, -9, 20, -62, 89, 97, 49, -44, -26,
		  3, -81, -63, -22, 46, 96, 33, 70, -32, 98,
		  80, 12, 18, -68, -59, -95, 67, -81, 94, 65,
		  86, -51, 56, -83, 29, -73, 17, 87, -68, 47,
		  7, 53, -43, -99, 4, -16, -49, -71, -97, 95,
		  41, 66, 69, 40, 78, -84, -9, -26, 71, 18,
		  69, -57, 16, 55, 74, -83, -3, 68, 45, 36,
		  -83, -18, -43, -24, -99, 41, 74, 90, 71, 76,
		  -7, -23, 21, -15, 70, 44, -94, 98, 44, 43,
		  72, 49, 14, 29, 73, -90, 1, 58, -75, 93,
		  -17, -3, -91, 94, -34, 96, 0, 64, -40, 59,
		  -44, -41, -5, 43, 11, 47, -83, 25, -85, 72,
		  61, 10, -67, -37, -46, 30, -57, -84, -75, 64,
		  -61, -76, 75, 56, -42, -60, 95, 93, 71, -47,
		  61, 67, 96, 46, 93, 67, 6, -26, -35, -45,
		  72, -48, -80, -31, -72, 19, -90, -100, 98, 80,
		  -1, -47, -13, -64, 37, -99, 80, 51, -45, -59,
		  -7, 39, -1, 3, -3, 10, 1, 9, -91, 52,
		  -10, -30, 5, 72, 94, 3, 3, -87, 55, 60,
		  -49, -66, -3, 45, 58, 53, 74, 68, 68, -85,
		  71, -41, -25, 88, 63, 33, 3, -20, -40, 22,
		  8, -33, -23, 60, 49, 86, -78, -84, -11, -64,
		  24, 72, 100, 37, -77, 18, 20, 59, -3, 67,
		  -3, -6, -93, -95, 43, 61, -32, -26, 60, -62,
		  -23, -90, 4, -3, 67, 17, -72, 96, 15, -10,
		  -37, -9, 88, 38, -80, 2, 3, 74, -94, 83,
		  49, -2, 55, 58, -73, -38, 42, -48, -96, 31,
		  86, -30, -72, -77, -90, -78, 58, -90, 82, -28,
		  -34, 63, -51, -59, 88, -55, 29, 38, -6, -74,
		  -19, -20, -72, 24, 88, -90, -10, 6, -35, -61,
		  -32, -96, 58, -90, -56, 34, -25, 77, 81, -82,
		  -38, 62, -49, -15, 73, 7, -40, 71, -48, -50,
		  68, -91, -24, -31, -44, -87, -46, -10, -78, -34,
		  -91, -77, -63, -94, -39, -63, 100, 13, 89, -94,
		  -1, -71, -65, -9, -99, -18, 15, -67, 60, 69,
		  -92, -79, 52, 52, 2, 38, 13, -22, 42, -69,
		  -23, -55, 5, 9, 0, -63, 92, -19, -22, 85,
		  97, -24, -51, -32, 81, 55, 35, -28, -4, 43,
		  27, 30, -21, 74, -98, -49, -65, -94, 6, -2,
		  -7, -79, -48, -82, 46, -28, -17, 54, -49, -96,
		  57, -67, -70, -14, -91, 73, 29, 88, 22, 86,
		  -31, -85, -88, 29, -2, 90, 42, 91, 88, -53,
		  10, 62, 0, -84, 57, -53, -100, 20, 21, 1;

	hypro::matrix_t<Number> generators2 = hypro::matrix_t<Number>( 100, 10 );
	generators2 << -24, 74, -13, -25, -97, 8, 44, -45, -30, 86,
		  -8, -62, 82, 25, 29, -50, 84, -42, -62, -90,
		  -39, 99, 74, 58, -11, 89, 58, -29, -28, 23,
		  84, 62, 89, -47, -18, -49, -36, -51, -68, -41,
		  60, -42, -5, -24, 12, -68, 73, -63, -53, -34,
		  34, 43, -21, -9, -73, 22, 100, -45, -33, 92,
		  -49, -42, -27, -52, -62, 91, -22, -91, 7, -97,
		  92, 67, -55, 65, -55, -20, 18, 52, 11, 30,
		  -18, -48, 98, 75, 62, -77, 79, 18, -87, -8,
		  3, -90, -69, 27, -21, 67, -73, -85, 33, -40,
		  -60, 6, -41, 77, -11, 34, -68, -3, -22, -51,
		  37, -69, 16, 34, 59, -34, 40, 38, -47, -88,
		  64, -64, 47, -13, -18, 63, 55, -39, 69, -38,
		  74, -26, -32, -19, 23, 2, -65, 0, 55, -20,
		  29, -9, -17, 6, 23, -45, 33, 22, 72, -74,
		  -70, -84, -25, 23, 91, 54, -7, 0, -89, 60,
		  37, 18, -44, 20, -37, 85, -8, 54, -8, 77,
		  97, -36, 10, -42, -93, -93, 17, 95, -13, 98,
		  17, -91, -56, -86, 69, -29, 53, 48, 74, -96,
		  96, 27, 37, -76, -41, 31, 40, -47, -47, 31,
		  -65, -53, -84, -6, -19, -69, 28, -50, -41, 71,
		  45, -64, -36, 12, -93, -82, -33, 57, -50, 95,
		  30, -9, 38, -56, 23, -53, 73, 68, -12, 58,
		  -18, -96, -53, -23, 60, 44, -37, 54, -32, 21,
		  -44, -93, 82, 78, -22, -48, 66, -27, 7, -90,
		  44, -92, -70, 39, -98, 89, -28, 3, -17, 74,
		  -77, 100, -22, -17, 22, 92, -81, -11, 33, -6,
		  96, -71, -3, -53, 40, -63, 47, -91, -59, 16,
		  -21, -79, -80, 91, 55, -67, -57 - 100, -88, -75,
		  -4, 86, 1, -8, -1, -82, 10, 86, 91, -29,
		  34, -64, 2, 14, -75, 38, -56, -47, -71, -85,
		  72, -36, 6, 27, -64, 94, 64, -26, 26, -79,
		  95, 25, -69, -43, -57, 37, 23, 22, 61, 89,
		  7, -44, -53, 68, 41, 95, 9, 96, -84, -54,
		  66, 91, 24, -67, 74, -35, -7, 16, -62, 40,
		  75, -65, -38, 4, -79, 17, -39, 9, 73, 94,
		  77, -95, -58, 86, -36, -61, 89, -6, 48, -14,
		  74, 33, -44, 40, 76, 82, -8, 14, -56, 81,
		  -66, -80, 9, 98, -80, -2, -70, 60, -69, 67,
		  38, 58, 44, -43, 20, -92, 22, -48, -98, 70,
		  36, 75, -93, 41, -40, -59, -8, 37, 38, -8,
		  -24, 27, 30, -53, 0, -74, 0, -40, -38, 33,
		  52, 98, 60, 15, -43, -3, -13, 40, 41, 34,
		  15, 50, 79, 51, 2, -86, -46, -53, 0, -78,
		  -56, -57, -16, -61, 55, -70, 26, 93, 5, 13,
		  -54, -28, 23, 31, -51, -54, 71, 41, 56, -65,
		  37, 46, 71, -69, 100, 29, -83, -64, 68, 38,
		  94, -50, 28, 68, 36, -61, 50, 96, -3, -31,
		  25, 31, -8, 76, 8, 46, 53, 88, 98, 17,
		  43, 50, -62, 10, -23, 12, 71, 78, 40, -87,
		  -67, -10, -39, 45, 60, -36, 50, -69, -62, 50,
		  41, -46, 9, 4, 68, 24, 60, -9, 71, -95,
		  -31, -26, -59, 67, 81, 50, 52, -31, -67, 6,
		  -3, 19, -30, -43, -90, 49, -76, -40, 25, 33,
		  41, 9, 42, 73, -40, -88, 6, -92, 89, 82,
		  -41, -79, 89, 33, 55, 31, 35, -7, 41, -85,
		  70, -51, 63, -9, -7, 41, 100, -65, -14, -68,
		  -79, 45, 10, 6, -50, 46, 66, 5, -57, 62,
		  9, 64, 86, 76, 34, 80, 45, 43, -66, -94,
		  -56, -74, 66, -53, -1, 56, -65, -28, 41, 31,
		  -65, 52, 28, 81, -66, 8, 100, -39, 19, -55,
		  28, 67, 52, -20, -15, 3, 42, 85, 8, -97,
		  -59, -72, 59, -95, 78, 97, -59 - 100, -94, 42,
		  -95, -72, 68, -94, -18, -37, -95, 42, 41, -8,
		  -82, -2, -54, 22, -63, 53, -76, 6, 51, 55,
		  -53, 66, -5, -32, 35, -28, 94, -91, 47, -41,
		  -99, -14, 70, -78, 27, 55 - 100, -46, -93, 40,
		  -37, -6, -75, 64, -40, 68, 58, -97, 69, 54,
		  94, 54, 58, 59, 77, 87, -14, -79, 70, 16,
		  -10, 9, 1, -52, -12, 77, 37, -8, 54, 11,
		  -62, -53, 62, -99, 99, -38, 5, 60, -48, 18,
		  -6, 19, 94, 55, -40, 31, -66, 96, -25, 14,
		  85, -57, -48, -38, 86, -32, -87, 7, 16, -36,
		  -29, 41, -43, -32, -45, 29, 84, -23, -93, 8,
		  72, 39, -42, -2, -38, 0, 75, 78, -80, 91,
		  20, 57, 92, -30, -92, 33, 0, 26, 23, -79,
		  7, -57, -37, 20, -13, -92, -91, 23, 65, -47,
		  -10, -26, 7, -36, 57, -72, 41, 48, 14, -30,
		  -77, 75, -56, -44, 25, 79, -90, -22, -72, 94,
		  -24, -59, -68, -96, -100, 80, -76, -84, 47, -18,
		  -83, -73, -33, -7, 72, 53, 67, -64, 40, 85,
		  -8, 85, 25, 70, -78, 21, -22, -15, 98, 35,
		  -49, 73, 84, -79, 62, 100, -5, 13, -96, 13,
		  59, 82, -18, 86, -71, 27, 68, -79, 69, -15,
		  -31, 83, -94, -87, -89, 64, -74, -3, 46, 81,
		  -89, 86, -16, 65, -89, 78, -28, -6, 89, 69,
		  80, -72, 72, -97, 44, 15, -9, 51, 67, -7,
		  99, -98, -81, 45, 76, -70, -66, 52, -86, 58,
		  64, -95, 74, -20, 74, 38, -26, -13, -96, -39,
		  25, -78, 37, -33, -33, 36, 60, -49, 95, 61,
		  29, -100, -51, -23, 31, 7, -65, -43, -9, -49,
		  -54, -99, -7, -98, -69, 91, 21, -1, 0, 92,
		  94, 24, 59, -15, 40, 90, -10, 38, -21, -21,
		  73, -64, -49, 57, -59, -33, 99, 8, -66, 31,
		  63, -54, -17, 57, -42, 73, -82, 65, 57, 46,
		  -35, -86, 89, 74, 17, 27, 95, 5, -32, 65,
		  -12, -10, -38, -55, -5, -8, -84, 89, 9, 28,
		  54, -39, -99, 6, -85, -38, 71, -74, 11, 100,
		  33, -13, 1, 69, 47, -100, -12, -43, -59, 5,
		  10, -32, 1, -68, 92, 54, 65, -91, 19, -60;

	hypro::matrix_t<Number> generators3 = hypro::matrix_t<Number>( 100, 10 );
	generators3 << 508, 251, -562, -406, 851, -88, 161, 328, -488, 349,
		  -214, -746, 184, 798, -399, -497, 320, -284, 351, 46,
		  478, -863, 626, 40, -592, 989, 309, 32, -254, 532,
		  -373, -692, 348, -918, -903, -385, -398, 345, -351, 46,
		  -329, 529, -11, 140, -31, 835, 424, 179, 304, -135,
		  260, 148, 235, -776, 298, -384, 0, 655, 895, 721,
		  713, -957, -492, -259, -534, -895, -512, -532, 612, 467,
		  -895, -484, 776, 276, 674, -768, 867, -90, 502, -216,
		  311, -569, 481, -654, -406, -26, -814, -134, 689, -513,
		  59, 111, -764, 192, 766, 342, -398, -608, 225, -723,
		  -424, 619, 67, -173, -262, 977, -156, -769, 613, 876,
		  524, 342, -986, 886, 474, 989, -324, -664, 158, -847,
		  -649, 96, -589, -722, 964, 966, 572, -274, -700, -719,
		  992, -696, 827, -485, -859, 263, -648, 845, -559, 262,
		  196, 487, 218, -562, 115, 200, 443, -823, 613, -840,
		  532, 98, 112, -460, 78, -619, -286, 210, 942, -750,
		  194, -581, 731, 337, -921, 439, -622, -245, -385, 746,
		  -404, 350, -115, 327, -700, -766, -195, 272, -861, -499,
		  840, -845, -379, -5, 120, -835, -286, 210, -633, -295,
		  250, 244, 114, 746, 87, 645, 337, -822, 156, 35,
		  -443, 802, 865, -923, -2, -546, -181, -136, 678, -475,
		  111, 578, -317, 661, 285, 690, -982, 732, -226, 0,
		  41, 657, 565, -485, 981, -785, -589, 367, -842, -892,
		  257, 653, 417, -37, 269, 997, 196, 509, 273, 942,
		  224, -335, -967, -834, 90, 777, -280, 569, -832, 209,
		  -296, -975, -536, -780, -210, 284, -30, 227, 549, 66,
		  -671, -439, -781, 228, -984, 294, -352, 593, -508, -345,
		  537, -896, 222, -292, 35, 786, 962, 941, -285, -152,
		  -628, 283, 116, -852, 14, 721, -140, 339, 13, -668,
		  864, 334, -684, 919, 478, 810, -113, -702, 756, -924,
		  -748, 732, -304, 466, 392, 632, 815, -344, -446, 410,
		  88, 327, -872, -92, 497, -929, 247, -924, 563, -115,
		  856, 658, 587, -144, 365, -587, 298, 252, 717, 785,
		  -426, 15, 934, -511, -592, -186, 515, -551, 917, -932,
		  -118, 791, 852, 122, 92, 369, -854, 220, -422, 522,
		  867, -17, 660, 137, -703, 187, 737, -912, 295, -101,
		  -489, -572, -731, 188, -305, -539, -779, 956, -342, -946,
		  -134, -693, -700, -543, -583, -301, -398, -609, -134, -478,
		  -437, 80, -721, 938, 381, -676, 353, 624, -378, 501,
		  492, 268, 288, -104, 252, -434, -451, 258, 906, 926,
		  708, -551, 216, -551, -159, -840, 751, 735, 242, -824,
		  656, -954, 1, -561, 486, -10, -233, -630, 607, -66,
		  -770, 312, 255, 791, 479, -948, -752, 408, 358, 525,
		  691, 461, 519, 891, 87, -770, -817, -674, 980, -111,
		  280, -281, 961, -330, 296, -747, -343, -741, -913, -110,
		  894, -853, -822, 418, -945, 933, -989, -480, 506, -649,
		  -395, 394, 243, 367, -467, 369, 977, 978, 993, 686,
		  766, -100, 312, 732, 427, -778, -646, 823, -636, 717,
		  -84, -593, -583, -918, -92, -615, 762, 411, -246, 300,
		  774, 987, 874, -125, 33, 846, -461, -855, 5, 468,
		  -616, -163, -170, -401, 382, 932, 663, -360, 770, 899,
		  911, -941, -611, 481, -767, 575, 872, 610, -107, 943,
		  874, -778, 701, 255, -77, 540, -33, -309, 953, -83,
		  -720, 284, -497, 798, -912, 982, -279, 286, -671, -477,
		  181, -762, 557, 569, 192, -227, 965, 897, 528, 283,
		  673, 773, 986, -65, -804, 977, -420, -504, 892, 565,
		  -387, -970, 574, -686, 558, -912, 811, 427, -804, -664,
		  843, -99, -774, 933, -835, -861, 874, -901, 615, -368,
		  209, -992, 549, -905, 829, 304, 400, 816, -998, 985,
		  154, -692, 322, 569, 529, -311, 574, -49, -294, -493,
		  374, -971, -409, 632, -115, 682, -58, 475, -228, 488,
		  643, 3, -396, 616, -115, 992, 619, 665, -223, -916,
		  -799, 936, 954, -281, 392, -912, 944, -567, 506, -6,
		  -587, -907, -549, 977, 270, 167, -172, -900, 421, 946,
		  31, 110, 992, -867, -432, -883, 461, -412, -496, -521,
		  -335, -754, -993, -736, -862, 4, 948, -264, -33, -846,
		  -535, 39, 348, -897, 222, -255, 192, 761, -512, 683,
		  -241, 573, -806, -425, 526, -875, -147, 189, 79, -83,
		  685, -356, 990, -927, 7, 997, -462, -125, 307, -425,
		  -311, 519, -834, 242, 905, -668, 689, -754, -715, -648,
		  737, 24, -905, 632, 15, 157, 726, 411, 952, -293,
		  245, -687, -608, 392, 883, -394, -684, 935, -207, 556,
		  9, 571, 902, -504, 291, -545, 828, 118, -297, 954,
		  663, 498, -636, -539, 984, -991, -83, -872, 762, -170,
		  868, 398, -701, 780, -498, -631, 506, 245, 984, 53,
		  532, -515, 311, 385, 422, -359, 306, -87, -465, -28,
		  40, -789, 932, -208, 497, -262, -121, 355, 209, 446,
		  -789, 349, 946, 871, -226, -587, -591, -473, 8, -567,
		  -50, -963, -759, -544, -840, 294, 822, 86, 636, 58,
		  924, -79, 835, -864, 408, -249, -39, -548, -46, 367,
		  -518, 119, -663, 565, -443, 342, -755, -627, -820, -550,
		  -364, -616, -76, -569, -707, 461, 109, -592, -625, -854,
		  -432, 131, 714, 336, -47, -130, 220, -91, -171, 648,
		  -305, -367, 625, -600, 29, -890, -351, -848, 248, 731,
		  976, 131, 0, 847, -582, 511, 831, 992, 344, -889,
		  938, 924, -519, 450, 889, -850, -433, 548, 586, -534,
		  921, 757, -190, 376, -624, 55, 320, 346, -848, -66,
		  627, -287, -560, -698, 513, -20, -429, 858, -216, 16,
		  121, -282, -207, 414, -766, 436, -425, -724, 399, 662,
		  147, 389, -364, 769, 802, -214, 201, -47, -772, 105,
		  -500, -374, 343, -174, -624, 13, -108, 205, -918, 323,
		  807, -959, -60, -268, -824, -455, 778, -799, -166, -868,
		  -647, -64, -960, 500, -473, 708, -550, 10, -462, 473,
		  -280, 173, -820, -337, 788, -874, 992, 441, 967, -649,
		  470, -119, -302, 698, -208, -766, -598, 405, -703, -524,
		  -475, 700, 37, -997, 378, -8, 672, -985, -965, -926,
		  252, 525, 614, 236, 575, 592, -901, -895, -48, 509,
		  35, -691, -973, 453, 231, 223, 509, -437, -161, -653,
		  -37, 744, -298, -431, -698, -847, 816, -889, 319, 359,
		  -540, 448, 884, 61, 620, 48, -12, 169, 367, 295;

	hypro::matrix_t<Number> cC = hypro::matrix_t<Number>( 100, 10 );
	cC << -107, -182, 814, 549, -771, 67, -791, 120, -422, -459,
		  443, -350, -935, 597, 112, 588, 859, 212, 687, -52,
		  -940, 327, 418, -473, 216, -76, 188, -722, -235, 173,
		  -626, 321, -280, -587, -901, 674, 213, 515, -83, -333,
		  -775, -529, 410, -332, 724, 994, -643, 271, 448, 448,
		  800, -963, -55, 613, 464, -844, -512, -662, -723, -763,
		  -162, -198, -762, -769, -85, 175, 952, 213, 548, 553,
		  674, -952, -669, 385, -328, -171, -375, 473, -55, 977,
		  -567, 85, -811, 281, -406, 504, 127, 658, 950, 515,
		  -747, -313, -828, -310, 400, 816, 455, -80, 803, -577,
		  94, -890, 291, -640, 559, -60, -173, 908, 363, 474,
		  -946, -727, 516, -788, 176, 476, -85, -327, -772, -633,
		  -77, 36, 32, -636, 464, -514, -219, -81, 641, -73,
		  -155, 931, -450, 50, -213, 17, -606, -70, -98, -243,
		  675, 415, 462, 100, 363, -40, -978, -111, -198, -521,
		  -971, -624, -478, 160, -814, 642, 52, 561, 591, 132,
		  350, -73, 993, 333, -208, -403, 758, 949, 268, -857,
		  425, 1000, 80, -558, -326, 786, -342, -723, 327, -654,
		  -418, 184, -411, 408, -761, 13, 300, -512, 188, 859,
		  510, 265, 738, 7, -923, -80, 521, 752, 520, -742,
		  -490, 821, 495, -229, -609, -718, 481, -133, 158, -90,
		  -666, -12, 73, 943, -210, 852, 717, 399, 683, -585,
		  -608, 225, -58, -878, -885, 740, -942, -798, -769, 918,
		  217, 285, -841, 875, 501, 759, -260, 445, 997, 145,
		  182, 155, 840, 570, 338, 185, -846, 374, 557, 639,
		  874, 363, -862, 791, -620, 111, -621, -827, -344, -519,
		  557, 671, -810, -885, -234, 59, 662, 99, -975, -319,
		  198, -790, 278, -340, -76, 927, 292, 696, 258, -957,
		  122, -673, 27, 103, 165, 726, 344, -251, 764, -323,
		  674, 552, -160, -262, 549, 519, 533, 227, 137, -761,
		  -987, 558, 609, 679, -504, -10, 704, -988, -805, -195,
		  726, -192, 294, 557, -51, 114, 436, -837, 998, -576,
		  -978, 350, -691, 846, -377, -212, -791, 202, 515, 318,
		  910, 197, 136, 823, -840, 817, 328, 33, -191, -84,
		  955, -987, -200, 698, 728, -285, 891, 255, 733, 756,
		  -894, -600, 673, -229, 756, 731, -904, 98, -212, 270,
		  331, -72, 413, -760, 426, 732, 971, 756, 184, 986,
		  63, -630, 764, 702, 292, 182, 679, 710, 884, 740,
		  -114, 38, -549, -876, -839, 678, -649, -773, 720, -608,
		  -432, 81, -610, -596, 792, -30, 521, -806, 758, 930,
		  373, -112, -462, -893, -102, -220, -662, 829, 520, -460,
		  -207, 925, -483, 972, -458, 123, -294, -721, 207, 434,
		  -961, -515, -530, 384, -222, -447, -467, -221, 658, 159,
		  73, -115, -422, 431, -981, 387, 990, 64, -382, -298,
		  766, 778, 85, -549, 156, 850, -44, -953, -726, 430,
		  -581, -28, -123, 207, -143, 113, 859, 382, -191, 872,
		  -252, -93, 388, -648, -962, -518, -427, -954, 160, -403,
		  -374, -35, 996, -563, 804, -778, -879, -822, -473, 71,
		  680, -953, 981, -754, 365, 152, 636, -211, -300, -750,
		  -507, 976, -270, -406, 302, -87, 71, 557, 981, 548,
		  -277, -924, 751, 73, 467, -474, -342, 246, -240, -820,
		  177, -81, -248, -231, -764, 559, 742, 233, 212, -931,
		  80, 726, 747, -908, 364, 989, 632, -18, -743, -830,
		  -825, 679, 180, -318, -660, 769, -45, -581, 760, 719,
		  -266, -120, 276, -941, 493, -483, 825, 789, 245, -837,
		  -393, -234, 524, -832, -895, 672, 378, -151, 278, 630,
		  225, -72, 123, -212, -194, -76, -769, 699, 166, 698,
		  883, 373, 937, -371, 207, -799, -758, -643, -550, -760,
		  981, 599, -913, -472, -270, -384, -250, -765, -886, 574,
		  -239, -775, -383, 956, -313, 914, -387, 180, 601, -169,
		  512, -818, -206, 583, 432, -351, 295, 167, 412, 659,
		  -499, -385, -555, -61, -634, 742, 72, -378, -288, 161,
		  675, -815, 214, -392, 461, -901, 266, 176, 46, -987,
		  -930, 287, -579, 464, 759, -351, -47, 225, -275, -75,
		  -30, 983, -136, -744, 281, -248, 902, -456, -453, 100,
		  549, 191, -80, -999, -433, 488, 177, -593, 734, 712,
		  -670, -274, 539, 546, -458, 389, 551, 447, -1000, 833,
		  268, -53, 359, 119, 375, 529, -906, -303, 877, 539,
		  -570, 251, 625, -86, -195, -634, -800, -747, 154, -84,
		  449, -903, 611, 749, 1000, -489, 258, 116, 422, 276,
		  821, -629, -433, 708, -662, 704, -670, -142, 322, 844,
		  -135, -489, 631, 186, -676, 512, 25, -147, -490, 337,
		  313, 952, -466, -118, 984, -476, -456, 561, -430, 339,
		  -164, 722, 146, -747, 684, 357, -711, 983, 105, -265,
		  -83, 868, -180, -247, -272, -17, 752, 770, 438, 46,
		  -829, -762, 81, -109, -705, 613, 644, -643, -626, 662,
		  -960, -647, 488, 362, -472, -300, -117, 62, -439, 262,
		  351, 198, 16, 582, -946, 479, 143, -469, 123, -433,
		  -960, -747, -294, 999, -496, 834, 34, 965, 494, -6,
		  -440, -503, -559, 128, 696, 975, 256, -730, 420, 108,
		  539, -240, -976, 709, -909, 51, 777, 82, -861, 671,
		  47, 997, -118, 237, -517, 539, -311, -62, 107, 109,
		  -564, 863, 646, -921, -714, -49, -139, 610, -300, -493,
		  -258, 325, 541, 429, 593, -956, 948, 755, -390, -927,
		  -385, 593, 217, -669, 429, 248, 597, 432, -770, 889,
		  172, -214, -714, -380, 694, 677, -91, -759, -178, -535,
		  563, -996, 222, 668, -18, 803, 70, 854, -516, 613,
		  -688, 372, 760, 848, 256, -503, -476, 627, 35, 119,
		  -775, 34, -580, -783, -952, -352, 976, 965, 337, -418,
		  984, -629, 450, 943, -520, 291, -155, 529, -75, -527,
		  -119, -565, -543, 155, -725, 219, 224, -38, 111, 444,
		  952, -452, -513, -271, -499, -575, -735, -734, 216, 856,
		  -805, 459, -204, -273, 873, -65, 942, -158, -962, 837,
		  30, 496, 324, -594, 767, -322, -252, -876, -684, 591,
		  -996, -73, -39, 706, -658, -171, -635, -453, 809, -533,
		  493, -712, -673, 460, 36, -417, -236, -396, -674, 102,
		  678, 609, -746, -907, -137, -443, -2, -860, 146, 765,
		  -652, 298, -623, -289, -309, 584, 520, 386, 369, 105,
		  -944, -812, 217, -769, -378, 566, -911, -789, 410, -680,
		  149, -318, 164, -251, 479, 700, -578, -834, -639, -919;

	hypro::Zonotope<Number> z1( center1, generators1 );	 // Creates an Zonotope
	hypro::Zonotope<Number> z2( center2, generators2 );	 // Creates an Zonotope
	hypro::Zonotope<Number> z3( center3, generators3 );	 // Creates an Zonotope

	std::cout << "------------------------------" << std::endl;
	std::cout << "Minkowski sum" << std::endl;
	std::cout << "------------------------------" << std::endl;

	struct timeval t1, t2;
	double elapsedTime;
	// start timer
	gettimeofday( &t1, NULL );

	hypro::Zonotope<Number> z_sum = z1.minkowskiSum( z2 );

	// stop timer
	gettimeofday( &t2, NULL );

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "center" << std::endl;
	std::cout << "------------------------------" << std::endl;

	// start timer
	gettimeofday( &t1, NULL );

	hypro::vector_t<Number> vec = z_sum.center();

	// stop timer
	gettimeofday( &t2, NULL );

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "generators" << std::endl;
	std::cout << "------------------------------" << std::endl;

	// start timer
	gettimeofday( &t1, NULL );

	hypro::matrix_t<Number> gen = z_sum.generators();

	// stop timer
	gettimeofday( &t2, NULL );

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "unite" << std::endl;
	std::cout << "------------------------------" << std::endl;

	// start timer
	gettimeofday( &t1, NULL );

	hypro::Zonotope<Number> z_united = z1.unite( z2 );

	// stop timer
	gettimeofday( &t2, NULL );

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "satisfies halfspace" << std::endl;
	std::cout << "------------------------------" << std::endl;

	// start timer
	gettimeofday( &t1, NULL );

	std::pair<hypro::CONTAINMENT, hypro::Zonotope<Number>> p = z3.satisfiesHalfspaces( cC, dist );

	// stop timer
	gettimeofday( &t2, NULL );

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "contains point" << std::endl;
	std::cout << "------------------------------" << std::endl;

	std::vector<double> temp{ 630, 812, -746, 827, 265, -805, -443, 94, 915, 930, -685, 942, 915, -29, 601, -717,
							  -157, 832, 585, 919, 312, -929, 699, 868, 358, 516, 487, -216, 311, -658, 412, -937, -446,
							  -908, -806, 647, 390, -366, 901, -932, -123, -237, 531, 591, -627, -20, -109, 293, 419,
							  510, -448, 360, 310, -675, -762, -3, 920, -319, 171, -553, 503, -490, 12, 398, 782, 919,
							  94, -723, -702, -485, 682, -492, 629, -513, 859, -300, -607, -498, 232, -53, -297, 662,
							  171, 99, 835, -429, 515, 508, -239, 136, -849, -893, 62, 559, 868, -741, 138, -61, -977, -326 };
	hypro::Point<double>* point = new hypro::Point<double>( temp );

	// start timer
	gettimeofday( &t1, NULL );

	// const bool ans = z3.contains(*point);

	// stop timer
	gettimeofday( &t2, NULL );

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "contains zonotope" << std::endl;
	std::cout << "------------------------------" << std::endl;

	hypro::vector_t<Number> cent4 = hypro::vector_t<Number>( 3 );
	cent4 << 2, 0, 1;
	hypro::matrix_t<Number> gen1 = hypro::matrix_t<Number>( 3, 3 );
	gen1 << 1, 0, 0, 0, 1, 0, 0, 0, 1;
	hypro::matrix_t<Number> gen2 = hypro::matrix_t<Number>( 3, 3 );
	gen2 << 10, 0, 0, 0, 10, 0, 0, 0, 10;
	hypro::Zonotope<Number> z5( cent4, gen1 );	// Creates an Zonotope
	hypro::Zonotope<Number> z6( cent4, gen2 );	// Creates an Zonotope

	// start timer
	gettimeofday( &t1, NULL );

	const bool ans1 = z6.contains( z5 );

	std::cout << "Ans1: " << ans1 << std::endl;

	// stop timer
	gettimeofday( &t2, NULL );

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "emptyness test" << std::endl;
	std::cout << "------------------------------" << std::endl;

	// start timer
	gettimeofday( &t1, NULL );

	const bool empt = z1.empty();

	// stop timer
	gettimeofday( &t2, NULL );

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "unite equal vectors" << std::endl;
	std::cout << "------------------------------" << std::endl;

	hypro::vector_t<Number> cent11 = hypro::vector_t<Number>( 5 );
	cent11 << 2, 0, 4, 1, 2;
	hypro::matrix_t<Number> gen11 = hypro::matrix_t<Number>( 5, 5 );
	gen11 << 1, 0, 1, 0, 1, 0, 1, 0, 2, 2, 0, 1, 0, -2, 2, 2, 0, 2, 0, 2, 0, 0, 0, 0, 2;
	hypro::Zonotope<Number> z11( cent11, gen11 );

	// start timer
	gettimeofday( &t1, NULL );
	z11.uniteEqualVectors();
	// stop timer
	gettimeofday( &t2, NULL );

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "remove Empty Generators" << std::endl;
	std::cout << "------------------------------" << std::endl;

	hypro::vector_t<Number> cent10 = hypro::vector_t<Number>( 4 );
	cent10 << 3, 4, 5, 1;
	hypro::matrix_t<Number> gen10 = hypro::matrix_t<Number>( 4, 3 );
	gen10 << 1, 0, 0, 10, -1, 0, 2, 0, 0, 0, 0, 0;
	hypro::Zonotope<Number> z10( cent10, gen10 );

	// start timer
	gettimeofday( &t1, NULL );

	z10.removeEmptyGenerators();

	// stop timer
	gettimeofday( &t2, NULL );

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "vertices" << std::endl;
	std::cout << "------------------------------" << std::endl;

	// start timer
	gettimeofday( &t1, NULL );

	auto v = z2.vertices();

	// stop timer
	// 	gettimeofday(&t2, NULL);

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "reduce order" << std::endl;
	std::cout << "------------------------------" << std::endl;

	hypro::matrix_t<Number> generators12 = hypro::matrix_t<Number>( 4, 10 );
	generators12 << -10, 6, -13, 17, -9, -8, 7, 9, -6, 5,
		  13, -11, 17, -6, 1, -14, -11, 1, -4, 5,
		  -2, -1, -8, -10, -20, -3, 19, 4, 9, -9,
		  -13, 4, 18, -20, -20, 18, 4, -11, -8, -19;

	hypro::vector_t<Number> center12 = hypro::vector_t<Number>( 4 );
	center12 << 1, 0, 5, 1;
	hypro::Zonotope<Number> z12( center12, generators12 );
	// start timer
	gettimeofday( &t1, NULL );

	z12.reduceOrder( 2 );

	// stop timer
	gettimeofday( &t2, NULL );

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	std::cout << "------------------------------" << std::endl;
	std::cout << "bspline0" << std::endl;
	std::cout << "------------------------------" << std::endl;

	carl::Interval<Number> u;
	u.setLower( 0 );
	u.setUpper( 1 );

	Number a = 1;
	Number b = 6;
	Number c = a / b;  // 1/6

	// start timer
	gettimeofday( &t1, NULL );
	carl::Interval<Number> res1 = c * carl::pow( a - u, 3 );
	// stop timer
	gettimeofday( &t2, NULL );

	carl::Interval<Number> err1;
	Number err1_a = 1;
	Number err1_b = 6;
	Number err1_c = err1_a / err1_b;
	Number err1_l = -( res1.lower() - 0 ) / (err1_c)*100;
	Number err1_u = ( res1.upper() - err1_c ) / (err1_c)*100;

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Result:: [" << res1.lower() << "  " << res1.upper() << "]" << std::endl;
	std::cout << "Error: [" << err1_l << " " << err1_u << "] %" << std::endl;
	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "bspline1" << std::endl;
	std::cout << "------------------------------" << std::endl;

	Number d = 3;
	Number e = 4;

	// start timer
	gettimeofday( &t1, NULL );
	carl::Interval<Number> res2 = c * ( d * carl::pow( u, 3 ) - b * carl::pow( u, 2 ) + e );
	// stop timer
	gettimeofday( &t2, NULL );

	carl::Interval<Number> err2;
	Number err2_b1 = 2;
	Number err2_b2 = 3;
	Number err2_b = err2_b1 / err2_b2;	// 2/3
	Number err2_l = -( res2.lower() - c ) / ( err2_b - c ) * 100;
	Number err2_u = ( res2.upper() - err2_b ) / ( err2_b - c ) * 100;

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Result:: [" << res2.lower() << "  " << res2.upper() << "]" << std::endl;
	std::cout << "Error: [" << err2_l << " " << err2_u << "] %" << std::endl;
	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "bspline2" << std::endl;
	std::cout << "------------------------------" << std::endl;

	Number f = -1;
	Number g = -3;

	// start timer
	gettimeofday( &t1, NULL );
	carl::Interval<Number> res3 = c * ( g * carl::pow( u, 3 ) + d * carl::pow( u, 2 ) + u * d + a );
	// stop timer
	gettimeofday( &t2, NULL );

	carl::Interval<Number> err3;

	Number err3_l = -( res3.lower() - c ) / ( err2_b - c ) * 100;
	Number err3_u = ( res3.upper() - err2_b ) / ( err2_b - c ) * 100;

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Result:: [" << res3.lower() << "  " << res3.upper() << "]" << std::endl;
	std::cout << "Error: [" << err3_l << " " << err3_u << "] %" << std::endl;
	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "bspline3" << std::endl;
	std::cout << "------------------------------" << std::endl;

	// start timer
	gettimeofday( &t1, NULL );
	carl::Interval<Number> res4 = c * ( carl::pow( u, 3 ) * f );
	// stop timer
	gettimeofday( &t2, NULL );

	carl::Interval<Number> err4;
	Number err4_a = 1 / 6;
	Number err4_b = 0;
	Number err4_l = -( res4.lower() + c ) / ( err4_b - c ) * 100;
	Number err4_u = ( res4.upper() - err4_b ) / ( err4_b - c ) * 100;

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Result:: [" << res4.lower() << "  " << res4.upper() << "]" << std::endl;
	std::cout << "Error: [" << err4_l << " " << err4_u << "] %" << std::endl;
	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "savitzky-golay filter" << std::endl;
	std::cout << "------------------------------" << std::endl;

	carl::Interval<Number> x1;
	x1.setLower( -2 );
	x1.setUpper( 2 );

	Number x1_1 = 7;
	Number x1_2 = 984;
	Number x1_3 = 76;
	Number x1_4 = 92;
	Number x1_5 = 39;
	Number x1_6 = 46;
	Number x1_7 = 75;

	// start timer
	gettimeofday( &t1, NULL );
	carl::Interval<Number> res5 = carl::pow( x1, 3 ) * x1_1 - carl::pow( x1, 3 ) * x1_2 - ( carl::pow( x1, 2 ) * x1 ) * x1_3 + ( x1 * carl::pow( x1, 2 ) ) * x1_4 + carl::pow( x1, 2 ) * x1_1 - ( x1 * x1 ) * x1_5 - carl::pow( x1, 2 ) * x1_6 + x1 * x1_1 - x1 * x1_6 - x1_7;
	// stop timer
	gettimeofday( &t2, NULL );

	carl::Interval<Number> err5;
	Number err5_a = -9.453;
	Number err5_b = 9.303;
	Number err5_l = -( res5.lower() - err5_a ) / ( err5_b - err5_a ) * 100;
	Number err5_u = ( res5.upper() - err5_b ) / ( err5_b - err5_a ) * 100;

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Result:: [" << res5.lower() << "  " << res5.upper() << "]" << std::endl;
	std::cout << "Error: [" << err5_l << " " << err5_u << "] %" << std::endl;
	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "Image rejection unit" << std::endl;
	std::cout << "------------------------------" << std::endl;

	carl::Interval<Number> x2;
	x2.setLower( 0 );
	x2.setUpper( 1 );

	Number x2_1 = 16384;
	Number x2_2 = 64767;
	Number x2_3 = 57344;

	// start timer
	gettimeofday( &t1, NULL );
	carl::Interval<Number> res6 = ( carl::pow( x2, 4 ) + carl::pow( x2, 4 ) * x2_1 ) + ( carl::pow( x2, 2 ) - carl::pow( x2, 2 ) ) * x2_2 + x2 - x2 + ( x2 * x2 ) * ( x2 - x2 ) * x2_3;
	// stop timer
	gettimeofday( &t2, NULL );

	carl::Interval<Number> err6;
	Number err6_a = -5.51e4;
	Number err6_b = 8.79e4;
	Number err6_l = -( res6.lower() - err6_a ) / ( err6_b - err6_a ) * 100;
	Number err6_u = ( res6.upper() - err6_b ) / ( err6_b - err6_a ) * 100;

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Result:: [" << res6.lower() << "  " << res6.upper() << "]" << std::endl;
	std::cout << "Error: [" << err6_l << " " << err6_u << "] %" << std::endl;
	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "A random function" << std::endl;
	std::cout << "------------------------------" << std::endl;

	Number x3_1 = 2;

	// start timer
	gettimeofday( &t1, NULL );
	carl::Interval<Number> res7 = ( x1 - a ) * ( x1 + x3_1 ) * ( x1 + a ) * ( x1 - x3_1 ) * carl::pow( x1, 2 );
	// stop timer
	gettimeofday( &t2, NULL );

	carl::Interval<Number> err7;
	Number err7_a = -36;
	Number err7_b = 64;
	Number err7_l = -( res7.lower() - err7_a ) / ( err7_b - err7_a ) * 100;
	Number err7_u = ( res7.upper() - err7_b ) / ( err7_b - err7_a ) * 100;

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Result:: [" << res7.lower() << "  " << res7.upper() << "]" << std::endl;
	std::cout << "Error: [" << err7_l << " " << err7_u << "] %" << std::endl;
	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "Mitchell function" << std::endl;
	std::cout << "------------------------------" << std::endl;

	Number x4_1 = 4;
	Number x4_2 = 17;
	Number x4_3 = 20;

	// start timer
	gettimeofday( &t1, NULL );
	carl::Interval<Number> res8 = ( carl::pow( x1, 4 ) + carl::pow( carl::pow( x1, 2 ) + carl::pow( x1, 2 ), 2 ) ) * x4_1 + carl::pow( x1, 2 ) * x4_2 * ( carl::pow( x1, 2 ) + carl::pow( x1, 2 ) ) - ( carl::pow( x1, 2 ) + carl::pow( x1, 2 ) + carl::pow( x1, 2 ) ) * x4_3 + x4_2;
	// stop timer
	gettimeofday( &t2, NULL );

	carl::Interval<Number> err8;
	Number err8_a = -8;
	Number err8_b = 641;
	Number err8_l = -( res8.lower() - err8_a ) / ( err8_b - err8_a ) * 100;
	Number err8_u = ( res8.upper() - err8_b ) / ( err8_b - err8_a ) * 100;

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Result:: [" << res8.lower() << "  " << res8.upper() << "]" << std::endl;
	std::cout << "Error: [" << err8_l << " " << err8_u << "] %" << std::endl;
	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "Matyas function" << std::endl;
	std::cout << "------------------------------" << std::endl;

	carl::Interval<Number> x5;
	x5.setLower( -100 );
	x5.setUpper( 100 );

	Number x5_1 = 0.26;
	Number x5_2 = 0.48;

	// start timer
	gettimeofday( &t1, NULL );
	carl::Interval<Number> res9 = ( carl::pow( x5, 2 ) + carl::pow( x5, 2 ) ) * x5_1 - x5 * x5 * x5_2;
	// stop timer
	gettimeofday( &t2, NULL );

	carl::Interval<Number> err9;
	Number err9_a = 0;
	Number err9_b = 10000;
	Number err9_l = -( res9.lower() - err9_a ) / ( err9_b - err9_a ) * 100;
	Number err9_u = ( res9.upper() - err9_b ) / ( err9_b - err9_a ) * 100;

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Result:: [" << res9.lower() << "  " << res9.upper() << "]" << std::endl;
	std::cout << "Error: [" << err9_l << " " << err9_u << "] %" << std::endl;
	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "Three hump function" << std::endl;
	std::cout << "------------------------------" << std::endl;

	carl::Interval<Number> x6;
	x6.setLower( -10 );
	x6.setUpper( 10 );

	Number x6_1 = 12;
	Number x6_2 = 6.3;
	Number x6_3 = 6;

	// start timer
	gettimeofday( &t1, NULL );
	carl::Interval<Number> res10 = carl::pow( x6, 2 ) * x6_1 - carl::pow( x6, 4 ) * x6_2 + carl::pow( x6, 6 ) + x6 * x6_3 * ( x6 - x6 );
	// stop timer
	gettimeofday( &t2, NULL );

	carl::Interval<Number> err10;
	Number err10_a = 0;
	Number err10_b = 0.94e6;
	Number err10_l = -( res10.lower() - err10_a ) / ( err10_b - err10_a ) * 100;
	Number err10_u = ( res10.upper() - err10_b ) / ( err10_b - err10_a ) * 100;

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Result:: [" << res10.lower() << "  " << res10.upper() << "]" << std::endl;
	std::cout << "Error: [" << err10_l << " " << err10_u << "] %" << std::endl;
	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	std::cout << "------------------------------" << std::endl;
	std::cout << "Ratscheck function" << std::endl;
	std::cout << "------------------------------" << std::endl;

	Number x7_1 = 4;
	Number x7_2 = 2.1;
	Number x7_3 = 1;
	Number x7_4 = 3;
	Number x7_5 = x7_3 / x7_4;	// 1/3

	// start timer
	gettimeofday( &t1, NULL );
	carl::Interval<Number> res11 = carl::pow( x5, 2 ) * x7_1 - carl::pow( x5, 4 ) * x7_2 + carl::pow( x5, 6 ) * x7_5 + x5 * x5 - carl::pow( x5, 2 ) * x7_1 + carl::pow( x5, 4 ) * x7_1;
	// stop timer
	gettimeofday( &t2, NULL );

	carl::Interval<Number> err11;
	Number err11_a = -1.03;
	Number err11_b = 0.33e12;
	Number err11_l = -( res11.lower() - err11_a ) / ( err11_b - err11_a ) * 100;
	Number err11_u = ( res11.upper() - err11_b ) / ( err11_b - err11_a ) * 100;

	// compute and print the elapsed time in millisec
	elapsedTime = ( t2.tv_sec - t1.tv_sec ) * 1000.0;	  // sec to ms
	elapsedTime += ( t2.tv_usec - t1.tv_usec ) / 1000.0;  // us to ms

	std::cout << "Result:: [" << res11.lower() << "  " << res11.upper() << "]" << std::endl;
	std::cout << "Error: [" << err11_l << " " << err11_u << "] %" << std::endl;
	std::cout << "Time spent: " << elapsedTime << "ms\n"
			  << std::endl;

	return 0;
}
