/*
 * Copyright (c) 2023.
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * A simple example file to test the vertex enumeration algorithm.
 */

#include <hypro/algorithms/convexHull/vertexEnumeration.h>
#include <hypro/representations/GeometricObjectBase.h>

int main() {
    using Number = mpq_class;

    hypro::HPolytope<Number> poly;

    hypro::matrix_t<Number> constraints = hypro::matrix_t<Number>(20, 8);
    constraints << 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
            0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0,
            0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0,
            0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1,
            0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0,
            0, 1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
            0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1;

    hypro::vector_t<Number> constants = hypro::vector_t<Number>(20);
    constants << Number(
            "845307651747246314042932816856700297692947646179105408332710149731068259"
            "187161876094951067855628009892664792429549873175853951923822527360461465"
            "400231472529411516484052559828455545297766519505563404259050939691072582"
            "704638977868999252481951572012031018151774070313811372694308624784431058"
            "466014383964866654236222881092614857703272250098731469172793632430627207"
            "012573500299293914999877808918306199485941610646339916637178427559817288"
            "111374152308554186513851042367358268134828761010876627912078225394957147"
            "343483702008378429289753634162885531884154684888346786382828839885813933"
            "705425918067647750007807125809986746194938063330779710977478600777565058"
            "723614325546632634308187971927991/"
            "388212627838663345665239151966633799996384158850494554355203685215947232"
            "586561614117003759037136781730917089842268905003723894859393020215755390"
            "575884490329465424673989860155523370856763493824429150647936156111203846"
            "318045341735609390119579777305082954322447791823494545123857221122840925"
            "808876759446974818764446452523792347590675051842171710893097937805143751"
            "705338301083358036320362453548957270211452286577397466837617162425595810"
            "991634183256674233875808485733067295390537401532848026714165136277302168"
            "702947664256838559801746716415747033055942515483444281588509515362174869"
            "600852661898007955328723000819125900947540243006685554699825477230451717"
            "01584624884181627194542215135232"),
            Number("37077794127536058437593532594080381925064671288534997955208804466"
                   "12882555379355023519682463354767803790232336889211460566601386760"
                   "22055653504434449304960622055359552897149360280847503830753214422"
                   "09816717220526909729687423391940042136214119689367817853873800978"
                   "88814918775969106096942425236751349556106403079748826719470188786"
                   "19404070883412756397965124860613859242350530072404141060123992083"
                   "37641658803212787508602383981421785229203209949626555043465152086"
                   "18497782699562017726305778955394645814655525420041127136340779320"
                   "77984801802135405485940043297280014936697073735431418983868749522"
                   "08098201204890450308250180453208479402946069862965881021978771991"
                   "194795704911164901033639529501750133861/"
                   "15605900347670333267191425151718876014124045489080693320048063880"
                   "93359619159261924775535858189839196945290441747298045585721320122"
                   "65739793194892649667596728241702024188750467111204400546566933964"
                   "85694678070740338951785135318142888811899625600875346191425920497"
                   "83206108914795381639208834996784710547527261999137119443906619471"
                   "74197218240472793145226981963803969419847634030532029610094345617"
                   "85171576719257225304828364685834367376486497332092495943569700320"
                   "52223646389331083243976929571424971642155515573854037703232546277"
                   "84978676242872546738979888324870520971658507106369981440525623412"
                   "65154290773147120236377339434892214185733964040234640395835163226"
                   "29328010938050189524074125045285257216"),
            Number("2252971602860607923348458105275059/"
                   "1135293761909910741897809911349248"),
            Number("-4301475657188585371758554507009983571295167180544481797550360209"
                   "28126216456545571641211619470943787252019167962707889637654238300"
                   "98021260756190974628753681087595010197795659806322297261780626689"
                   "44804863496388886465466253578789371569258257211909896833029632933"
                   "02396173246648273154688688394500348234339778890501736077613220517"
                   "07089698342913676356214133789584970277349206226071352994019808137"
                   "62827388624448530094387086802861040367998127477063360679562759200"
                   "13302370107033150751374200971237157972303569888710350006724063926"
                   "34453351943775773087941577271478386285431664834775321872172159101"
                   "30244928883001143306912000364890735206844640892652951288205754352"
                   "9597090883757134335699207043010096697806636005/"
                   "21805047748675767421251142156161316852090554202753706208264076344"
                   "42072954037514698416046742674447210987065109213018995531782985836"
                   "30071876985493051787705844197881560959272003912255235780080263710"
                   "65103660735458594533941696405704106677539325777936660834392230323"
                   "10638854765128465883133399731392497903032063810316356537729089831"
                   "12150753439354041239098641236267783996463129544114298264141732621"
                   "97657067311024492169890640818353038963815605153816930199729835948"
                   "54360497668211458772065129282011684552540593180771650954125313868"
                   "34633540785505051352651608344047162887751387542740435538127057326"
                   "48252794851255123954993746355953883318947252309901086834913160949"
                   "83698606050982804358911613811148965225168896"),
            Number("-1177678662704496561145654427814445403926277130994467225670830477"
                   "51434801827637695663791820118064422127516855719338590673758889625"
                   "70737676483939755358184017130664655620197938311567034581776769510"
                   "01055340692782387236377742489476288343957809353911863667078012297"
                   "96441765638227614164508590442701695350933353818584739609753847315"
                   "98011119908567468654908150114757987190858351666911487808770237489"
                   "87457920063630315440129326726709028960119939665216324260480790918"
                   "16447227867076211933801556775192607684378265470342859589896498170"
                   "18505120110153831286990645736371370908980688859136292994437005536"
                   "65801894438533414721320231373452347323389841954688957811660981999"
                   "374065432188680149160026243954430511671/"
                   "54242271820764342512718776554149171100274783465483535667627560029"
                   "79631677341540706543152792432176626746710163574032244072581413382"
                   "84569029080120129733662307529304782663526294962074985566513239800"
                   "96658896648333941346139480881087858724376617057182375836135090805"
                   "06173331067779521489266881496088626834788560729970662813062709056"
                   "16466493360489421782874124737418809339001539761001432445936351334"
                   "66311561481768982682363998699066547307766058765202150590619647252"
                   "97663292993502058159640811427812138596675258711864789882678772467"
                   "97750354366324290642743787616851448337008194738659006955227268965"
                   "63641555343190696715750810170683260127647426427879185137618128301"
                   "776787011549979146657413795615342592"),
            Number("-4010640686447036774290956512961799192465877410676632087594568990"
                   "64405792875165165842750492915203102146022229395385668785898829787"
                   "57399359098542194628635316356061692531277212053231628388706825393"
                   "07590952533544562676594683917043507553794849523881751203769406900"
                   "07124089975125983879577763451870703892581839519414280170729383877"
                   "10998171273931121918741957565372514318715290195709622685484873457"
                   "93300198889346718361104427432933455061976259069236170692861718407"
                   "58256802414607716499414072340340015798890746953885458307306788335"
                   "48680982547373636464619433219887201272684833636801374564744589008"
                   "92461478877836778822613605872922593990661320700462357209754934008"
                   "3638739614262212629558253137191607260739/"
                   "16999238948797613945078682974912144985296667830220909531018977689"
                   "98637499543583857572206617750368803840471971563094589003293867695"
                   "31597808920995263473536076795385117013881416736312366771168302436"
                   "70252418386173471546844401570495456188389016466089029192318274647"
                   "07106829530179239383070699180875885475912487067709649437517676811"
                   "76655847407146399081496467221320920429554135635310962894632832881"
                   "67176702722423164487204541682328176444141529711898642680298273214"
                   "99298231027393752616224358607749657255221575023908169480622261896"
                   "88549147910481030285632943124406839128382314092006987102231451967"
                   "64204373901712903903293274035493842242392175244834440414068704249"
                   "25545807125365077867531923893728051200"),
            Number("-6773413839565226271/3602879701896396800"),
            Number("96823076695785204409822286022001570903125407853449277827089369967"
                   "87983027410017374605779670063705109620654744838182474071885980237"
                   "91121703842483525863733598483330035343964096210208749246502955982"
                   "93305518718195410834174379536264962337929836547935854555817242674"
                   "90227564791068430281636940253477618154389694615258758435079717992"
                   "00969030551313185070987793840933246705097799213026204266813403742"
                   "35234715984300393632567687651217233346103587101322273128196888798"
                   "57033817580887457452557373858834106093240847979117409610187760550"
                   "80167671001577965910931333429399529277163313145418842194968276191"
                   "94840826522403269440410178106348623729144241369086274752827040778"
                   "8538325557789153699287767940300535055049/"
                   "48694432885326229868895265937258678205405956447955199003576177733"
                   "39786229787789780893334467246517732520749583429688874893873448577"
                   "36947325677615983742857874006065209057105701998161633780569856047"
                   "15946076297529239452830817048366697462214023900768297097795388528"
                   "14804598115316644321598115687850852254192963670025613101150014947"
                   "46047685824993524605639226792463125056702625466964241793944142103"
                   "79023048532388033214302027919727117846149426721308216155341898033"
                   "69810017346122832989727693727233694124597087351030631681678580703"
                   "11896090192928454287947779602204189781284262251932503674647874254"
                   "09070800350795520031677409227679475457256317520905408444087674264"
                   "254800166685636408300850685286337740800"),
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;

    hypro::VertexEnumeration<Number> ve(constraints, constants);
    ve.enumerateVertices();
    std::vector<hypro::Point<Number>> vertices = ve.getPoints();

    std::cout << "Computed vertices: " << std::endl;
    for (const auto &vertex: vertices) {
        std::cout
                << hypro::convert<Number, double>(vertex.rawCoordinates()).transpose()
                << std::endl;
    }

    /*
  poly.insert(hypro::Halfspace<Number>({0, 0, 45908267, 0, 0, 0, 0, 0 },
  1000000000)); poly.insert(hypro::Halfspace<Number>({0, 42057358, 42057358, 0, 0,
  0, 0, 0 }, 1000000000)); poly.insert(hypro::Halfspace<Number>({0, 501382969, 0,
  0, 0, 0, 0, 0 }, 1000000000)); poly.insert(hypro::Halfspace<Number>({0,
  50696426, -50696427, 0, 0, 0, 0, 0 }, -1000000000));
    poly.insert(hypro::Halfspace<Number>({0, 0, -46041068, 0, 0, 0, 0, 0 },
  -1000000000)); poly.insert(hypro::Halfspace<Number>({0, -42352525, -42352525, 0,
  0, 0, 0, 0 }, -1000000000)); poly.insert(hypro::Halfspace<Number>({0,
  -529100530, 0, 0, 0, 0, 0, 0 }, -1000000000));
    poly.insert(hypro::Halfspace<Number>({0, -50296650, 50296649, 0, 0, 0, 0, 0 },
  1000000000)); poly.insert(hypro::Halfspace<Number>({1, 0, 0, 0, 0, 0, 0, 0 },
  0)); poly.insert(hypro::Halfspace<Number>({-1, 0, 0, 0, 0, 0, 0, 0 }, 0));
    poly.insert(hypro::Halfspace<Number>({0, 0, 0, 1, 0, 0, 0, 0 }, 0));
    poly.insert(hypro::Halfspace<Number>({0, 0, 0, -1, 0, 0, 0, 0 }, 0));
    poly.insert(hypro::Halfspace<Number>({0, 0, 0, 0, 1, 0, 0, 0 }, 0));
    poly.insert(hypro::Halfspace<Number>({0, 0, 0, 0, -1, 0, 0, 0 }, 0));
    poly.insert(hypro::Halfspace<Number>({0, 0, 0, 0, 0, 1, 0, 0 }, 0));
    poly.insert(hypro::Halfspace<Number>({0, 0, 0, 0, 0, -1, 0, 0 }, 0));
    poly.insert(hypro::Halfspace<Number>({0, 0, 0, 0, 0, 0, 1, 0 }, 0));
    poly.insert(hypro::Halfspace<Number>({0, 0, 0, 0, 0, 0, -1, 0 }, 0));
    poly.insert(hypro::Halfspace<Number>({0, 0, 0, 0, 0, 0, 0, 1 }, 0));
    poly.insert(hypro::Halfspace<Number>({0, 0, 0, 0, 0, 0, 0, -1 }, 0));

    std::cout << poly << std::endl;

  hypro::VertexEnumeration<Number> ve(poly.matrix(), poly.vector());
  ve.enumerateVertices();
  std::vector<hypro::Point<Number>> vertices = ve.getPoints();

  std::cout << "Computed vertices: " << std::endl;
  for(const auto& vertex : vertices) {
    std::cout <<
  hypro::convert<Number,double>(vertex.rawCoordinates()).transpose() << std::endl;
  }
    */
    exit(0);
}
